
SubGHz_Phy_PingPong_FSK_Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c03c  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800c174  0800c174  0001c174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c694  0800c694  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c694  0800c694  0001c694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c69c  0800c69c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c69c  0800c69c  0001c69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6a0  0800c6a0  0001c6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800c6a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  2000001c  0800c6c0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200008a0  0800c6c0  000208a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000231e2  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b04  00000000  00000000  00043228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f58  00000000  00000000  00048d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d08  00000000  00000000  0004ac88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ea7  00000000  00000000  0004c990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002292d  00000000  00000000  0006f837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c33da  00000000  00000000  00092164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015553e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e98  00000000  00000000  00155590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000001c 	.word	0x2000001c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800c15c 	.word	0x0800c15c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000020 	.word	0x20000020
 8000174:	0800c15c 	.word	0x0800c15c

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b974 	b.w	8000488 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9e08      	ldr	r6, [sp, #32]
 80001be:	460d      	mov	r5, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	4688      	mov	r8, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14d      	bne.n	8000264 <__udivmoddi4+0xac>
 80001c8:	428a      	cmp	r2, r1
 80001ca:	4694      	mov	ip, r2
 80001cc:	d968      	bls.n	80002a0 <__udivmoddi4+0xe8>
 80001ce:	fab2 f282 	clz	r2, r2
 80001d2:	b152      	cbz	r2, 80001ea <__udivmoddi4+0x32>
 80001d4:	fa01 f302 	lsl.w	r3, r1, r2
 80001d8:	f1c2 0120 	rsb	r1, r2, #32
 80001dc:	fa20 f101 	lsr.w	r1, r0, r1
 80001e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e4:	ea41 0803 	orr.w	r8, r1, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001ee:	0c21      	lsrs	r1, r4, #16
 80001f0:	fbb8 fef5 	udiv	lr, r8, r5
 80001f4:	fa1f f78c 	uxth.w	r7, ip
 80001f8:	fb05 831e 	mls	r3, r5, lr, r8
 80001fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000200:	fb0e f107 	mul.w	r1, lr, r7
 8000204:	4299      	cmp	r1, r3
 8000206:	d90b      	bls.n	8000220 <__udivmoddi4+0x68>
 8000208:	eb1c 0303 	adds.w	r3, ip, r3
 800020c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000210:	f080 811e 	bcs.w	8000450 <__udivmoddi4+0x298>
 8000214:	4299      	cmp	r1, r3
 8000216:	f240 811b 	bls.w	8000450 <__udivmoddi4+0x298>
 800021a:	f1ae 0e02 	sub.w	lr, lr, #2
 800021e:	4463      	add	r3, ip
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0f5 	udiv	r0, r3, r5
 8000228:	fb05 3310 	mls	r3, r5, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 f707 	mul.w	r7, r0, r7
 8000234:	42a7      	cmp	r7, r4
 8000236:	d90a      	bls.n	800024e <__udivmoddi4+0x96>
 8000238:	eb1c 0404 	adds.w	r4, ip, r4
 800023c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000240:	f080 8108 	bcs.w	8000454 <__udivmoddi4+0x29c>
 8000244:	42a7      	cmp	r7, r4
 8000246:	f240 8105 	bls.w	8000454 <__udivmoddi4+0x29c>
 800024a:	4464      	add	r4, ip
 800024c:	3802      	subs	r0, #2
 800024e:	1be4      	subs	r4, r4, r7
 8000250:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000254:	2100      	movs	r1, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa8>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	428b      	cmp	r3, r1
 8000266:	d908      	bls.n	800027a <__udivmoddi4+0xc2>
 8000268:	2e00      	cmp	r6, #0
 800026a:	f000 80ee 	beq.w	800044a <__udivmoddi4+0x292>
 800026e:	2100      	movs	r1, #0
 8000270:	e9c6 0500 	strd	r0, r5, [r6]
 8000274:	4608      	mov	r0, r1
 8000276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027a:	fab3 f183 	clz	r1, r3
 800027e:	2900      	cmp	r1, #0
 8000280:	d14a      	bne.n	8000318 <__udivmoddi4+0x160>
 8000282:	42ab      	cmp	r3, r5
 8000284:	d302      	bcc.n	800028c <__udivmoddi4+0xd4>
 8000286:	4282      	cmp	r2, r0
 8000288:	f200 80f9 	bhi.w	800047e <__udivmoddi4+0x2c6>
 800028c:	1a84      	subs	r4, r0, r2
 800028e:	eb65 0303 	sbc.w	r3, r5, r3
 8000292:	2001      	movs	r0, #1
 8000294:	4698      	mov	r8, r3
 8000296:	2e00      	cmp	r6, #0
 8000298:	d0e2      	beq.n	8000260 <__udivmoddi4+0xa8>
 800029a:	e9c6 4800 	strd	r4, r8, [r6]
 800029e:	e7df      	b.n	8000260 <__udivmoddi4+0xa8>
 80002a0:	b902      	cbnz	r2, 80002a4 <__udivmoddi4+0xec>
 80002a2:	deff      	udf	#255	; 0xff
 80002a4:	fab2 f282 	clz	r2, r2
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	f040 8091 	bne.w	80003d0 <__udivmoddi4+0x218>
 80002ae:	eba1 050c 	sub.w	r5, r1, ip
 80002b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b6:	fa1f fe8c 	uxth.w	lr, ip
 80002ba:	2101      	movs	r1, #1
 80002bc:	fbb5 f3f7 	udiv	r3, r5, r7
 80002c0:	fb07 5013 	mls	r0, r7, r3, r5
 80002c4:	0c25      	lsrs	r5, r4, #16
 80002c6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ca:	fb0e f003 	mul.w	r0, lr, r3
 80002ce:	42a8      	cmp	r0, r5
 80002d0:	d908      	bls.n	80002e4 <__udivmoddi4+0x12c>
 80002d2:	eb1c 0505 	adds.w	r5, ip, r5
 80002d6:	f103 38ff 	add.w	r8, r3, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x12a>
 80002dc:	42a8      	cmp	r0, r5
 80002de:	f200 80cb 	bhi.w	8000478 <__udivmoddi4+0x2c0>
 80002e2:	4643      	mov	r3, r8
 80002e4:	1a2d      	subs	r5, r5, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ec:	fb07 5510 	mls	r5, r7, r0, r5
 80002f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002f4:	fb0e fe00 	mul.w	lr, lr, r0
 80002f8:	45a6      	cmp	lr, r4
 80002fa:	d908      	bls.n	800030e <__udivmoddi4+0x156>
 80002fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000300:	f100 35ff 	add.w	r5, r0, #4294967295
 8000304:	d202      	bcs.n	800030c <__udivmoddi4+0x154>
 8000306:	45a6      	cmp	lr, r4
 8000308:	f200 80bb 	bhi.w	8000482 <__udivmoddi4+0x2ca>
 800030c:	4628      	mov	r0, r5
 800030e:	eba4 040e 	sub.w	r4, r4, lr
 8000312:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000316:	e79e      	b.n	8000256 <__udivmoddi4+0x9e>
 8000318:	f1c1 0720 	rsb	r7, r1, #32
 800031c:	408b      	lsls	r3, r1
 800031e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000322:	ea4c 0c03 	orr.w	ip, ip, r3
 8000326:	fa20 f407 	lsr.w	r4, r0, r7
 800032a:	fa05 f301 	lsl.w	r3, r5, r1
 800032e:	431c      	orrs	r4, r3
 8000330:	40fd      	lsrs	r5, r7
 8000332:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fbb5 f8f9 	udiv	r8, r5, r9
 800033e:	0c20      	lsrs	r0, r4, #16
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	fb09 5518 	mls	r5, r9, r8, r5
 8000348:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800034c:	fb08 f00e 	mul.w	r0, r8, lr
 8000350:	42a8      	cmp	r0, r5
 8000352:	fa02 f201 	lsl.w	r2, r2, r1
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b8>
 8000358:	eb1c 0505 	adds.w	r5, ip, r5
 800035c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000360:	f080 8088 	bcs.w	8000474 <__udivmoddi4+0x2bc>
 8000364:	42a8      	cmp	r0, r5
 8000366:	f240 8085 	bls.w	8000474 <__udivmoddi4+0x2bc>
 800036a:	f1a8 0802 	sub.w	r8, r8, #2
 800036e:	4465      	add	r5, ip
 8000370:	1a2d      	subs	r5, r5, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb5 f0f9 	udiv	r0, r5, r9
 8000378:	fb09 5510 	mls	r5, r9, r0, r5
 800037c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45ae      	cmp	lr, r5
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1e2>
 8000388:	eb1c 0505 	adds.w	r5, ip, r5
 800038c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000390:	d26c      	bcs.n	800046c <__udivmoddi4+0x2b4>
 8000392:	45ae      	cmp	lr, r5
 8000394:	d96a      	bls.n	800046c <__udivmoddi4+0x2b4>
 8000396:	3802      	subs	r0, #2
 8000398:	4465      	add	r5, ip
 800039a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800039e:	fba0 9402 	umull	r9, r4, r0, r2
 80003a2:	eba5 050e 	sub.w	r5, r5, lr
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	46c8      	mov	r8, r9
 80003aa:	46a6      	mov	lr, r4
 80003ac:	d356      	bcc.n	800045c <__udivmoddi4+0x2a4>
 80003ae:	d053      	beq.n	8000458 <__udivmoddi4+0x2a0>
 80003b0:	b15e      	cbz	r6, 80003ca <__udivmoddi4+0x212>
 80003b2:	ebb3 0208 	subs.w	r2, r3, r8
 80003b6:	eb65 050e 	sbc.w	r5, r5, lr
 80003ba:	fa05 f707 	lsl.w	r7, r5, r7
 80003be:	fa22 f301 	lsr.w	r3, r2, r1
 80003c2:	40cd      	lsrs	r5, r1
 80003c4:	431f      	orrs	r7, r3
 80003c6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ca:	2100      	movs	r1, #0
 80003cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f103 	lsr.w	r1, r0, r3
 80003d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003dc:	fa25 f303 	lsr.w	r3, r5, r3
 80003e0:	4095      	lsls	r5, r2
 80003e2:	430d      	orrs	r5, r1
 80003e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3011 	mls	r0, r7, r1, r3
 80003f4:	0c2b      	lsrs	r3, r5, #16
 80003f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003fa:	fb01 f00e 	mul.w	r0, r1, lr
 80003fe:	4298      	cmp	r0, r3
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x260>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f101 38ff 	add.w	r8, r1, #4294967295
 800040e:	d22f      	bcs.n	8000470 <__udivmoddi4+0x2b8>
 8000410:	4298      	cmp	r0, r3
 8000412:	d92d      	bls.n	8000470 <__udivmoddi4+0x2b8>
 8000414:	3902      	subs	r1, #2
 8000416:	4463      	add	r3, ip
 8000418:	1a1b      	subs	r3, r3, r0
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000420:	fb07 3310 	mls	r3, r7, r0, r3
 8000424:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000428:	fb00 f30e 	mul.w	r3, r0, lr
 800042c:	42ab      	cmp	r3, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x28a>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 38ff 	add.w	r8, r0, #4294967295
 8000438:	d216      	bcs.n	8000468 <__udivmoddi4+0x2b0>
 800043a:	42ab      	cmp	r3, r5
 800043c:	d914      	bls.n	8000468 <__udivmoddi4+0x2b0>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	1aed      	subs	r5, r5, r3
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	e738      	b.n	80002bc <__udivmoddi4+0x104>
 800044a:	4631      	mov	r1, r6
 800044c:	4630      	mov	r0, r6
 800044e:	e707      	b.n	8000260 <__udivmoddi4+0xa8>
 8000450:	4686      	mov	lr, r0
 8000452:	e6e5      	b.n	8000220 <__udivmoddi4+0x68>
 8000454:	4618      	mov	r0, r3
 8000456:	e6fa      	b.n	800024e <__udivmoddi4+0x96>
 8000458:	454b      	cmp	r3, r9
 800045a:	d2a9      	bcs.n	80003b0 <__udivmoddi4+0x1f8>
 800045c:	ebb9 0802 	subs.w	r8, r9, r2
 8000460:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000464:	3801      	subs	r0, #1
 8000466:	e7a3      	b.n	80003b0 <__udivmoddi4+0x1f8>
 8000468:	4640      	mov	r0, r8
 800046a:	e7ea      	b.n	8000442 <__udivmoddi4+0x28a>
 800046c:	4620      	mov	r0, r4
 800046e:	e794      	b.n	800039a <__udivmoddi4+0x1e2>
 8000470:	4641      	mov	r1, r8
 8000472:	e7d1      	b.n	8000418 <__udivmoddi4+0x260>
 8000474:	46d0      	mov	r8, sl
 8000476:	e77b      	b.n	8000370 <__udivmoddi4+0x1b8>
 8000478:	3b02      	subs	r3, #2
 800047a:	4465      	add	r5, ip
 800047c:	e732      	b.n	80002e4 <__udivmoddi4+0x12c>
 800047e:	4608      	mov	r0, r1
 8000480:	e709      	b.n	8000296 <__udivmoddi4+0xde>
 8000482:	4464      	add	r4, ip
 8000484:	3802      	subs	r0, #2
 8000486:	e742      	b.n	800030e <__udivmoddi4+0x156>

08000488 <__aeabi_idiv0>:
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800049a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4013      	ands	r3, r2
 80004ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004b0:	68fb      	ldr	r3, [r7, #12]
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004c0:	2004      	movs	r0, #4
 80004c2:	f7ff ffe3 	bl	800048c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004c6:	2001      	movs	r0, #1
 80004c8:	f7ff ffe0 	bl	800048c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2102      	movs	r1, #2
 80004d0:	200f      	movs	r0, #15
 80004d2:	f001 fa56 	bl	8001982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004d6:	200f      	movs	r0, #15
 80004d8:	f001 fa6d 	bl	80019b6 <HAL_NVIC_EnableIRQ>

}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4313      	orrs	r3, r2
 80004f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4013      	ands	r3, r2
 8000502:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000504:	68fb      	ldr	r3, [r7, #12]
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000524:	2002      	movs	r0, #2
 8000526:	f7ff ffdb 	bl	80004e0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	2004      	movs	r0, #4
 800052c:	f7ff ffd8 	bl	80004e0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000530:	2001      	movs	r0, #1
 8000532:	f7ff ffd5 	bl	80004e0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 800053c:	481d      	ldr	r0, [pc, #116]	; (80005b4 <MX_GPIO_Init+0xa4>)
 800053e:	f002 f89d 	bl	800267c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000542:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000546:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	2301      	movs	r3, #1
 800054a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000550:	2302      	movs	r3, #2
 8000552:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	4619      	mov	r1, r3
 8000558:	4816      	ldr	r0, [pc, #88]	; (80005b4 <MX_GPIO_Init+0xa4>)
 800055a:	f001 fe61 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 800055e:	2303      	movs	r3, #3
 8000560:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000562:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000566:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000568:	2301      	movs	r3, #1
 800056a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	4619      	mov	r1, r3
 8000570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000574:	f001 fe54 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8000578:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800057c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057e:	2301      	movs	r3, #1
 8000580:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000586:	2303      	movs	r3, #3
 8000588:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4619      	mov	r1, r3
 800058e:	4809      	ldr	r0, [pc, #36]	; (80005b4 <MX_GPIO_Init+0xa4>)
 8000590:	f001 fe46 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 8000594:	2340      	movs	r3, #64	; 0x40
 8000596:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000598:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800059c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800059e:	2301      	movs	r3, #1
 80005a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	4619      	mov	r1, r3
 80005a6:	4804      	ldr	r0, [pc, #16]	; (80005b8 <MX_GPIO_Init+0xa8>)
 80005a8:	f001 fe3a 	bl	8002220 <HAL_GPIO_Init>

}
 80005ac:	bf00      	nop
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	48000400 	.word	0x48000400
 80005b8:	48000800 	.word	0x48000800

080005bc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005cc:	f023 0218 	bic.w	r2, r3, #24
 80005d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr

080005e6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f001 f8a3 	bl	8001734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f807 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f7ff ff8d 	bl	8000510 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 80005f6:	f009 ffec 	bl	800a5d2 <MX_SubGHz_Phy_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 80005fa:	f009 fff2 	bl	800a5e2 <MX_SubGHz_Phy_Process>
 80005fe:	e7fc      	b.n	80005fa <main+0x14>

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b09a      	sub	sp, #104	; 0x68
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2248      	movs	r2, #72	; 0x48
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f00b fd88 	bl	800c124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]
 8000622:	615a      	str	r2, [r3, #20]
 8000624:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000626:	f002 f859 	bl	80026dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ffc6 	bl	80005bc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <SystemClock_Config+0xac>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000638:	4a1c      	ldr	r2, [pc, #112]	; (80006ac <SystemClock_Config+0xac>)
 800063a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <SystemClock_Config+0xac>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800064c:	2324      	movs	r3, #36	; 0x24
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000650:	2381      	movs	r3, #129	; 0x81
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000658:	2300      	movs	r3, #0
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800065c:	23b0      	movs	r3, #176	; 0xb0
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000660:	2300      	movs	r3, #0
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fbab 	bl	8002dc4 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000674:	f000 f81c 	bl	80006b0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000678:	234f      	movs	r3, #79	; 0x4f
 800067a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2102      	movs	r1, #2
 8000694:	4618      	mov	r0, r3
 8000696:	f002 ff31 	bl	80034fc <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006a0:	f000 f806 	bl	80006b0 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3768      	adds	r7, #104	; 0x68
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	58000400 	.word	0x58000400

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <Error_Handler+0x8>

080006ba <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80006be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr

080006da <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006da:	b480      	push	{r7}
 80006dc:	b085      	sub	sp, #20
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80006e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80006f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4013      	ands	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006fe:	68fb      	ldr	r3, [r7, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
	...

0800070c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	; 0x30
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	222c      	movs	r2, #44	; 0x2c
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f00b fd03 	bl	800c124 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800071e:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <MX_RTC_Init+0x9c>)
 8000720:	4a22      	ldr	r2, [pc, #136]	; (80007ac <MX_RTC_Init+0xa0>)
 8000722:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000724:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <MX_RTC_Init+0x9c>)
 8000726:	221f      	movs	r2, #31
 8000728:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_RTC_Init+0x9c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <MX_RTC_Init+0x9c>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_RTC_Init+0x9c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_RTC_Init+0x9c>)
 800073e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000742:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_RTC_Init+0x9c>)
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_RTC_Init+0x9c>)
 800074c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000752:	4815      	ldr	r0, [pc, #84]	; (80007a8 <MX_RTC_Init+0x9c>)
 8000754:	f003 fbac 	bl	8003eb0 <HAL_RTC_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800075e:	f7ff ffa7 	bl	80006b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8000762:	4811      	ldr	r0, [pc, #68]	; (80007a8 <MX_RTC_Init+0x9c>)
 8000764:	f003 fe9a 	bl	800449c <HAL_RTCEx_SetSSRU_IT>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800076e:	f7ff ff9f 	bl	80006b0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800077e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000782:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_RTC_Init+0x9c>)
 8000792:	f003 fc07 	bl	8003fa4 <HAL_RTC_SetAlarm_IT>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800079c:	f7ff ff88 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	3730      	adds	r7, #48	; 0x30
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000038 	.word	0x20000038
 80007ac:	40002800 	.word	0x40002800

080007b0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b090      	sub	sp, #64	; 0x40
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	2238      	movs	r2, #56	; 0x38
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f00b fcaf 	bl	800c124 <memset>
  if(rtcHandle->Instance==RTC)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a16      	ldr	r2, [pc, #88]	; (8000824 <HAL_RTC_MspInit+0x74>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d125      	bne.n	800081c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 fa4b 	bl	8003c7c <HAL_RCCEx_PeriphCLKConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80007ec:	f7ff ff60 	bl	80006b0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007f0:	f7ff ff63 	bl	80006ba <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80007f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80007f8:	f7ff ff6f 	bl	80006da <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	2002      	movs	r0, #2
 8000802:	f001 f8be 	bl	8001982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8000806:	2002      	movs	r0, #2
 8000808:	f001 f8d5 	bl	80019b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	202a      	movs	r0, #42	; 0x2a
 8000812:	f001 f8b6 	bl	8001982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000816:	202a      	movs	r0, #42	; 0x2a
 8000818:	f001 f8cd 	bl	80019b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800081c:	bf00      	nop
 800081e:	3740      	adds	r7, #64	; 0x40
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40002800 	.word	0x40002800

08000828 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800082e:	2201      	movs	r2, #1
 8000830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	58000400 	.word	0x58000400

08000840 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 800085c:	f000 ff8a 	bl	8001774 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8000860:	f7ff ffe2 	bl	8000828 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000864:	2001      	movs	r0, #1
 8000866:	f001 ffcb 	bl	8002800 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}

0800086e <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8000872:	f000 ff8d 	bl	8001790 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8000876:	f000 fdd9 	bl	800142c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}

0800087e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8000882:	f000 ff77 	bl	8001774 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000886:	2101      	movs	r1, #1
 8000888:	2000      	movs	r0, #0
 800088a:	f001 ff35 	bl	80026f8 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}

08000892 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8000896:	f000 ff7b 	bl	8001790 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <NMI_Handler+0x4>

080008b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <HardFault_Handler+0x4>

080008b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <MemManage_Handler+0x4>

080008bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <BusFault_Handler+0x4>

080008c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <UsageFault_Handler+0x4>

080008c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80008fe:	f003 fe09 	bl	8004514 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000038 	.word	0x20000038

0800090c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <DMA1_Channel5_IRQHandler+0x10>)
 8000912:	f001 fae7 	bl	8001ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000114 	.word	0x20000114

08000920 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000924:	4802      	ldr	r0, [pc, #8]	; (8000930 <USART2_IRQHandler+0x10>)
 8000926:	f004 fc55 	bl	80051d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000084 	.word	0x20000084

08000934 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <RTC_Alarm_IRQHandler+0x10>)
 800093a:	f003 fc9b 	bl	8004274 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000038 	.word	0x20000038

08000948 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800094c:	4802      	ldr	r0, [pc, #8]	; (8000958 <SUBGHZ_Radio_IRQHandler+0x10>)
 800094e:	f004 f949 	bl	8004be4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000070 	.word	0x20000070

0800095c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000968:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800096a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4313      	orrs	r3, r2
 8000972:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000978:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4013      	ands	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000980:	68fb      	ldr	r3, [r7, #12]
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_SUBGHZ_Init+0x20>)
 8000992:	2208      	movs	r2, #8
 8000994:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_SUBGHZ_Init+0x20>)
 8000998:	f003 fea8 	bl	80046ec <HAL_SUBGHZ_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80009a2:	f7ff fe85 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000070 	.word	0x20000070

080009b0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff ffcf 	bl	800095c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	2032      	movs	r0, #50	; 0x32
 80009c4:	f000 ffdd 	bl	8001982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80009c8:	2032      	movs	r0, #50	; 0x32
 80009ca:	f000 fff4 	bl	80019b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <LL_RCC_SetClkAfterWakeFromStop>:
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80009de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80009e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	608b      	str	r3, [r1, #8]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff ffe8 	bl	80009d6 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8000a06:	f00a fe37 	bl	800b678 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <SystemApp_Init+0x38>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8000a10:	f000 f8a2 	bl	8000b58 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8000a14:	f00b f8c0 	bl	800bb98 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000a18:	4807      	ldr	r0, [pc, #28]	; (8000a38 <SystemApp_Init+0x3c>)
 8000a1a:	f00b f959 	bl	800bcd0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000a1e:	2002      	movs	r0, #2
 8000a20:	f00b f964 	bl	800bcec <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8000a24:	f00a f8dc 	bl	800abe0 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000a28:	2101      	movs	r1, #1
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f00a f918 	bl	800ac60 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000007c 	.word	0x2000007c
 8000a38:	08000a49 	.word	0x08000a49

08000a3c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000a40:	f00a f93e 	bl	800acc0 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af02      	add	r7, sp, #8
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	4618      	mov	r0, r3
 8000a58:	f00a f9dc 	bl	800ae14 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a62:	9200      	str	r2, [sp, #0]
 8000a64:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <TimestampNow+0x3c>)
 8000a66:	2110      	movs	r1, #16
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f000 f81d 	bl	8000aa8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff fb82 	bl	8000178 <strlen>
 8000a74:	4603      	mov	r3, r0
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	0800c174 	.word	0x0800c174

08000a88 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f00a f8b6 	bl	800ac00 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f00a f8ae 	bl	800ac00 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000aa8:	b40c      	push	{r2, r3}
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b084      	sub	sp, #16
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000aba:	6839      	ldr	r1, [r7, #0]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	69ba      	ldr	r2, [r7, #24]
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f00a faf3 	bl	800b0ac <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ad0:	b002      	add	sp, #8
 8000ad2:	4770      	bx	lr

08000ad4 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_GetTick+0x24>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d002      	beq.n	8000b00 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000afa:	f000 f92d 	bl	8000d58 <TIMER_IF_GetTimerValue>
 8000afe:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2000007c 	.word	0x2000007c

08000b10 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f9a3 	bl	8000e66 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <LL_AHB2_GRP1_EnableClock>:
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8000b5e:	f000 fe25 	bl	80017ac <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000b62:	f000 fe29 	bl	80017b8 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8000b66:	f000 fe2d 	bl	80017c4 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8000b84:	2002      	movs	r0, #2
 8000b86:	f7ff ffcf 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	f7ff ffcc 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b94:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <DBG_Init+0x78>)
 8000b9c:	f001 fb40 	bl	8002220 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <DBG_Init+0x78>)
 8000bac:	f001 fb38 	bl	8002220 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb6:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <DBG_Init+0x78>)
 8000bb8:	f001 fd60 	bl	800267c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc2:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <DBG_Init+0x78>)
 8000bc4:	f001 fd5a 	bl	800267c <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000bc8:	bf00      	nop
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	48000400 	.word	0x48000400

08000bd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
	...

08000bf8 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <TIMER_IF_Init+0x5c>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	f083 0301 	eor.w	r3, r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d01b      	beq.n	8000c48 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <TIMER_IF_Init+0x60>)
 8000c12:	f04f 32ff 	mov.w	r2, #4294967295
 8000c16:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8000c18:	f7ff fd78 	bl	800070c <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8000c1c:	f000 f856 	bl	8000ccc <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c24:	480c      	ldr	r0, [pc, #48]	; (8000c58 <TIMER_IF_Init+0x60>)
 8000c26:	f003 fac9 	bl	80041bc <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <TIMER_IF_Init+0x60>)
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000c32:	4809      	ldr	r0, [pc, #36]	; (8000c58 <TIMER_IF_Init+0x60>)
 8000c34:	f003 fc00 	bl	8004438 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f000 f9d3 	bl	8000fe4 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8000c3e:	f000 f85f 	bl	8000d00 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <TIMER_IF_Init+0x5c>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8000c48:	79fb      	ldrb	r3, [r7, #7]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000007d 	.word	0x2000007d
 8000c58:	20000038 	.word	0x20000038

08000c5c <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08e      	sub	sp, #56	; 0x38
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	222c      	movs	r2, #44	; 0x2c
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f00b fa56 	bl	800c124 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8000c78:	f000 f828 	bl	8000ccc <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <TIMER_IF_StartTimer+0x68>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	4413      	add	r3, r2
 8000c84:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000c94:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c98:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <TIMER_IF_StartTimer+0x6c>)
 8000caa:	f003 f97b 	bl	8003fa4 <HAL_RTC_SetAlarm_IT>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8000cb4:	f7ff fcfc 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8000cb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3738      	adds	r7, #56	; 0x38
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000080 	.word	0x20000080
 8000cc8:	20000038 	.word	0x20000038

08000ccc <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <TIMER_IF_StopTimer+0x2c>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000cdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce0:	4806      	ldr	r0, [pc, #24]	; (8000cfc <TIMER_IF_StopTimer+0x30>)
 8000ce2:	f003 fa6b 	bl	80041bc <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <TIMER_IF_StopTimer+0x30>)
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cec:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8000cee:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40002800 	.word	0x40002800
 8000cfc:	20000038 	.word	0x20000038

08000d00 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8000d04:	f000 f98e 	bl	8001024 <GetTimerTicks>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4a03      	ldr	r2, [pc, #12]	; (8000d18 <TIMER_IF_SetTimerContext+0x18>)
 8000d0c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000d0e:	4b02      	ldr	r3, [pc, #8]	; (8000d18 <TIMER_IF_SetTimerContext+0x18>)
 8000d10:	681b      	ldr	r3, [r3, #0]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000080 	.word	0x20000080

08000d1c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000d20:	4b02      	ldr	r3, [pc, #8]	; (8000d2c <TIMER_IF_GetTimerContext+0x10>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	20000080 	.word	0x20000080

08000d30 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8000d3a:	f000 f973 	bl	8001024 <GetTimerTicks>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8000d48:	687b      	ldr	r3, [r7, #4]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000080 	.word	0x20000080

08000d58 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <TIMER_IF_GetTimerValue+0x24>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8000d6a:	f000 f95b 	bl	8001024 <GetTimerTicks>
 8000d6e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8000d70:	687b      	ldr	r3, [r7, #4]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000007d 	.word	0x2000007d

08000d80 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8000d8e:	687b      	ldr	r3, [r7, #4]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr

08000d9a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000d9a:	b5b0      	push	{r4, r5, r7, lr}
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000da2:	2100      	movs	r1, #0
 8000da4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	2000      	movs	r0, #0
 8000daa:	460a      	mov	r2, r1
 8000dac:	4603      	mov	r3, r0
 8000dae:	0d95      	lsrs	r5, r2, #22
 8000db0:	0294      	lsls	r4, r2, #10
 8000db2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000db6:	f04f 0300 	mov.w	r3, #0
 8000dba:	4620      	mov	r0, r4
 8000dbc:	4629      	mov	r1, r5
 8000dbe:	f7ff f9e3 	bl	8000188 <__aeabi_uldivmod>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bdb0      	pop	{r4, r5, r7, pc}

08000dd4 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000dd4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000dd8:	b085      	sub	sp, #20
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000dde:	2100      	movs	r1, #0
 8000de0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	2000      	movs	r0, #0
 8000de6:	460c      	mov	r4, r1
 8000de8:	4605      	mov	r5, r0
 8000dea:	4620      	mov	r0, r4
 8000dec:	4629      	mov	r1, r5
 8000dee:	f04f 0a00 	mov.w	sl, #0
 8000df2:	f04f 0b00 	mov.w	fp, #0
 8000df6:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8000dfa:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8000dfe:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8000e02:	4650      	mov	r0, sl
 8000e04:	4659      	mov	r1, fp
 8000e06:	1b02      	subs	r2, r0, r4
 8000e08:	eb61 0305 	sbc.w	r3, r1, r5
 8000e0c:	f04f 0000 	mov.w	r0, #0
 8000e10:	f04f 0100 	mov.w	r1, #0
 8000e14:	0099      	lsls	r1, r3, #2
 8000e16:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e1a:	0090      	lsls	r0, r2, #2
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	eb12 0804 	adds.w	r8, r2, r4
 8000e24:	eb43 0905 	adc.w	r9, r3, r5
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e3c:	4690      	mov	r8, r2
 8000e3e:	4699      	mov	r9, r3
 8000e40:	4640      	mov	r0, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	f04f 0200 	mov.w	r2, #0
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	0a82      	lsrs	r2, r0, #10
 8000e4e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000e52:	0a8b      	lsrs	r3, r1, #10
 8000e54:	4613      	mov	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8000e58:	68fb      	ldr	r3, [r7, #12]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000e64:	4770      	bx	lr

08000e66 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ff93 	bl	8000d9a <TIMER_IF_Convert_ms2Tick>
 8000e74:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8000e76:	f000 f8d5 	bl	8001024 <GetTimerTicks>
 8000e7a:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000e7c:	e000      	b.n	8000e80 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8000e7e:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000e80:	f000 f8d0 	bl	8001024 <GetTimerTicks>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f6      	bhi.n	8000e7e <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8000ea2:	f00a fd37 	bl	800b914 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b084      	sub	sp, #16
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8000eb6:	f000 f8a5 	bl	8001004 <TIMER_IF_BkUp_Read_MSBticks>
 8000eba:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 f88f 	bl	8000fe4 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8000ece:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ed2:	b08c      	sub	sp, #48	; 0x30
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8000edc:	f000 f8a2 	bl	8001024 <GetTimerTicks>
 8000ee0:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8000ee2:	f000 f88f 	bl	8001004 <TIMER_IF_BkUp_Read_MSBticks>
 8000ee6:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eea:	2200      	movs	r2, #0
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	60fa      	str	r2, [r7, #12]
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	f04f 0300 	mov.w	r3, #0
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	000b      	movs	r3, r1
 8000efc:	2200      	movs	r2, #0
 8000efe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f00:	2000      	movs	r0, #0
 8000f02:	460c      	mov	r4, r1
 8000f04:	4605      	mov	r5, r0
 8000f06:	eb12 0804 	adds.w	r8, r2, r4
 8000f0a:	eb43 0905 	adc.w	r9, r3, r5
 8000f0e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8000f12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	f04f 0300 	mov.w	r3, #0
 8000f1e:	0a82      	lsrs	r2, r0, #10
 8000f20:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000f24:	0a8b      	lsrs	r3, r1, #10
 8000f26:	4613      	mov	r3, r2
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8000f38:	f04f 0b00 	mov.w	fp, #0
 8000f3c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff46 	bl	8000dd4 <TIMER_IF_Convert_Tick2ms>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8000f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3730      	adds	r7, #48	; 0x30
 8000f56:	46bd      	mov	sp, r7
 8000f58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000f5c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	2100      	movs	r1, #0
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8000f6a:	f003 faf7 	bl	800455c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000038 	.word	0x20000038

08000f7c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	2101      	movs	r1, #1
 8000f88:	4803      	ldr	r0, [pc, #12]	; (8000f98 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8000f8a:	f003 fae7 	bl	800455c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000038 	.word	0x20000038

08000f9c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8000faa:	f003 faef 	bl	800458c <HAL_RTCEx_BKUPRead>
 8000fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8000fb0:	687b      	ldr	r3, [r7, #4]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000038 	.word	0x20000038

08000fc0 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8000fca:	2101      	movs	r1, #1
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8000fce:	f003 fadd 	bl	800458c <HAL_RTCEx_BKUPRead>
 8000fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8000fd4:	687b      	ldr	r3, [r7, #4]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000038 	.word	0x20000038

08000fe4 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	2102      	movs	r1, #2
 8000ff0:	4803      	ldr	r0, [pc, #12]	; (8001000 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8000ff2:	f003 fab3 	bl	800455c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000038 	.word	0x20000038

08001004 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800100a:	2102      	movs	r1, #2
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800100e:	f003 fabd 	bl	800458c <HAL_RTCEx_BKUPRead>
 8001012:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001014:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000038 	.word	0x20000038

08001024 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800102a:	480b      	ldr	r0, [pc, #44]	; (8001058 <GetTimerTicks+0x34>)
 800102c:	f7ff fdd8 	bl	8000be0 <LL_RTC_TIME_GetSubSecond>
 8001030:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001032:	e003      	b.n	800103c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001034:	4808      	ldr	r0, [pc, #32]	; (8001058 <GetTimerTicks+0x34>)
 8001036:	f7ff fdd3 	bl	8000be0 <LL_RTC_TIME_GetSubSecond>
 800103a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800103c:	4806      	ldr	r0, [pc, #24]	; (8001058 <GetTimerTicks+0x34>)
 800103e:	f7ff fdcf 	bl	8000be0 <LL_RTC_TIME_GetSubSecond>
 8001042:	4602      	mov	r2, r0
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4293      	cmp	r3, r2
 8001048:	d1f4      	bne.n	8001034 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40002800 	.word	0x40002800

0800105c <LL_AHB2_GRP1_EnableClock>:
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001068:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800106a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4313      	orrs	r3, r2
 8001072:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001078:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4013      	ands	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001080:	68fb      	ldr	r3, [r7, #12]
}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <LL_APB1_GRP1_EnableClock>:
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001098:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800109a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80010a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010b0:	68fb      	ldr	r3, [r7, #12]
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <LL_APB1_GRP1_DisableClock>:
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80010c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010d2:	4013      	ands	r3, r2
 80010d4:	658b      	str	r3, [r1, #88]	; 0x58
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010e4:	4b22      	ldr	r3, [pc, #136]	; (8001170 <MX_USART2_UART_Init+0x90>)
 80010e6:	4a23      	ldr	r2, [pc, #140]	; (8001174 <MX_USART2_UART_Init+0x94>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <MX_USART2_UART_Init+0x90>)
 80010ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <MX_USART2_UART_Init+0x90>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_USART2_UART_Init+0x90>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <MX_USART2_UART_Init+0x90>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_USART2_UART_Init+0x90>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <MX_USART2_UART_Init+0x90>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_USART2_UART_Init+0x90>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <MX_USART2_UART_Init+0x90>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_USART2_UART_Init+0x90>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <MX_USART2_UART_Init+0x90>)
 8001124:	2200      	movs	r2, #0
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001128:	4811      	ldr	r0, [pc, #68]	; (8001170 <MX_USART2_UART_Init+0x90>)
 800112a:	f003 ff1a 	bl	8004f62 <HAL_UART_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001134:	f7ff fabc 	bl	80006b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001138:	2100      	movs	r1, #0
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <MX_USART2_UART_Init+0x90>)
 800113c:	f005 ff91 	bl	8007062 <HAL_UARTEx_SetTxFifoThreshold>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001146:	f7ff fab3 	bl	80006b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800114a:	2100      	movs	r1, #0
 800114c:	4808      	ldr	r0, [pc, #32]	; (8001170 <MX_USART2_UART_Init+0x90>)
 800114e:	f005 ffc6 	bl	80070de <HAL_UARTEx_SetRxFifoThreshold>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001158:	f7ff faaa 	bl	80006b0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_USART2_UART_Init+0x90>)
 800115e:	f005 ff45 	bl	8006fec <HAL_UARTEx_EnableFifoMode>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001168:	f7ff faa2 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000084 	.word	0x20000084
 8001174:	40004400 	.word	0x40004400

08001178 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b096      	sub	sp, #88	; 0x58
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2238      	movs	r2, #56	; 0x38
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f00a ffc3 	bl	800c124 <memset>
  if(uartHandle->Instance==USART2)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a33      	ldr	r2, [pc, #204]	; (8001270 <HAL_UART_MspInit+0xf8>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d15f      	bne.n	8001268 <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80011ac:	4b31      	ldr	r3, [pc, #196]	; (8001274 <HAL_UART_MspInit+0xfc>)
 80011ae:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4618      	mov	r0, r3
 80011b6:	f002 fd61 	bl	8003c7c <HAL_RCCEx_PeriphCLKConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011c0:	f7ff fa76 	bl	80006b0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80011c8:	f7ff ff60 	bl	800108c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011cc:	2001      	movs	r0, #1
 80011ce:	f7ff ff45 	bl	800105c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80011d2:	230c      	movs	r3, #12
 80011d4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011e2:	2307      	movs	r3, #7
 80011e4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011ea:	4619      	mov	r1, r3
 80011ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f0:	f001 f816 	bl	8002220 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel5;
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <HAL_UART_MspInit+0x100>)
 80011f6:	4a21      	ldr	r2, [pc, #132]	; (800127c <HAL_UART_MspInit+0x104>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <HAL_UART_MspInit+0x100>)
 80011fc:	2214      	movs	r2, #20
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <HAL_UART_MspInit+0x100>)
 8001202:	2210      	movs	r2, #16
 8001204:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <HAL_UART_MspInit+0x100>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <HAL_UART_MspInit+0x100>)
 800120e:	2280      	movs	r2, #128	; 0x80
 8001210:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_UART_MspInit+0x100>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_UART_MspInit+0x100>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <HAL_UART_MspInit+0x100>)
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <HAL_UART_MspInit+0x100>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800122a:	4813      	ldr	r0, [pc, #76]	; (8001278 <HAL_UART_MspInit+0x100>)
 800122c:	f000 fbe0 	bl	80019f0 <HAL_DMA_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8001236:	f7ff fa3b 	bl	80006b0 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800123a:	2110      	movs	r1, #16
 800123c:	480e      	ldr	r0, [pc, #56]	; (8001278 <HAL_UART_MspInit+0x100>)
 800123e:	f000 ff17 	bl	8002070 <HAL_DMA_ConfigChannelAttributes>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 8001248:	f7ff fa32 	bl	80006b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <HAL_UART_MspInit+0x100>)
 8001250:	679a      	str	r2, [r3, #120]	; 0x78
 8001252:	4a09      	ldr	r2, [pc, #36]	; (8001278 <HAL_UART_MspInit+0x100>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2102      	movs	r1, #2
 800125c:	2025      	movs	r0, #37	; 0x25
 800125e:	f000 fb90 	bl	8001982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001262:	2025      	movs	r0, #37	; 0x25
 8001264:	f000 fba7 	bl	80019b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001268:	bf00      	nop
 800126a:	3758      	adds	r7, #88	; 0x58
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40004400 	.word	0x40004400
 8001274:	000c0004 	.word	0x000c0004
 8001278:	20000114 	.word	0x20000114
 800127c:	40020058 	.word	0x40020058

08001280 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <HAL_UART_MspDeInit+0x3c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d110      	bne.n	80012b4 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001292:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001296:	f7ff ff11 	bl	80010bc <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800129a:	210c      	movs	r1, #12
 800129c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a0:	f001 f91e 	bl	80024e0 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fc49 	bl	8001b40 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80012ae:	2025      	movs	r0, #37	; 0x25
 80012b0:	f000 fb8f 	bl	80019d2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40004400 	.word	0x40004400

080012c0 <LL_APB1_GRP1_ForceReset>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80012c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	638b      	str	r3, [r1, #56]	; 0x38
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <LL_APB1_GRP1_ReleaseReset>:
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80012ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012f8:	4013      	ands	r3, r2
 80012fa:	638b      	str	r3, [r1, #56]	; 0x38
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
	...

08001308 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <LL_EXTI_EnableIT_0_31+0x24>)
 8001312:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001316:	4905      	ldr	r1, [pc, #20]	; (800132c <LL_EXTI_EnableIT_0_31+0x24>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4313      	orrs	r3, r2
 800131c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	58000800 	.word	0x58000800

08001330 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <vcom_Init+0x28>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800133e:	f7ff f8bd 	bl	80004bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001342:	f7ff fecd 	bl	80010e0 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8001346:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800134a:	f7ff ffdd 	bl	8001308 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800134e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000178 	.word	0x20000178

0800135c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8001360:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001364:	f7ff ffac 	bl	80012c0 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8001368:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800136c:	f7ff ffb9 	bl	80012e2 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <vcom_DeInit+0x28>)
 8001372:	f7ff ff85 	bl	8001280 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001376:	200f      	movs	r0, #15
 8001378:	f000 fb2b 	bl	80019d2 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800137c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000084 	.word	0x20000084

08001388 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	461a      	mov	r2, r3
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	4804      	ldr	r0, [pc, #16]	; (80013ac <vcom_Trace_DMA+0x24>)
 800139c:	f003 fe88 	bl	80050b0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80013a0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000084 	.word	0x20000084

080013b0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80013b8:	4a19      	ldr	r2, [pc, #100]	; (8001420 <vcom_ReceiveInit+0x70>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80013be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013c2:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013cc:	4815      	ldr	r0, [pc, #84]	; (8001424 <vcom_ReceiveInit+0x74>)
 80013ce:	f005 fd80 	bl	8006ed2 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80013d2:	bf00      	nop
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <vcom_ReceiveInit+0x74>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e2:	d0f7      	beq.n	80013d4 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80013e4:	bf00      	nop
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <vcom_ReceiveInit+0x74>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013f4:	d1f7      	bne.n	80013e6 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <vcom_ReceiveInit+0x74>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <vcom_ReceiveInit+0x74>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001404:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001406:	4807      	ldr	r0, [pc, #28]	; (8001424 <vcom_ReceiveInit+0x74>)
 8001408:	f005 fdbe 	bl	8006f88 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 800140c:	2201      	movs	r2, #1
 800140e:	4906      	ldr	r1, [pc, #24]	; (8001428 <vcom_ReceiveInit+0x78>)
 8001410:	4804      	ldr	r0, [pc, #16]	; (8001424 <vcom_ReceiveInit+0x74>)
 8001412:	f003 fdf7 	bl	8005004 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8001416:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	2000017c 	.word	0x2000017c
 8001424:	20000084 	.word	0x20000084
 8001428:	20000174 	.word	0x20000174

0800142c <vcom_Resume>:

void vcom_Resume(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001430:	4808      	ldr	r0, [pc, #32]	; (8001454 <vcom_Resume+0x28>)
 8001432:	f003 fd96 	bl	8004f62 <HAL_UART_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <vcom_Resume+0x14>
  {
    Error_Handler();
 800143c:	f7ff f938 	bl	80006b0 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <vcom_Resume+0x2c>)
 8001442:	f000 fad5 	bl	80019f0 <HAL_DMA_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <vcom_Resume+0x24>
  {
    Error_Handler();
 800144c:	f7ff f930 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000084 	.word	0x20000084
 8001458:	20000114 	.word	0x20000114

0800145c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a05      	ldr	r2, [pc, #20]	; (8001480 <HAL_UART_TxCpltCallback+0x24>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d103      	bne.n	8001476 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_UART_TxCpltCallback+0x28>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2000      	movs	r0, #0
 8001474:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40004400 	.word	0x40004400
 8001484:	20000178 	.word	0x20000178

08001488 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <HAL_UART_RxCpltCallback+0x44>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d113      	bne.n	80014c2 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_UART_RxCpltCallback+0x48>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00a      	beq.n	80014b8 <HAL_UART_RxCpltCallback+0x30>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d105      	bne.n	80014b8 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_UART_RxCpltCallback+0x48>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2200      	movs	r2, #0
 80014b2:	2101      	movs	r1, #1
 80014b4:	4807      	ldr	r0, [pc, #28]	; (80014d4 <HAL_UART_RxCpltCallback+0x4c>)
 80014b6:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80014b8:	2201      	movs	r2, #1
 80014ba:	4906      	ldr	r1, [pc, #24]	; (80014d4 <HAL_UART_RxCpltCallback+0x4c>)
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f003 fda1 	bl	8005004 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40004400 	.word	0x40004400
 80014d0:	2000017c 	.word	0x2000017c
 80014d4:	20000174 	.word	0x20000174

080014d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014dc:	f7ff fb7a 	bl	8000bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <LoopForever+0x6>)
  ldr r1, =_edata
 80014e2:	490d      	ldr	r1, [pc, #52]	; (8001518 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e4:	4a0d      	ldr	r2, [pc, #52]	; (800151c <LoopForever+0xe>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e8:	e002      	b.n	80014f0 <LoopCopyDataInit>

080014ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ee:	3304      	adds	r3, #4

080014f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f4:	d3f9      	bcc.n	80014ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f8:	4c0a      	ldr	r4, [pc, #40]	; (8001524 <LoopForever+0x16>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014fc:	e001      	b.n	8001502 <LoopFillZerobss>

080014fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001500:	3204      	adds	r2, #4

08001502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001504:	d3fb      	bcc.n	80014fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001506:	f00a fddb 	bl	800c0c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800150a:	f7ff f86c 	bl	80005e6 <main>

0800150e <LoopForever>:

LoopForever:
    b LoopForever
 800150e:	e7fe      	b.n	800150e <LoopForever>
  ldr   r0, =_estack
 8001510:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001518:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800151c:	0800c6a4 	.word	0x0800c6a4
  ldr r2, =_sbss
 8001520:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001524:	200008a0 	.word	0x200008a0

08001528 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001528:	e7fe      	b.n	8001528 <ADC_IRQHandler>

0800152a <LL_AHB2_GRP1_EnableClock>:
{
 800152a:	b480      	push	{r7}
 800152c:	b085      	sub	sp, #20
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4313      	orrs	r3, r2
 8001540:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4013      	ands	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
	...

0800155c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001570:	2004      	movs	r0, #4
 8001572:	f7ff ffda 	bl	800152a <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001576:	2310      	movs	r3, #16
 8001578:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4812      	ldr	r0, [pc, #72]	; (80015d4 <BSP_RADIO_Init+0x78>)
 800158c:	f000 fe48 	bl	8002220 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001590:	2320      	movs	r3, #32
 8001592:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4619      	mov	r1, r3
 8001598:	480e      	ldr	r0, [pc, #56]	; (80015d4 <BSP_RADIO_Init+0x78>)
 800159a:	f000 fe41 	bl	8002220 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800159e:	2308      	movs	r3, #8
 80015a0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	480b      	ldr	r0, [pc, #44]	; (80015d4 <BSP_RADIO_Init+0x78>)
 80015a8:	f000 fe3a 	bl	8002220 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80015ac:	2200      	movs	r2, #0
 80015ae:	2120      	movs	r1, #32
 80015b0:	4808      	ldr	r0, [pc, #32]	; (80015d4 <BSP_RADIO_Init+0x78>)
 80015b2:	f001 f863 	bl	800267c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80015b6:	2200      	movs	r2, #0
 80015b8:	2110      	movs	r1, #16
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <BSP_RADIO_Init+0x78>)
 80015bc:	f001 f85e 	bl	800267c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80015c0:	2200      	movs	r2, #0
 80015c2:	2108      	movs	r1, #8
 80015c4:	4803      	ldr	r0, [pc, #12]	; (80015d4 <BSP_RADIO_Init+0x78>)
 80015c6:	f001 f859 	bl	800267c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	48000800 	.word	0x48000800

080015d8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d84b      	bhi.n	8001680 <BSP_RADIO_ConfigRFSwitch+0xa8>
 80015e8:	a201      	add	r2, pc, #4	; (adr r2, 80015f0 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80015ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ee:	bf00      	nop
 80015f0:	08001601 	.word	0x08001601
 80015f4:	08001621 	.word	0x08001621
 80015f8:	08001641 	.word	0x08001641
 80015fc:	08001661 	.word	0x08001661
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	2108      	movs	r1, #8
 8001604:	4821      	ldr	r0, [pc, #132]	; (800168c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001606:	f001 f839 	bl	800267c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	2110      	movs	r1, #16
 800160e:	481f      	ldr	r0, [pc, #124]	; (800168c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001610:	f001 f834 	bl	800267c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2120      	movs	r1, #32
 8001618:	481c      	ldr	r0, [pc, #112]	; (800168c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800161a:	f001 f82f 	bl	800267c <HAL_GPIO_WritePin>
      break;      
 800161e:	e030      	b.n	8001682 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	2108      	movs	r1, #8
 8001624:	4819      	ldr	r0, [pc, #100]	; (800168c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001626:	f001 f829 	bl	800267c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800162a:	2201      	movs	r2, #1
 800162c:	2110      	movs	r1, #16
 800162e:	4817      	ldr	r0, [pc, #92]	; (800168c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001630:	f001 f824 	bl	800267c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001634:	2200      	movs	r2, #0
 8001636:	2120      	movs	r1, #32
 8001638:	4814      	ldr	r0, [pc, #80]	; (800168c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800163a:	f001 f81f 	bl	800267c <HAL_GPIO_WritePin>
      break;
 800163e:	e020      	b.n	8001682 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	2108      	movs	r1, #8
 8001644:	4811      	ldr	r0, [pc, #68]	; (800168c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001646:	f001 f819 	bl	800267c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800164a:	2201      	movs	r2, #1
 800164c:	2110      	movs	r1, #16
 800164e:	480f      	ldr	r0, [pc, #60]	; (800168c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001650:	f001 f814 	bl	800267c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001654:	2201      	movs	r2, #1
 8001656:	2120      	movs	r1, #32
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800165a:	f001 f80f 	bl	800267c <HAL_GPIO_WritePin>
      break;
 800165e:	e010      	b.n	8001682 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	2108      	movs	r1, #8
 8001664:	4809      	ldr	r0, [pc, #36]	; (800168c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001666:	f001 f809 	bl	800267c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800166a:	2200      	movs	r2, #0
 800166c:	2110      	movs	r1, #16
 800166e:	4807      	ldr	r0, [pc, #28]	; (800168c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001670:	f001 f804 	bl	800267c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001674:	2201      	movs	r2, #1
 8001676:	2120      	movs	r1, #32
 8001678:	4804      	ldr	r0, [pc, #16]	; (800168c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800167a:	f000 ffff 	bl	800267c <HAL_GPIO_WritePin>
      break;
 800167e:	e000      	b.n	8001682 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8001680:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	48000800 	.word	0x48000800

08001690 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr

0800169e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80016b0:	2301      	movs	r3, #1
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b085      	sub	sp, #20
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80016ca:	230f      	movs	r3, #15
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	e001      	b.n	80016d4 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80016d0:	2316      	movs	r3, #22
 80016d2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80016d4:	68fb      	ldr	r3, [r7, #12]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4a03      	ldr	r2, [pc, #12]	; (80016f8 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80016ea:	f023 0301 	bic.w	r3, r3, #1
 80016ee:	6053      	str	r3, [r2, #4]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	e0042000 	.word	0xe0042000

080016fc <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4a03      	ldr	r2, [pc, #12]	; (8001714 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8001706:	f023 0302 	bic.w	r3, r3, #2
 800170a:	6053      	str	r3, [r2, #4]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	e0042000 	.word	0xe0042000

08001718 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	4a03      	ldr	r2, [pc, #12]	; (8001730 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8001722:	f023 0304 	bic.w	r3, r3, #4
 8001726:	6053      	str	r3, [r2, #4]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	e0042000 	.word	0xe0042000

08001734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173e:	2003      	movs	r0, #3
 8001740:	f000 f914 	bl	800196c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001744:	f002 f8bc 	bl	80038c0 <HAL_RCC_GetHCLKFreq>
 8001748:	4603      	mov	r3, r0
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <HAL_Init+0x3c>)
 800174c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800174e:	200f      	movs	r0, #15
 8001750:	f7ff f9c0 	bl	8000ad4 <HAL_InitTick>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	71fb      	strb	r3, [r7, #7]
 800175e:	e001      	b.n	8001764 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001760:	f7ff f89d 	bl	800089e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001764:	79fb      	ldrb	r3, [r7, #7]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000000 	.word	0x20000000

08001774 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <HAL_SuspendTick+0x18>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a03      	ldr	r2, [pc, #12]	; (800178c <HAL_SuspendTick+0x18>)
 800177e:	f023 0302 	bic.w	r3, r3, #2
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <HAL_ResumeTick+0x18>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a03      	ldr	r2, [pc, #12]	; (80017a8 <HAL_ResumeTick+0x18>)
 800179a:	f043 0302 	orr.w	r3, r3, #2
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	e000e010 	.word	0xe000e010

080017ac <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80017b0:	f7ff ff96 	bl	80016e0 <LL_DBGMCU_DisableDBGSleepMode>
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80017bc:	f7ff ff9e 	bl	80016fc <LL_DBGMCU_DisableDBGStopMode>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 80017c8:	f7ff ffa6 	bl	8001718 <LL_DBGMCU_DisableDBGStandbyMode>
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ec:	4013      	ands	r3, r2
 80017ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001802:	4a04      	ldr	r2, [pc, #16]	; (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	60d3      	str	r3, [r2, #12]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <__NVIC_GetPriorityGrouping+0x18>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	f003 0307 	and.w	r3, r3, #7
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	2b00      	cmp	r3, #0
 8001844:	db0b      	blt.n	800185e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	f003 021f 	and.w	r2, r3, #31
 800184c:	4906      	ldr	r1, [pc, #24]	; (8001868 <__NVIC_EnableIRQ+0x34>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	095b      	lsrs	r3, r3, #5
 8001854:	2001      	movs	r0, #1
 8001856:	fa00 f202 	lsl.w	r2, r0, r2
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	e000e100 	.word	0xe000e100

0800186c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	2b00      	cmp	r3, #0
 800187c:	db12      	blt.n	80018a4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	490a      	ldr	r1, [pc, #40]	; (80018b0 <__NVIC_DisableIRQ+0x44>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	2001      	movs	r0, #1
 800188e:	fa00 f202 	lsl.w	r2, r0, r2
 8001892:	3320      	adds	r3, #32
 8001894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001898:	f3bf 8f4f 	dsb	sy
}
 800189c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189e:	f3bf 8f6f 	isb	sy
}
 80018a2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff2b 	bl	80017d0 <__NVIC_SetPriorityGrouping>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001990:	f7ff ff42 	bl	8001818 <__NVIC_GetPriorityGrouping>
 8001994:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	6978      	ldr	r0, [r7, #20]
 800199c:	f7ff ffb4 	bl	8001908 <NVIC_EncodePriority>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff83 	bl	80018b4 <__NVIC_SetPriority>
}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff35 	bl	8001834 <__NVIC_EnableIRQ>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80019dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff43 	bl	800186c <__NVIC_DisableIRQ>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e08e      	b.n	8001b20 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <HAL_DMA_Init+0x138>)
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d80f      	bhi.n	8001a2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b45      	ldr	r3, [pc, #276]	; (8001b2c <HAL_DMA_Init+0x13c>)
 8001a16:	4413      	add	r3, r2
 8001a18:	4a45      	ldr	r2, [pc, #276]	; (8001b30 <HAL_DMA_Init+0x140>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	009a      	lsls	r2, r3, #2
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a42      	ldr	r2, [pc, #264]	; (8001b34 <HAL_DMA_Init+0x144>)
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a2c:	e00e      	b.n	8001a4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <HAL_DMA_Init+0x148>)
 8001a36:	4413      	add	r3, r2
 8001a38:	4a3d      	ldr	r2, [pc, #244]	; (8001b30 <HAL_DMA_Init+0x140>)
 8001a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3e:	091b      	lsrs	r3, r3, #4
 8001a40:	009a      	lsls	r2, r3, #2
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a3c      	ldr	r2, [pc, #240]	; (8001b3c <HAL_DMA_Init+0x14c>)
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a66:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6819      	ldr	r1, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fb52 	bl	8002148 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aac:	d102      	bne.n	8001ab4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001abc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ac0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001aca:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d010      	beq.n	8001af6 <HAL_DMA_Init+0x106>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d80c      	bhi.n	8001af6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fb7b 	bl	80021d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	e008      	b.n	8001b08 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40020407 	.word	0x40020407
 8001b2c:	bffdfff8 	.word	0xbffdfff8
 8001b30:	cccccccd 	.word	0xcccccccd
 8001b34:	40020000 	.word	0x40020000
 8001b38:	bffdfbf8 	.word	0xbffdfbf8
 8001b3c:	40020400 	.word	0x40020400

08001b40 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e07b      	b.n	8001c4a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0201 	bic.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b3a      	ldr	r3, [pc, #232]	; (8001c54 <HAL_DMA_DeInit+0x114>)
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d80f      	bhi.n	8001b8e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_DMA_DeInit+0x118>)
 8001b76:	4413      	add	r3, r2
 8001b78:	4a38      	ldr	r2, [pc, #224]	; (8001c5c <HAL_DMA_DeInit+0x11c>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	009a      	lsls	r2, r3, #2
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a35      	ldr	r2, [pc, #212]	; (8001c60 <HAL_DMA_DeInit+0x120>)
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b8c:	e00e      	b.n	8001bac <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b33      	ldr	r3, [pc, #204]	; (8001c64 <HAL_DMA_DeInit+0x124>)
 8001b96:	4413      	add	r3, r2
 8001b98:	4a30      	ldr	r2, [pc, #192]	; (8001c5c <HAL_DMA_DeInit+0x11c>)
 8001b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	009a      	lsls	r2, r3, #2
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a2f      	ldr	r2, [pc, #188]	; (8001c68 <HAL_DMA_DeInit+0x128>)
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb8:	f003 021c 	and.w	r2, r3, #28
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 fabd 	bl	8002148 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bde:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00f      	beq.n	8001c08 <HAL_DMA_DeInit+0xc8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d80b      	bhi.n	8001c08 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 faf1 	bl	80021d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c06:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40020407 	.word	0x40020407
 8001c58:	bffdfff8 	.word	0xbffdfff8
 8001c5c:	cccccccd 	.word	0xcccccccd
 8001c60:	40020000 	.word	0x40020000
 8001c64:	bffdfbf8 	.word	0xbffdfbf8
 8001c68:	40020400 	.word	0x40020400

08001c6c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_DMA_Start_IT+0x20>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e069      	b.n	8001d60 <HAL_DMA_Start_IT+0xf4>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d155      	bne.n	8001d4c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 fa02 	bl	80020ce <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d008      	beq.n	8001ce4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 020e 	orr.w	r2, r2, #14
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	e00f      	b.n	8001d04 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0204 	bic.w	r2, r2, #4
 8001cf2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 020a 	orr.w	r2, r2, #10
 8001d02:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d007      	beq.n	8001d22 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d20:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d007      	beq.n	8001d3a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d38:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0201 	orr.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	e008      	b.n	8001d5e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e04f      	b.n	8001e1a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d008      	beq.n	8001d98 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2204      	movs	r2, #4
 8001d8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e040      	b.n	8001e1a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 020e 	bic.w	r2, r2, #14
 8001da6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dcc:	f003 021c 	and.w	r2, r3, #28
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dda:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001de4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00c      	beq.n	8001e08 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dfc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e06:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d005      	beq.n	8001e48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2204      	movs	r2, #4
 8001e40:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	73fb      	strb	r3, [r7, #15]
 8001e46:	e047      	b.n	8001ed8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 020e 	bic.w	r2, r2, #14
 8001e56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	f003 021c 	and.w	r2, r3, #28
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	2101      	movs	r1, #1
 8001e86:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e94:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001eb6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4798      	blx	r3
    }
  }
  return status;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f00:	f003 031c 	and.w	r3, r3, #28
 8001f04:	2204      	movs	r2, #4
 8001f06:	409a      	lsls	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d027      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x7c>
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d022      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0320 	and.w	r3, r3, #32
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d107      	bne.n	8001f38 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0204 	bic.w	r2, r2, #4
 8001f36:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	f003 021c 	and.w	r2, r3, #28
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	2104      	movs	r1, #4
 8001f46:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 8081 	beq.w	8002058 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001f5e:	e07b      	b.n	8002058 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f64:	f003 031c 	and.w	r3, r3, #28
 8001f68:	2202      	movs	r2, #2
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d03d      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x10c>
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d038      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10b      	bne.n	8001fa4 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 020a 	bic.w	r2, r2, #10
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <HAL_DMA_IRQHandler+0x180>)
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d909      	bls.n	8001fc4 <HAL_DMA_IRQHandler+0xe0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb4:	f003 031c 	and.w	r3, r3, #28
 8001fb8:	4a2b      	ldr	r2, [pc, #172]	; (8002068 <HAL_DMA_IRQHandler+0x184>)
 8001fba:	2102      	movs	r1, #2
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	6053      	str	r3, [r2, #4]
 8001fc2:	e008      	b.n	8001fd6 <HAL_DMA_IRQHandler+0xf2>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	f003 031c 	and.w	r3, r3, #28
 8001fcc:	4a27      	ldr	r2, [pc, #156]	; (800206c <HAL_DMA_IRQHandler+0x188>)
 8001fce:	2102      	movs	r1, #2
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d038      	beq.n	8002058 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001fee:	e033      	b.n	8002058 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	f003 031c 	and.w	r3, r3, #28
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d02a      	beq.n	800205a <HAL_DMA_IRQHandler+0x176>
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d025      	beq.n	800205a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 020e 	bic.w	r2, r2, #14
 800201c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f003 021c 	and.w	r2, r3, #28
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	2101      	movs	r1, #1
 800202c:	fa01 f202 	lsl.w	r2, r1, r2
 8002030:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204c:	2b00      	cmp	r3, #0
 800204e:	d004      	beq.n	800205a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002058:	bf00      	nop
 800205a:	bf00      	nop
}
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40020080 	.word	0x40020080
 8002068:	40020400 	.word	0x40020400
 800206c:	40020000 	.word	0x40020000

08002070 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d103      	bne.n	800208c <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	72fb      	strb	r3, [r7, #11]
    return status;
 8002088:	7afb      	ldrb	r3, [r7, #11]
 800208a:	e01b      	b.n	80020c4 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00d      	beq.n	80020ba <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d004      	beq.n	80020b2 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	e003      	b.n	80020ba <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020b8:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	601a      	str	r2, [r3, #0]

  return status;
 80020c2:	7afb      	ldrb	r3, [r7, #11]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr

080020ce <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b085      	sub	sp, #20
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020e4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d004      	beq.n	80020f8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020f6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	f003 021c 	and.w	r2, r3, #28
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	2101      	movs	r1, #1
 8002106:	fa01 f202 	lsl.w	r2, r1, r2
 800210a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b10      	cmp	r3, #16
 800211a:	d108      	bne.n	800212e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800212c:	e007      	b.n	800213e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	60da      	str	r2, [r3, #12]
}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8002158:	429a      	cmp	r2, r3
 800215a:	d813      	bhi.n	8002184 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002168:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	3b08      	subs	r3, #8
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e011      	b.n	80021a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	009a      	lsls	r2, r3, #2
 800218c:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800218e:	4413      	add	r3, r2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	3b08      	subs	r3, #8
 800219c:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	3307      	adds	r3, #7
 80021a6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80021ac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	2201      	movs	r2, #1
 80021b6:	409a      	lsls	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	651a      	str	r2, [r3, #80]	; 0x50
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40020407 	.word	0x40020407
 80021cc:	cccccccd 	.word	0xcccccccd
 80021d0:	4002081c 	.word	0x4002081c
 80021d4:	40020880 	.word	0x40020880

080021d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021e8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	461a      	mov	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a08      	ldr	r2, [pc, #32]	; (800221c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80021fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	3b01      	subs	r3, #1
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2201      	movs	r2, #1
 8002208:	409a      	lsls	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	1000823f 	.word	0x1000823f
 800221c:	40020940 	.word	0x40020940

08002220 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222e:	e140      	b.n	80024b2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	2101      	movs	r1, #1
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	4013      	ands	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8132 	beq.w	80024ac <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b01      	cmp	r3, #1
 8002252:	d005      	beq.n	8002260 <HAL_GPIO_Init+0x40>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d130      	bne.n	80022c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002296:	2201      	movs	r2, #1
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	f003 0201 	and.w	r2, r3, #1
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d017      	beq.n	80022fe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	2203      	movs	r2, #3
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4013      	ands	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d123      	bne.n	8002352 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	08da      	lsrs	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3208      	adds	r2, #8
 8002312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002316:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	220f      	movs	r2, #15
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	08da      	lsrs	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3208      	adds	r2, #8
 800234c:	6939      	ldr	r1, [r7, #16]
 800234e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0203 	and.w	r2, r3, #3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 808c 	beq.w	80024ac <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002394:	4a4e      	ldr	r2, [pc, #312]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	3302      	adds	r3, #2
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	2207      	movs	r2, #7
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023be:	d00d      	beq.n	80023dc <HAL_GPIO_Init+0x1bc>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a44      	ldr	r2, [pc, #272]	; (80024d4 <HAL_GPIO_Init+0x2b4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d007      	beq.n	80023d8 <HAL_GPIO_Init+0x1b8>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a43      	ldr	r2, [pc, #268]	; (80024d8 <HAL_GPIO_Init+0x2b8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d101      	bne.n	80023d4 <HAL_GPIO_Init+0x1b4>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e004      	b.n	80023de <HAL_GPIO_Init+0x1be>
 80023d4:	2307      	movs	r3, #7
 80023d6:	e002      	b.n	80023de <HAL_GPIO_Init+0x1be>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_GPIO_Init+0x1be>
 80023dc:	2300      	movs	r3, #0
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	f002 0203 	and.w	r2, r2, #3
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	4093      	lsls	r3, r2
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023ee:	4938      	ldr	r1, [pc, #224]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	3302      	adds	r3, #2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023fc:	4b37      	ldr	r3, [pc, #220]	; (80024dc <HAL_GPIO_Init+0x2bc>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	43db      	mvns	r3, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002420:	4a2e      	ldr	r2, [pc, #184]	; (80024dc <HAL_GPIO_Init+0x2bc>)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002426:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <HAL_GPIO_Init+0x2bc>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	43db      	mvns	r3, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800244a:	4a24      	ldr	r2, [pc, #144]	; (80024dc <HAL_GPIO_Init+0x2bc>)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002450:	4b22      	ldr	r3, [pc, #136]	; (80024dc <HAL_GPIO_Init+0x2bc>)
 8002452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002456:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002476:	4a19      	ldr	r2, [pc, #100]	; (80024dc <HAL_GPIO_Init+0x2bc>)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800247e:	4b17      	ldr	r3, [pc, #92]	; (80024dc <HAL_GPIO_Init+0x2bc>)
 8002480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002484:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80024a4:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <HAL_GPIO_Init+0x2bc>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3301      	adds	r3, #1
 80024b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f47f aeb7 	bne.w	8002230 <HAL_GPIO_Init+0x10>
  }
}
 80024c2:	bf00      	nop
 80024c4:	bf00      	nop
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40010000 	.word	0x40010000
 80024d4:	48000400 	.word	0x48000400
 80024d8:	48000800 	.word	0x48000800
 80024dc:	58000800 	.word	0x58000800

080024e0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80024ee:	e0af      	b.n	8002650 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80024f0:	2201      	movs	r2, #1
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80a2 	beq.w	800264a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002506:	4a59      	ldr	r2, [pc, #356]	; (800266c <HAL_GPIO_DeInit+0x18c>)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	2207      	movs	r2, #7
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4013      	ands	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800252e:	d00d      	beq.n	800254c <HAL_GPIO_DeInit+0x6c>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a4f      	ldr	r2, [pc, #316]	; (8002670 <HAL_GPIO_DeInit+0x190>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d007      	beq.n	8002548 <HAL_GPIO_DeInit+0x68>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a4e      	ldr	r2, [pc, #312]	; (8002674 <HAL_GPIO_DeInit+0x194>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d101      	bne.n	8002544 <HAL_GPIO_DeInit+0x64>
 8002540:	2302      	movs	r3, #2
 8002542:	e004      	b.n	800254e <HAL_GPIO_DeInit+0x6e>
 8002544:	2307      	movs	r3, #7
 8002546:	e002      	b.n	800254e <HAL_GPIO_DeInit+0x6e>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_GPIO_DeInit+0x6e>
 800254c:	2300      	movs	r3, #0
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	f002 0203 	and.w	r2, r2, #3
 8002554:	0092      	lsls	r2, r2, #2
 8002556:	4093      	lsls	r3, r2
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	429a      	cmp	r2, r3
 800255c:	d136      	bne.n	80025cc <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800255e:	4b46      	ldr	r3, [pc, #280]	; (8002678 <HAL_GPIO_DeInit+0x198>)
 8002560:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	43db      	mvns	r3, r3
 8002568:	4943      	ldr	r1, [pc, #268]	; (8002678 <HAL_GPIO_DeInit+0x198>)
 800256a:	4013      	ands	r3, r2
 800256c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002570:	4b41      	ldr	r3, [pc, #260]	; (8002678 <HAL_GPIO_DeInit+0x198>)
 8002572:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	493f      	ldr	r1, [pc, #252]	; (8002678 <HAL_GPIO_DeInit+0x198>)
 800257c:	4013      	ands	r3, r2
 800257e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002582:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <HAL_GPIO_DeInit+0x198>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	493b      	ldr	r1, [pc, #236]	; (8002678 <HAL_GPIO_DeInit+0x198>)
 800258c:	4013      	ands	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002590:	4b39      	ldr	r3, [pc, #228]	; (8002678 <HAL_GPIO_DeInit+0x198>)
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	43db      	mvns	r3, r3
 8002598:	4937      	ldr	r1, [pc, #220]	; (8002678 <HAL_GPIO_DeInit+0x198>)
 800259a:	4013      	ands	r3, r2
 800259c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	2207      	movs	r2, #7
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80025ae:	4a2f      	ldr	r2, [pc, #188]	; (800266c <HAL_GPIO_DeInit+0x18c>)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	3302      	adds	r3, #2
 80025b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	43da      	mvns	r2, r3
 80025be:	482b      	ldr	r0, [pc, #172]	; (800266c <HAL_GPIO_DeInit+0x18c>)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	400a      	ands	r2, r1
 80025c6:	3302      	adds	r3, #2
 80025c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	2103      	movs	r1, #3
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	08da      	lsrs	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3208      	adds	r2, #8
 80025e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	220f      	movs	r2, #15
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	08d2      	lsrs	r2, r2, #3
 8002600:	4019      	ands	r1, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3208      	adds	r2, #8
 8002606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	2103      	movs	r1, #3
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	401a      	ands	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	2101      	movs	r1, #1
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	401a      	ands	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	2103      	movs	r1, #3
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	401a      	ands	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60da      	str	r2, [r3, #12]
    }

    position++;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3301      	adds	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	fa22 f303 	lsr.w	r3, r2, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	f47f af49 	bne.w	80024f0 <HAL_GPIO_DeInit+0x10>
  }
}
 800265e:	bf00      	nop
 8002660:	bf00      	nop
 8002662:	371c      	adds	r7, #28
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40010000 	.word	0x40010000
 8002670:	48000400 	.word	0x48000400
 8002674:	48000800 	.word	0x48000800
 8002678:	58000800 	.word	0x58000800

0800267c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
 8002688:	4613      	mov	r3, r2
 800268a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800268c:	787b      	ldrb	r3, [r7, #1]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002698:	e002      	b.n	80026a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr

080026aa <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b085      	sub	sp, #20
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	460b      	mov	r3, r1
 80026b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026bc:	887a      	ldrh	r2, [r7, #2]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4013      	ands	r3, r2
 80026c2:	041a      	lsls	r2, r3, #16
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	887b      	ldrh	r3, [r7, #2]
 80026ca:	400b      	ands	r3, r1
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	619a      	str	r2, [r3, #24]
}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a03      	ldr	r2, [pc, #12]	; (80026f4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80026e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ea:	6013      	str	r3, [r2, #0]
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	58000400 	.word	0x58000400

080026f8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10c      	bne.n	8002724 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800270a:	4b13      	ldr	r3, [pc, #76]	; (8002758 <HAL_PWR_EnterSLEEPMode+0x60>)
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002716:	d10d      	bne.n	8002734 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8002718:	f000 f83c 	bl	8002794 <HAL_PWREx_DisableLowPowerRunMode>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d008      	beq.n	8002734 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8002722:	e015      	b.n	8002750 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_PWR_EnterSLEEPMode+0x60>)
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8002730:	f000 f822 	bl	8002778 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_PWR_EnterSLEEPMode+0x64>)
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	4a08      	ldr	r2, [pc, #32]	; (800275c <HAL_PWR_EnterSLEEPMode+0x64>)
 800273a:	f023 0304 	bic.w	r3, r3, #4
 800273e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002746:	bf30      	wfi
 8002748:	e002      	b.n	8002750 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800274a:	bf40      	sev
    __WFE();
 800274c:	bf20      	wfe
    __WFE();
 800274e:	bf20      	wfe
  }
}
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	58000400 	.word	0x58000400
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <HAL_PWREx_GetVoltageRange+0x14>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	58000400 	.word	0x58000400

08002778 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800277c:	4b04      	ldr	r3, [pc, #16]	; (8002790 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a03      	ldr	r2, [pc, #12]	; (8002790 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002786:	6013      	str	r3, [r2, #0]
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	58000400 	.word	0x58000400

08002794 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800279a:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a15      	ldr	r2, [pc, #84]	; (80027f4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80027a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027a4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80027a6:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2232      	movs	r2, #50	; 0x32
 80027ac:	fb02 f303 	mul.w	r3, r2, r3
 80027b0:	4a12      	ldr	r2, [pc, #72]	; (80027fc <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0c9b      	lsrs	r3, r3, #18
 80027b8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80027ba:	e002      	b.n	80027c2 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ce:	d102      	bne.n	80027d6 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f2      	bne.n	80027bc <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80027d6:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e2:	d101      	bne.n	80027e8 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e000      	b.n	80027ea <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	58000400 	.word	0x58000400
 80027f8:	20000000 	.word	0x20000000
 80027fc:	431bde83 	.word	0x431bde83

08002800 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 0307 	bic.w	r3, r3, #7
 8002812:	4a0e      	ldr	r2, [pc, #56]	; (800284c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800281a:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	4a0c      	ldr	r2, [pc, #48]	; (8002850 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800282c:	bf30      	wfi
 800282e:	e002      	b.n	8002836 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002830:	bf40      	sev
    __WFE();
 8002832:	bf20      	wfe
    __WFE();
 8002834:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	4a05      	ldr	r2, [pc, #20]	; (8002850 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800283c:	f023 0304 	bic.w	r3, r3, #4
 8002840:	6113      	str	r3, [r2, #16]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	58000400 	.word	0x58000400
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002864:	d101      	bne.n	800286a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	58000400 	.word	0x58000400

08002878 <LL_RCC_HSE_EnableTcxo>:
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800287c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002886:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800288a:	6013      	str	r3, [r2, #0]
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <LL_RCC_HSE_DisableTcxo>:
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80028b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028c2:	d101      	bne.n	80028c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <LL_RCC_HSE_Enable>:
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80028d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <LL_RCC_HSE_Disable>:
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002900:	6013      	str	r3, [r2, #0]
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <LL_RCC_HSE_IsReady>:
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800291c:	d101      	bne.n	8002922 <LL_RCC_HSE_IsReady+0x18>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <LL_RCC_HSE_IsReady+0x1a>
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <LL_RCC_HSI_Enable>:
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800293a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293e:	6013      	str	r3, [r2, #0]
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <LL_RCC_HSI_Disable>:
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002956:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800295a:	6013      	str	r3, [r2, #0]
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <LL_RCC_HSI_IsReady>:
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002976:	d101      	bne.n	800297c <LL_RCC_HSI_IsReady+0x18>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <LL_RCC_HSI_IsReady+0x1a>
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800298e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	061b      	lsls	r3, r3, #24
 800299c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <LL_RCC_LSE_IsReady>:
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80029b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d101      	bne.n	80029c6 <LL_RCC_LSE_IsReady+0x18>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <LL_RCC_LSE_IsReady+0x1a>
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <LL_RCC_LSI_Enable>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <LL_RCC_LSI_Disable>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80029f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <LL_RCC_LSI_IsReady>:
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d101      	bne.n	8002a28 <LL_RCC_LSI_IsReady+0x18>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <LL_RCC_LSI_IsReady+0x1a>
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr

08002a32 <LL_RCC_MSI_Enable>:
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6013      	str	r3, [r2, #0]
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <LL_RCC_MSI_Disable>:
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6013      	str	r3, [r2, #0]
}
 8002a62:	bf00      	nop
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <LL_RCC_MSI_IsReady>:
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d101      	bne.n	8002a80 <LL_RCC_MSI_IsReady+0x16>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <LL_RCC_MSI_IsReady+0x18>
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr

08002a8a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d101      	bne.n	8002aa0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <LL_RCC_MSI_GetRange>:
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002acc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002af2:	4313      	orrs	r3, r2
 8002af4:	604b      	str	r3, [r1, #4]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <LL_RCC_SetSysClkSource>:
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f023 0203 	bic.w	r2, r3, #3
 8002b12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <LL_RCC_GetSysClkSource>:
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 030c 	and.w	r3, r3, #12
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <LL_RCC_SetAHBPrescaler>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	608b      	str	r3, [r1, #8]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <LL_RCC_SetAHB3Prescaler>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b98:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b9c:	f023 020f 	bic.w	r2, r3, #15
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <LL_RCC_SetAPB1Prescaler>:
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <LL_RCC_SetAPB2Prescaler>:
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <LL_RCC_GetAHBPrescaler>:
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <LL_RCC_GetAHB3Prescaler>:
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <LL_RCC_GetAPB1Prescaler>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <LL_RCC_GetAPB2Prescaler>:
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c72:	6013      	str	r3, [r2, #0]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c8e:	6013      	str	r3, [r2, #0]
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002caa:	d101      	bne.n	8002cb0 <LL_RCC_PLL_IsReady+0x18>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <LL_RCC_PLL_IsReady+0x1a>
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	0a1b      	lsrs	r3, r3, #8
 8002cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr

08002cd2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0303 	and.w	r3, r3, #3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d26:	d101      	bne.n	8002d2c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d4a:	d101      	bne.n	8002d50 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6e:	d101      	bne.n	8002d74 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d90:	d101      	bne.n	8002d96 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002db2:	d101      	bne.n	8002db8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e38b      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd6:	f7ff fea6 	bl	8002b26 <LL_RCC_GetSysClkSource>
 8002dda:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ddc:	f7ff ff8f 	bl	8002cfe <LL_RCC_PLL_GetMainSource>
 8002de0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80c9 	beq.w	8002f82 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_RCC_OscConfig+0x3e>
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	2b0c      	cmp	r3, #12
 8002dfa:	d17b      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d178      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e02:	f7ff fe32 	bl	8002a6a <LL_RCC_MSI_IsReady>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_OscConfig+0x54>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e36a      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_RCC_OscConfig+0x72>
 8002e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e34:	e006      	b.n	8002e44 <HAL_RCC_OscConfig+0x80>
 8002e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d222      	bcs.n	8002e8e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fd6f 	bl	8003930 <RCC_SetFlashLatencyFromMSIRange>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e348      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e66:	f043 0308 	orr.w	r3, r3, #8
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fe26 	bl	8002ad8 <LL_RCC_MSI_SetCalibTrimming>
 8002e8c:	e021      	b.n	8002ed2 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e98:	f043 0308 	orr.w	r3, r3, #8
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fe0d 	bl	8002ad8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 fd34 	bl	8003930 <RCC_SetFlashLatencyFromMSIRange>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e30d      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ed2:	f000 fcf5 	bl	80038c0 <HAL_RCC_GetHCLKFreq>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4aa1      	ldr	r2, [pc, #644]	; (8003160 <HAL_RCC_OscConfig+0x39c>)
 8002eda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002edc:	4ba1      	ldr	r3, [pc, #644]	; (8003164 <HAL_RCC_OscConfig+0x3a0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fd fdf7 	bl	8000ad4 <HAL_InitTick>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d047      	beq.n	8002f80 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	e2fc      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d02c      	beq.n	8002f56 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002efc:	f7ff fd99 	bl	8002a32 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f00:	f7fd fdf2 	bl	8000ae8 <HAL_GetTick>
 8002f04:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f08:	f7fd fdee 	bl	8000ae8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e2e9      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f1a:	f7ff fda6 	bl	8002a6a <LL_RCC_MSI_IsReady>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f1      	beq.n	8002f08 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f2e:	f043 0308 	orr.w	r3, r3, #8
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fdc2 	bl	8002ad8 <LL_RCC_MSI_SetCalibTrimming>
 8002f54:	e015      	b.n	8002f82 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f56:	f7ff fd7a 	bl	8002a4e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f5a:	f7fd fdc5 	bl	8000ae8 <HAL_GetTick>
 8002f5e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f62:	f7fd fdc1 	bl	8000ae8 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e2bc      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f74:	f7ff fd79 	bl	8002a6a <LL_RCC_MSI_IsReady>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f1      	bne.n	8002f62 <HAL_RCC_OscConfig+0x19e>
 8002f7e:	e000      	b.n	8002f82 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f80:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d05f      	beq.n	800304e <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x1dc>
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d10d      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d10a      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa0:	f7ff fcb3 	bl	800290a <LL_RCC_HSE_IsReady>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d050      	beq.n	800304c <HAL_RCC_OscConfig+0x288>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d14c      	bne.n	800304c <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e29b      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd4:	d102      	bne.n	8002fdc <HAL_RCC_OscConfig+0x218>
 8002fd6:	f7ff fc7c 	bl	80028d2 <LL_RCC_HSE_Enable>
 8002fda:	e00d      	b.n	8002ff8 <HAL_RCC_OscConfig+0x234>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002fe4:	d104      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x22c>
 8002fe6:	f7ff fc47 	bl	8002878 <LL_RCC_HSE_EnableTcxo>
 8002fea:	f7ff fc72 	bl	80028d2 <LL_RCC_HSE_Enable>
 8002fee:	e003      	b.n	8002ff8 <HAL_RCC_OscConfig+0x234>
 8002ff0:	f7ff fc7d 	bl	80028ee <LL_RCC_HSE_Disable>
 8002ff4:	f7ff fc4e 	bl	8002894 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d012      	beq.n	8003026 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fd fd72 	bl	8000ae8 <HAL_GetTick>
 8003004:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fd fd6e 	bl	8000ae8 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e269      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 800301a:	f7ff fc76 	bl	800290a <LL_RCC_HSE_IsReady>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f1      	beq.n	8003008 <HAL_RCC_OscConfig+0x244>
 8003024:	e013      	b.n	800304e <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003026:	f7fd fd5f 	bl	8000ae8 <HAL_GetTick>
 800302a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800302e:	f7fd fd5b 	bl	8000ae8 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b64      	cmp	r3, #100	; 0x64
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e256      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003040:	f7ff fc63 	bl	800290a <LL_RCC_HSE_IsReady>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f1      	bne.n	800302e <HAL_RCC_OscConfig+0x26a>
 800304a:	e000      	b.n	800304e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d04b      	beq.n	80030f2 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	2b04      	cmp	r3, #4
 800305e:	d005      	beq.n	800306c <HAL_RCC_OscConfig+0x2a8>
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b0c      	cmp	r3, #12
 8003064:	d113      	bne.n	800308e <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d110      	bne.n	800308e <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800306c:	f7ff fc7a 	bl	8002964 <LL_RCC_HSI_IsReady>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <HAL_RCC_OscConfig+0x2be>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e235      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff fc7d 	bl	8002986 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800308c:	e031      	b.n	80030f2 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d019      	beq.n	80030ca <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003096:	f7ff fc49 	bl	800292c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309a:	f7fd fd25 	bl	8000ae8 <HAL_GetTick>
 800309e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a2:	f7fd fd21 	bl	8000ae8 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e21c      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80030b4:	f7ff fc56 	bl	8002964 <LL_RCC_HSI_IsReady>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f1      	beq.n	80030a2 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fc5f 	bl	8002986 <LL_RCC_HSI_SetCalibTrimming>
 80030c8:	e013      	b.n	80030f2 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ca:	f7ff fc3d 	bl	8002948 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ce:	f7fd fd0b 	bl	8000ae8 <HAL_GetTick>
 80030d2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d6:	f7fd fd07 	bl	8000ae8 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e202      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80030e8:	f7ff fc3c 	bl	8002964 <LL_RCC_HSI_IsReady>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f1      	bne.n	80030d6 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d06f      	beq.n	80031de <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d057      	beq.n	80031b6 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8003106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800310e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	429a      	cmp	r2, r3
 800311c:	d036      	beq.n	800318c <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d006      	beq.n	8003136 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e1db      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d018      	beq.n	8003172 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8003140:	f7ff fc56 	bl	80029f0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003144:	f7fd fcd0 	bl	8000ae8 <HAL_GetTick>
 8003148:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800314a:	e00d      	b.n	8003168 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800314c:	f7fd fccc 	bl	8000ae8 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b11      	cmp	r3, #17
 8003158:	d906      	bls.n	8003168 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e1c7      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
 800315e:	bf00      	nop
 8003160:	20000000 	.word	0x20000000
 8003164:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8003168:	f7ff fc52 	bl	8002a10 <LL_RCC_LSI_IsReady>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1ec      	bne.n	800314c <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317a:	f023 0210 	bic.w	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800318c:	f7ff fc20 	bl	80029d0 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003190:	f7fd fcaa 	bl	8000ae8 <HAL_GetTick>
 8003194:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003198:	f7fd fca6 	bl	8000ae8 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b11      	cmp	r3, #17
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e1a1      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80031aa:	f7ff fc31 	bl	8002a10 <LL_RCC_LSI_IsReady>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f1      	beq.n	8003198 <HAL_RCC_OscConfig+0x3d4>
 80031b4:	e013      	b.n	80031de <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b6:	f7ff fc1b 	bl	80029f0 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ba:	f7fd fc95 	bl	8000ae8 <HAL_GetTick>
 80031be:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c2:	f7fd fc91 	bl	8000ae8 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b11      	cmp	r3, #17
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e18c      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 80031d4:	f7ff fc1c 	bl	8002a10 <LL_RCC_LSI_IsReady>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f1      	bne.n	80031c2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 80d8 	beq.w	800339c <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80031ec:	f7ff fb32 	bl	8002854 <LL_PWR_IsEnabledBkUpAccess>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d113      	bne.n	800321e <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80031f6:	f7ff fa71 	bl	80026dc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fa:	f7fd fc75 	bl	8000ae8 <HAL_GetTick>
 80031fe:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003202:	f7fd fc71 	bl	8000ae8 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e16c      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003214:	f7ff fb1e 	bl	8002854 <LL_PWR_IsEnabledBkUpAccess>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f1      	beq.n	8003202 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d07b      	beq.n	800331e <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b85      	cmp	r3, #133	; 0x85
 800322c:	d003      	beq.n	8003236 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b05      	cmp	r3, #5
 8003234:	d109      	bne.n	800324a <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324a:	f7fd fc4d 	bl	8000ae8 <HAL_GetTick>
 800324e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003264:	e00a      	b.n	800327c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003266:	f7fd fc3f 	bl	8000ae8 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f241 3288 	movw	r2, #5000	; 0x1388
 8003274:	4293      	cmp	r3, r2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e138      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 800327c:	f7ff fb97 	bl	80029ae <LL_RCC_LSE_IsReady>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0ef      	beq.n	8003266 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b81      	cmp	r3, #129	; 0x81
 800328c:	d003      	beq.n	8003296 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b85      	cmp	r3, #133	; 0x85
 8003294:	d121      	bne.n	80032da <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003296:	f7fd fc27 	bl	8000ae8 <HAL_GetTick>
 800329a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800329c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80032b0:	e00a      	b.n	80032c8 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b2:	f7fd fc19 	bl	8000ae8 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e112      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80032c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ec      	beq.n	80032b2 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80032d8:	e060      	b.n	800339c <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fd fc05 	bl	8000ae8 <HAL_GetTick>
 80032de:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fd fbf7 	bl	8000ae8 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	; 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e0f0      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800330c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1ec      	bne.n	80032f6 <HAL_RCC_OscConfig+0x532>
 800331c:	e03e      	b.n	800339c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331e:	f7fd fbe3 	bl	8000ae8 <HAL_GetTick>
 8003322:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003330:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333a:	f7fd fbd5 	bl	8000ae8 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	; 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e0ce      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1ec      	bne.n	800333a <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7fd fbc2 	bl	8000ae8 <HAL_GetTick>
 8003364:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003372:	f023 0301 	bic.w	r3, r3, #1
 8003376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800337a:	e00a      	b.n	8003392 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337c:	f7fd fbb4 	bl	8000ae8 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	; 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e0ad      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003392:	f7ff fb0c 	bl	80029ae <LL_RCC_LSE_IsReady>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1ef      	bne.n	800337c <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80a3 	beq.w	80034ec <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	2b0c      	cmp	r3, #12
 80033aa:	d076      	beq.n	800349a <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d14b      	bne.n	800344c <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b4:	f7ff fc62 	bl	8002c7c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fd fb96 	bl	8000ae8 <HAL_GetTick>
 80033bc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fd fb92 	bl	8000ae8 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b0a      	cmp	r3, #10
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e08d      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80033d2:	f7ff fc61 	bl	8002c98 <LL_RCC_PLL_IsReady>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f1      	bne.n	80033c0 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	4b45      	ldr	r3, [pc, #276]	; (80034f8 <HAL_RCC_OscConfig+0x734>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033ee:	4311      	orrs	r1, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033f4:	0212      	lsls	r2, r2, #8
 80033f6:	4311      	orrs	r1, r2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033fc:	4311      	orrs	r1, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003402:	4311      	orrs	r1, r2
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003408:	430a      	orrs	r2, r1
 800340a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800340e:	4313      	orrs	r3, r2
 8003410:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003412:	f7ff fc25 	bl	8002c60 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003424:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003426:	f7fd fb5f 	bl	8000ae8 <HAL_GetTick>
 800342a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342e:	f7fd fb5b 	bl	8000ae8 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b0a      	cmp	r3, #10
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e056      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003440:	f7ff fc2a 	bl	8002c98 <LL_RCC_PLL_IsReady>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f1      	beq.n	800342e <HAL_RCC_OscConfig+0x66a>
 800344a:	e04f      	b.n	80034ec <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344c:	f7ff fc16 	bl	8002c7c <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800345a:	f023 0303 	bic.w	r3, r3, #3
 800345e:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8003460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800346a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800346e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003472:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fd fb38 	bl	8000ae8 <HAL_GetTick>
 8003478:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7fd fb34 	bl	8000ae8 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b0a      	cmp	r3, #10
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e02f      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800348e:	f7ff fc03 	bl	8002c98 <LL_RCC_PLL_IsReady>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f1      	bne.n	800347c <HAL_RCC_OscConfig+0x6b8>
 8003498:	e028      	b.n	80034ec <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e023      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	f003 0203 	and.w	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d115      	bne.n	80034e8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d10e      	bne.n	80034e8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d106      	bne.n	80034e8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	11c1808c 	.word	0x11c1808c

080034fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e12c      	b.n	800376a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b98      	ldr	r3, [pc, #608]	; (8003774 <HAL_RCC_ClockConfig+0x278>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d91b      	bls.n	8003556 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b95      	ldr	r3, [pc, #596]	; (8003774 <HAL_RCC_ClockConfig+0x278>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 0207 	bic.w	r2, r3, #7
 8003526:	4993      	ldr	r1, [pc, #588]	; (8003774 <HAL_RCC_ClockConfig+0x278>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800352e:	f7fd fadb 	bl	8000ae8 <HAL_GetTick>
 8003532:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003534:	e008      	b.n	8003548 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003536:	f7fd fad7 	bl	8000ae8 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e110      	b.n	800376a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003548:	4b8a      	ldr	r3, [pc, #552]	; (8003774 <HAL_RCC_ClockConfig+0x278>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d1ef      	bne.n	8003536 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fae8 	bl	8002b3c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800356c:	f7fd fabc 	bl	8000ae8 <HAL_GetTick>
 8003570:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003574:	f7fd fab8 	bl	8000ae8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e0f1      	b.n	800376a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003586:	f7ff fbc5 	bl	8002d14 <LL_RCC_IsActiveFlag_HPRE>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f1      	beq.n	8003574 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d016      	beq.n	80035ca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fade 	bl	8002b62 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035a6:	f7fd fa9f 	bl	8000ae8 <HAL_GetTick>
 80035aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035ae:	f7fd fa9b 	bl	8000ae8 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e0d4      	b.n	800376a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80035c0:	f7ff fbb9 	bl	8002d36 <LL_RCC_IsActiveFlag_C2HPRE>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f1      	beq.n	80035ae <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fad6 	bl	8002b8c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035e0:	f7fd fa82 	bl	8000ae8 <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035e8:	f7fd fa7e 	bl	8000ae8 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e0b7      	b.n	800376a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035fa:	f7ff fbae 	bl	8002d5a <LL_RCC_IsActiveFlag_SHDHPRE>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f1      	beq.n	80035e8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d016      	beq.n	800363e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff facf 	bl	8002bb8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800361a:	f7fd fa65 	bl	8000ae8 <HAL_GetTick>
 800361e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003622:	f7fd fa61 	bl	8000ae8 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e09a      	b.n	800376a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003634:	f7ff fba3 	bl	8002d7e <LL_RCC_IsActiveFlag_PPRE1>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f1      	beq.n	8003622 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d017      	beq.n	800367a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fac4 	bl	8002bde <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003656:	f7fd fa47 	bl	8000ae8 <HAL_GetTick>
 800365a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800365c:	e008      	b.n	8003670 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800365e:	f7fd fa43 	bl	8000ae8 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e07c      	b.n	800376a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003670:	f7ff fb96 	bl	8002da0 <LL_RCC_IsActiveFlag_PPRE2>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f1      	beq.n	800365e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d043      	beq.n	800370e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d106      	bne.n	800369c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800368e:	f7ff f93c 	bl	800290a <LL_RCC_HSE_IsReady>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11e      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e066      	b.n	800376a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d106      	bne.n	80036b2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80036a4:	f7ff faf8 	bl	8002c98 <LL_RCC_PLL_IsReady>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d113      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e05b      	b.n	800376a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80036ba:	f7ff f9d6 	bl	8002a6a <LL_RCC_MSI_IsReady>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d108      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e050      	b.n	800376a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80036c8:	f7ff f94c 	bl	8002964 <LL_RCC_HSI_IsReady>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e049      	b.n	800376a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fa10 	bl	8002b00 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e0:	f7fd fa02 	bl	8000ae8 <HAL_GetTick>
 80036e4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e6:	e00a      	b.n	80036fe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e8:	f7fd f9fe 	bl	8000ae8 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e035      	b.n	800376a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fe:	f7ff fa12 	bl	8002b26 <LL_RCC_GetSysClkSource>
 8003702:	4602      	mov	r2, r0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	429a      	cmp	r2, r3
 800370c:	d1ec      	bne.n	80036e8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800370e:	4b19      	ldr	r3, [pc, #100]	; (8003774 <HAL_RCC_ClockConfig+0x278>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d21b      	bcs.n	8003754 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371c:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_RCC_ClockConfig+0x278>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 0207 	bic.w	r2, r3, #7
 8003724:	4913      	ldr	r1, [pc, #76]	; (8003774 <HAL_RCC_ClockConfig+0x278>)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800372c:	f7fd f9dc 	bl	8000ae8 <HAL_GetTick>
 8003730:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003732:	e008      	b.n	8003746 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003734:	f7fd f9d8 	bl	8000ae8 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e011      	b.n	800376a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCC_ClockConfig+0x278>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d1ef      	bne.n	8003734 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003754:	f000 f8b4 	bl	80038c0 <HAL_RCC_GetHCLKFreq>
 8003758:	4603      	mov	r3, r0
 800375a:	4a07      	ldr	r2, [pc, #28]	; (8003778 <HAL_RCC_ClockConfig+0x27c>)
 800375c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800375e:	4b07      	ldr	r3, [pc, #28]	; (800377c <HAL_RCC_ClockConfig+0x280>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7fd f9b6 	bl	8000ad4 <HAL_InitTick>
 8003768:	4603      	mov	r3, r0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	58004000 	.word	0x58004000
 8003778:	20000000 	.word	0x20000000
 800377c:	20000004 	.word	0x20000004

08003780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003780:	b590      	push	{r4, r7, lr}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800378e:	f7ff f9ca 	bl	8002b26 <LL_RCC_GetSysClkSource>
 8003792:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003794:	f7ff fab3 	bl	8002cfe <LL_RCC_PLL_GetMainSource>
 8003798:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x2c>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b0c      	cmp	r3, #12
 80037a4:	d139      	bne.n	800381a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d136      	bne.n	800381a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80037ac:	f7ff f96d 	bl	8002a8a <LL_RCC_MSI_IsEnabledRangeSelect>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d115      	bne.n	80037e2 <HAL_RCC_GetSysClockFreq+0x62>
 80037b6:	f7ff f968 	bl	8002a8a <LL_RCC_MSI_IsEnabledRangeSelect>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d106      	bne.n	80037ce <HAL_RCC_GetSysClockFreq+0x4e>
 80037c0:	f7ff f973 	bl	8002aaa <LL_RCC_MSI_GetRange>
 80037c4:	4603      	mov	r3, r0
 80037c6:	0a1b      	lsrs	r3, r3, #8
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	e005      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x5a>
 80037ce:	f7ff f977 	bl	8002ac0 <LL_RCC_MSI_GetRangeAfterStandby>
 80037d2:	4603      	mov	r3, r0
 80037d4:	0a1b      	lsrs	r3, r3, #8
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	4a36      	ldr	r2, [pc, #216]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x134>)
 80037dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e0:	e014      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x8c>
 80037e2:	f7ff f952 	bl	8002a8a <LL_RCC_MSI_IsEnabledRangeSelect>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d106      	bne.n	80037fa <HAL_RCC_GetSysClockFreq+0x7a>
 80037ec:	f7ff f95d 	bl	8002aaa <LL_RCC_MSI_GetRange>
 80037f0:	4603      	mov	r3, r0
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	e005      	b.n	8003806 <HAL_RCC_GetSysClockFreq+0x86>
 80037fa:	f7ff f961 	bl	8002ac0 <LL_RCC_MSI_GetRangeAfterStandby>
 80037fe:	4603      	mov	r3, r0
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	4a2b      	ldr	r2, [pc, #172]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x134>)
 8003808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d115      	bne.n	8003840 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003818:	e012      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b04      	cmp	r3, #4
 800381e:	d102      	bne.n	8003826 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003820:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e00c      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b08      	cmp	r3, #8
 800382a:	d109      	bne.n	8003840 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800382c:	f7ff f840 	bl	80028b0 <LL_RCC_HSE_IsEnabledDiv2>
 8003830:	4603      	mov	r3, r0
 8003832:	2b01      	cmp	r3, #1
 8003834:	d102      	bne.n	800383c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003836:	4b20      	ldr	r3, [pc, #128]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	e001      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800383c:	4b1f      	ldr	r3, [pc, #124]	; (80038bc <HAL_RCC_GetSysClockFreq+0x13c>)
 800383e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003840:	f7ff f971 	bl	8002b26 <LL_RCC_GetSysClkSource>
 8003844:	4603      	mov	r3, r0
 8003846:	2b0c      	cmp	r3, #12
 8003848:	d12f      	bne.n	80038aa <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800384a:	f7ff fa58 	bl	8002cfe <LL_RCC_PLL_GetMainSource>
 800384e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d003      	beq.n	800385e <HAL_RCC_GetSysClockFreq+0xde>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d003      	beq.n	8003864 <HAL_RCC_GetSysClockFreq+0xe4>
 800385c:	e00d      	b.n	800387a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800385e:	4b16      	ldr	r3, [pc, #88]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003860:	60fb      	str	r3, [r7, #12]
        break;
 8003862:	e00d      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003864:	f7ff f824 	bl	80028b0 <LL_RCC_HSE_IsEnabledDiv2>
 8003868:	4603      	mov	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d102      	bne.n	8003874 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800386e:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003870:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003872:	e005      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003874:	4b11      	ldr	r3, [pc, #68]	; (80038bc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003876:	60fb      	str	r3, [r7, #12]
        break;
 8003878:	e002      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	60fb      	str	r3, [r7, #12]
        break;
 800387e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003880:	f7ff fa1b 	bl	8002cba <LL_RCC_PLL_GetN>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	fb03 f402 	mul.w	r4, r3, r2
 800388c:	f7ff fa2c 	bl	8002ce8 <LL_RCC_PLL_GetDivider>
 8003890:	4603      	mov	r3, r0
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	3301      	adds	r3, #1
 8003896:	fbb4 f4f3 	udiv	r4, r4, r3
 800389a:	f7ff fa1a 	bl	8002cd2 <LL_RCC_PLL_GetR>
 800389e:	4603      	mov	r3, r0
 80038a0:	0f5b      	lsrs	r3, r3, #29
 80038a2:	3301      	adds	r3, #1
 80038a4:	fbb4 f3f3 	udiv	r3, r4, r3
 80038a8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80038aa:	697b      	ldr	r3, [r7, #20]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd90      	pop	{r4, r7, pc}
 80038b4:	0800c494 	.word	0x0800c494
 80038b8:	00f42400 	.word	0x00f42400
 80038bc:	01e84800 	.word	0x01e84800

080038c0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c0:	b598      	push	{r3, r4, r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80038c4:	f7ff ff5c 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 80038c8:	4604      	mov	r4, r0
 80038ca:	f7ff f99b 	bl	8002c04 <LL_RCC_GetAHBPrescaler>
 80038ce:	4603      	mov	r3, r0
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	4a03      	ldr	r2, [pc, #12]	; (80038e4 <HAL_RCC_GetHCLKFreq+0x24>)
 80038d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038dc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	bd98      	pop	{r3, r4, r7, pc}
 80038e4:	0800c434 	.word	0x0800c434

080038e8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e8:	b598      	push	{r3, r4, r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80038ec:	f7ff ffe8 	bl	80038c0 <HAL_RCC_GetHCLKFreq>
 80038f0:	4604      	mov	r4, r0
 80038f2:	f7ff f99f 	bl	8002c34 <LL_RCC_GetAPB1Prescaler>
 80038f6:	4603      	mov	r3, r0
 80038f8:	0a1b      	lsrs	r3, r3, #8
 80038fa:	4a03      	ldr	r2, [pc, #12]	; (8003908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003900:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd98      	pop	{r3, r4, r7, pc}
 8003908:	0800c474 	.word	0x0800c474

0800390c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800390c:	b598      	push	{r3, r4, r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003910:	f7ff ffd6 	bl	80038c0 <HAL_RCC_GetHCLKFreq>
 8003914:	4604      	mov	r4, r0
 8003916:	f7ff f998 	bl	8002c4a <LL_RCC_GetAPB2Prescaler>
 800391a:	4603      	mov	r3, r0
 800391c:	0adb      	lsrs	r3, r3, #11
 800391e:	4a03      	ldr	r2, [pc, #12]	; (800392c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003924:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003928:	4618      	mov	r0, r3
 800392a:	bd98      	pop	{r3, r4, r7, pc}
 800392c:	0800c474 	.word	0x0800c474

08003930 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	4a10      	ldr	r2, [pc, #64]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003946:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003948:	f7ff f967 	bl	8002c1a <LL_RCC_GetAHB3Prescaler>
 800394c:	4603      	mov	r3, r0
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	4a0c      	ldr	r2, [pc, #48]	; (8003988 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	4a09      	ldr	r2, [pc, #36]	; (800398c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	0c9c      	lsrs	r4, r3, #18
 800396c:	f7fe fef8 	bl	8002760 <HAL_PWREx_GetVoltageRange>
 8003970:	4603      	mov	r3, r0
 8003972:	4619      	mov	r1, r3
 8003974:	4620      	mov	r0, r4
 8003976:	f000 f80b 	bl	8003990 <RCC_SetFlashLatency>
 800397a:	4603      	mov	r3, r0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	bd90      	pop	{r4, r7, pc}
 8003984:	0800c494 	.word	0x0800c494
 8003988:	0800c434 	.word	0x0800c434
 800398c:	431bde83 	.word	0x431bde83

08003990 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08e      	sub	sp, #56	; 0x38
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800399a:	4a3a      	ldr	r2, [pc, #232]	; (8003a84 <RCC_SetFlashLatency+0xf4>)
 800399c:	f107 0320 	add.w	r3, r7, #32
 80039a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039a4:	6018      	str	r0, [r3, #0]
 80039a6:	3304      	adds	r3, #4
 80039a8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80039aa:	4a37      	ldr	r2, [pc, #220]	; (8003a88 <RCC_SetFlashLatency+0xf8>)
 80039ac:	f107 0318 	add.w	r3, r7, #24
 80039b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039b4:	6018      	str	r0, [r3, #0]
 80039b6:	3304      	adds	r3, #4
 80039b8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80039ba:	4a34      	ldr	r2, [pc, #208]	; (8003a8c <RCC_SetFlashLatency+0xfc>)
 80039bc:	f107 030c 	add.w	r3, r7, #12
 80039c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80039c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80039c6:	2300      	movs	r3, #0
 80039c8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d0:	d11b      	bne.n	8003a0a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039d2:	2300      	movs	r3, #0
 80039d4:	633b      	str	r3, [r7, #48]	; 0x30
 80039d6:	e014      	b.n	8003a02 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	3338      	adds	r3, #56	; 0x38
 80039de:	443b      	add	r3, r7
 80039e0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80039e4:	461a      	mov	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d807      	bhi.n	80039fc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	3338      	adds	r3, #56	; 0x38
 80039f2:	443b      	add	r3, r7
 80039f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039fa:	e021      	b.n	8003a40 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	3301      	adds	r3, #1
 8003a00:	633b      	str	r3, [r7, #48]	; 0x30
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d9e7      	bls.n	80039d8 <RCC_SetFlashLatency+0x48>
 8003a08:	e01a      	b.n	8003a40 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a0e:	e014      	b.n	8003a3a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	3338      	adds	r3, #56	; 0x38
 8003a16:	443b      	add	r3, r7
 8003a18:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d807      	bhi.n	8003a34 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	3338      	adds	r3, #56	; 0x38
 8003a2a:	443b      	add	r3, r7
 8003a2c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a32:	e005      	b.n	8003a40 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a36:	3301      	adds	r3, #1
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d9e7      	bls.n	8003a10 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a40:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <RCC_SetFlashLatency+0x100>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 0207 	bic.w	r2, r3, #7
 8003a48:	4911      	ldr	r1, [pc, #68]	; (8003a90 <RCC_SetFlashLatency+0x100>)
 8003a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a50:	f7fd f84a 	bl	8000ae8 <HAL_GetTick>
 8003a54:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a56:	e008      	b.n	8003a6a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a58:	f7fd f846 	bl	8000ae8 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e007      	b.n	8003a7a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <RCC_SetFlashLatency+0x100>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d1ef      	bne.n	8003a58 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3738      	adds	r7, #56	; 0x38
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	0800c180 	.word	0x0800c180
 8003a88:	0800c188 	.word	0x0800c188
 8003a8c:	0800c190 	.word	0x0800c190
 8003a90:	58004000 	.word	0x58004000

08003a94 <LL_RCC_LSE_IsReady>:
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d101      	bne.n	8003aac <LL_RCC_LSE_IsReady+0x18>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <LL_RCC_LSE_IsReady+0x1a>
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr

08003ab6 <LL_RCC_SetUSARTClockSource>:
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	0c1b      	lsrs	r3, r3, #16
 8003aca:	43db      	mvns	r3, r3
 8003acc:	401a      	ands	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr

08003ae6 <LL_RCC_SetI2SClockSource>:
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <LL_RCC_SetLPUARTClockSource>:
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr

08003b3a <LL_RCC_SetI2CClockSource>:
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003b52:	43db      	mvns	r3, r3
 8003b54:	401a      	ands	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003b5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr

08003b72 <LL_RCC_SetLPTIMClockSource>:
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	041b      	lsls	r3, r3, #16
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <LL_RCC_SetRNGClockSource>:
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <LL_RCC_SetADCClockSource>:
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <LL_RCC_SetRTCClockSource>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr

08003c22 <LL_RCC_GetRTCClockSource>:
{
 8003c22:	b480      	push	{r7}
 8003c24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr

08003c3a <LL_RCC_ForceBackupDomainReset>:
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c52:	bf00      	nop
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <LL_RCC_ReleaseBackupDomainReset>:
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c72:	bf00      	nop
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr
	...

08003c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003c88:	2300      	movs	r3, #0
 8003c8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d058      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003c9c:	f7fe fd1e 	bl	80026dc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ca0:	f7fc ff22 	bl	8000ae8 <HAL_GetTick>
 8003ca4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003ca6:	e009      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca8:	f7fc ff1e 	bl	8000ae8 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d902      	bls.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	74fb      	strb	r3, [r7, #19]
        break;
 8003cba:	e006      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003cbc:	4b7b      	ldr	r3, [pc, #492]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc8:	d1ee      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003cca:	7cfb      	ldrb	r3, [r7, #19]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d13c      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003cd0:	f7ff ffa7 	bl	8003c22 <LL_RCC_GetRTCClockSource>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d00f      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cea:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cec:	f7ff ffa5 	bl	8003c3a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cf0:	f7ff ffb3 	bl	8003c5a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d014      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fc feee 	bl	8000ae8 <HAL_GetTick>
 8003d0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003d0e:	e00b      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d10:	f7fc feea 	bl	8000ae8 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d902      	bls.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	74fb      	strb	r3, [r7, #19]
            break;
 8003d26:	e004      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003d28:	f7ff feb4 	bl	8003a94 <LL_RCC_LSE_IsReady>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d1ee      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003d32:	7cfb      	ldrb	r3, [r7, #19]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d105      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff ff5b 	bl	8003bf8 <LL_RCC_SetRTCClockSource>
 8003d42:	e004      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	74bb      	strb	r3, [r7, #18]
 8003d48:	e001      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff fea9 	bl	8003ab6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d004      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fe9e 	bl	8003ab6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d004      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fec0 	bl	8003b10 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fee6 	bl	8003b72 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d004      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fedb 	bl	8003b72 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d004      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fed0 	bl	8003b72 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d004      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff fea9 	bl	8003b3a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d004      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fe9e 	bl	8003b3a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d004      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fe93 	bl	8003b3a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d011      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fe5e 	bl	8003ae6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e32:	d107      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fea5 	bl	8003ba4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d107      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e70:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d011      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fea3 	bl	8003bce <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003ea2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	58000400 	.word	0x58000400

08003eb0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d068      	beq.n	8003f94 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fc fc6a 	bl	80007b0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ee4:	4b2e      	ldr	r3, [pc, #184]	; (8003fa0 <HAL_RTC_Init+0xf0>)
 8003ee6:	22ca      	movs	r2, #202	; 0xca
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24
 8003eea:	4b2d      	ldr	r3, [pc, #180]	; (8003fa0 <HAL_RTC_Init+0xf0>)
 8003eec:	2253      	movs	r2, #83	; 0x53
 8003eee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fa0f 	bl	8004314 <RTC_EnterInitMode>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d13f      	bne.n	8003f80 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003f00:	4b27      	ldr	r3, [pc, #156]	; (8003fa0 <HAL_RTC_Init+0xf0>)
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	4a26      	ldr	r2, [pc, #152]	; (8003fa0 <HAL_RTC_Init+0xf0>)
 8003f06:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003f10:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <HAL_RTC_Init+0xf0>)
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	4319      	orrs	r1, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	430b      	orrs	r3, r1
 8003f24:	491e      	ldr	r1, [pc, #120]	; (8003fa0 <HAL_RTC_Init+0xf0>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	491a      	ldr	r1, [pc, #104]	; (8003fa0 <HAL_RTC_Init+0xf0>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003f3a:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_RTC_Init+0xf0>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	430b      	orrs	r3, r1
 8003f4c:	4914      	ldr	r1, [pc, #80]	; (8003fa0 <HAL_RTC_Init+0xf0>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fa12 	bl	800437c <RTC_ExitInitMode>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10e      	bne.n	8003f80 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8003f62:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <HAL_RTC_Init+0xf0>)
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a19      	ldr	r1, [r3, #32]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	4319      	orrs	r1, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	4909      	ldr	r1, [pc, #36]	; (8003fa0 <HAL_RTC_Init+0xf0>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f80:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <HAL_RTC_Init+0xf0>)
 8003f82:	22ff      	movs	r2, #255	; 0xff
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40002800 	.word	0x40002800

08003fa4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003fa4:	b590      	push	{r4, r7, lr}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RTC_SetAlarm_IT+0x1e>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e0f3      	b.n	80041aa <HAL_RTC_SetAlarm_IT+0x206>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003fd2:	4b78      	ldr	r3, [pc, #480]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fda:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe2:	d06a      	beq.n	80040ba <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d13a      	bne.n	8004060 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003fea:	4b72      	ldr	r3, [pc, #456]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d102      	bne.n	8003ffc <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f9f5 	bl	80043f8 <RTC_ByteToBcd2>
 800400e:	4603      	mov	r3, r0
 8004010:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	785b      	ldrb	r3, [r3, #1]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f9ee 	bl	80043f8 <RTC_ByteToBcd2>
 800401c:	4603      	mov	r3, r0
 800401e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004020:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	789b      	ldrb	r3, [r3, #2]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f9e6 	bl	80043f8 <RTC_ByteToBcd2>
 800402c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800402e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	78db      	ldrb	r3, [r3, #3]
 8004036:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004038:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004042:	4618      	mov	r0, r3
 8004044:	f000 f9d8 	bl	80043f8 <RTC_ByteToBcd2>
 8004048:	4603      	mov	r3, r0
 800404a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800404c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004054:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	e02c      	b.n	80040ba <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8004068:	d00d      	beq.n	8004086 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004072:	d008      	beq.n	8004086 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004074:	4b4f      	ldr	r3, [pc, #316]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2200      	movs	r2, #0
 8004084:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	785b      	ldrb	r3, [r3, #1]
 8004090:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004092:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004098:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	78db      	ldrb	r3, [r3, #3]
 800409e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80040a0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040a8:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80040aa:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80040b0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040ba:	4b3e      	ldr	r3, [pc, #248]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 80040bc:	22ca      	movs	r2, #202	; 0xca
 80040be:	625a      	str	r2, [r3, #36]	; 0x24
 80040c0:	4b3c      	ldr	r3, [pc, #240]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 80040c2:	2253      	movs	r2, #83	; 0x53
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ce:	d12c      	bne.n	800412a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80040d0:	4b38      	ldr	r3, [pc, #224]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	4a37      	ldr	r2, [pc, #220]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 80040d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040da:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80040dc:	4b35      	ldr	r3, [pc, #212]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 80040de:	2201      	movs	r2, #1
 80040e0:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e8:	d107      	bne.n	80040fa <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	699a      	ldr	r2, [r3, #24]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	4930      	ldr	r1, [pc, #192]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	644b      	str	r3, [r1, #68]	; 0x44
 80040f8:	e006      	b.n	8004108 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80040fa:	4a2e      	ldr	r2, [pc, #184]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8004100:	4a2c      	ldr	r2, [pc, #176]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8004108:	4a2a      	ldr	r2, [pc, #168]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	f043 0201 	orr.w	r2, r3, #1
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800411c:	4b25      	ldr	r3, [pc, #148]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	4a24      	ldr	r2, [pc, #144]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 8004122:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8004126:	6193      	str	r3, [r2, #24]
 8004128:	e02b      	b.n	8004182 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800412a:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	4a21      	ldr	r2, [pc, #132]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 8004130:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004134:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004136:	4b1f      	ldr	r3, [pc, #124]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 8004138:	2202      	movs	r2, #2
 800413a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004142:	d107      	bne.n	8004154 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	699a      	ldr	r2, [r3, #24]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	4919      	ldr	r1, [pc, #100]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 800414e:	4313      	orrs	r3, r2
 8004150:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004152:	e006      	b.n	8004162 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004154:	4a17      	ldr	r2, [pc, #92]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800415a:	4a16      	ldr	r2, [pc, #88]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8004162:	4a14      	ldr	r2, [pc, #80]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	f043 0202 	orr.w	r2, r3, #2
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	4a0e      	ldr	r2, [pc, #56]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 800417c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8004180:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004182:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <HAL_RTC_SetAlarm_IT+0x214>)
 8004184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004188:	4a0b      	ldr	r2, [pc, #44]	; (80041b8 <HAL_RTC_SetAlarm_IT+0x214>)
 800418a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800418e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <HAL_RTC_SetAlarm_IT+0x210>)
 8004194:	22ff      	movs	r2, #255	; 0xff
 8004196:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd90      	pop	{r4, r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40002800 	.word	0x40002800
 80041b8:	58000800 	.word	0x58000800

080041bc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_RTC_DeactivateAlarm+0x18>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e048      	b.n	8004266 <HAL_RTC_DeactivateAlarm+0xaa>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041e4:	4b22      	ldr	r3, [pc, #136]	; (8004270 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041e6:	22ca      	movs	r2, #202	; 0xca
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24
 80041ea:	4b21      	ldr	r3, [pc, #132]	; (8004270 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041ec:	2253      	movs	r2, #83	; 0x53
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f6:	d115      	bne.n	8004224 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80041f8:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004202:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004204:	4b1a      	ldr	r3, [pc, #104]	; (8004270 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004208:	4a19      	ldr	r2, [pc, #100]	; (8004270 <HAL_RTC_DeactivateAlarm+0xb4>)
 800420a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800420e:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	f023 0201 	bic.w	r2, r3, #1
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800421c:	4b14      	ldr	r3, [pc, #80]	; (8004270 <HAL_RTC_DeactivateAlarm+0xb4>)
 800421e:	2201      	movs	r2, #1
 8004220:	65da      	str	r2, [r3, #92]	; 0x5c
 8004222:	e014      	b.n	800424e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004224:	4b12      	ldr	r3, [pc, #72]	; (8004270 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	4a11      	ldr	r2, [pc, #68]	; (8004270 <HAL_RTC_DeactivateAlarm+0xb4>)
 800422a:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800422e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004230:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004234:	4a0e      	ldr	r2, [pc, #56]	; (8004270 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004236:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800423a:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	f023 0202 	bic.w	r2, r3, #2
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004248:	4b09      	ldr	r3, [pc, #36]	; (8004270 <HAL_RTC_DeactivateAlarm+0xb4>)
 800424a:	2202      	movs	r2, #2
 800424c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800424e:	4b08      	ldr	r3, [pc, #32]	; (8004270 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004250:	22ff      	movs	r2, #255	; 0xff
 8004252:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr
 8004270:	40002800 	.word	0x40002800

08004274 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800427c:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <HAL_RTC_AlarmIRQHandler+0x50>)
 800427e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	4013      	ands	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004292:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004294:	2201      	movs	r2, #1
 8004296:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7fc fdfe 	bl	8000e9a <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80042a8:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_RTC_AlarmIRQHandler+0x50>)
 80042aa:	2202      	movs	r2, #2
 80042ac:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f94a 	bl	8004548 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40002800 	.word	0x40002800

080042c8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <HAL_RTC_WaitForSynchro+0x48>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4a0e      	ldr	r2, [pc, #56]	; (8004310 <HAL_RTC_WaitForSynchro+0x48>)
 80042d6:	f023 0320 	bic.w	r3, r3, #32
 80042da:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80042dc:	f7fc fc04 	bl	8000ae8 <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80042e2:	e009      	b.n	80042f8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042e4:	f7fc fc00 	bl	8000ae8 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042f2:	d901      	bls.n	80042f8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e006      	b.n	8004306 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RTC_WaitForSynchro+0x48>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ef      	beq.n	80042e4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40002800 	.word	0x40002800

08004314 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004320:	4b15      	ldr	r3, [pc, #84]	; (8004378 <RTC_EnterInitMode+0x64>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d120      	bne.n	800436e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800432c:	4b12      	ldr	r3, [pc, #72]	; (8004378 <RTC_EnterInitMode+0x64>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4a11      	ldr	r2, [pc, #68]	; (8004378 <RTC_EnterInitMode+0x64>)
 8004332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004336:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004338:	f7fc fbd6 	bl	8000ae8 <HAL_GetTick>
 800433c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800433e:	e00d      	b.n	800435c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004340:	f7fc fbd2 	bl	8000ae8 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800434e:	d905      	bls.n	800435c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2203      	movs	r2, #3
 8004358:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <RTC_EnterInitMode+0x64>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d102      	bne.n	800436e <RTC_EnterInitMode+0x5a>
 8004368:	7bfb      	ldrb	r3, [r7, #15]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d1e8      	bne.n	8004340 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800436e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40002800 	.word	0x40002800

0800437c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004388:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <RTC_ExitInitMode+0x78>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4a19      	ldr	r2, [pc, #100]	; (80043f4 <RTC_ExitInitMode+0x78>)
 800438e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004392:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004394:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <RTC_ExitInitMode+0x78>)
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10c      	bne.n	80043ba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff ff91 	bl	80042c8 <HAL_RTC_WaitForSynchro>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01e      	beq.n	80043ea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2203      	movs	r2, #3
 80043b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	73fb      	strb	r3, [r7, #15]
 80043b8:	e017      	b.n	80043ea <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80043ba:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <RTC_ExitInitMode+0x78>)
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	4a0d      	ldr	r2, [pc, #52]	; (80043f4 <RTC_ExitInitMode+0x78>)
 80043c0:	f023 0320 	bic.w	r3, r3, #32
 80043c4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff ff7e 	bl	80042c8 <HAL_RTC_WaitForSynchro>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2203      	movs	r2, #3
 80043d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <RTC_ExitInitMode+0x78>)
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	4a04      	ldr	r2, [pc, #16]	; (80043f4 <RTC_ExitInitMode+0x78>)
 80043e4:	f043 0320 	orr.w	r3, r3, #32
 80043e8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40002800 	.word	0x40002800

080043f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800440a:	e005      	b.n	8004418 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3301      	adds	r3, #1
 8004410:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8004412:	7afb      	ldrb	r3, [r7, #11]
 8004414:	3b0a      	subs	r3, #10
 8004416:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004418:	7afb      	ldrb	r3, [r7, #11]
 800441a:	2b09      	cmp	r3, #9
 800441c:	d8f6      	bhi.n	800440c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	b2da      	uxtb	r2, r3
 8004426:	7afb      	ldrb	r3, [r7, #11]
 8004428:	4313      	orrs	r3, r2
 800442a:	b2db      	uxtb	r3, r3
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr
	...

08004438 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <HAL_RTCEx_EnableBypassShadow+0x16>
 800444a:	2302      	movs	r3, #2
 800444c:	e01f      	b.n	800448e <HAL_RTCEx_EnableBypassShadow+0x56>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800445e:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004460:	22ca      	movs	r2, #202	; 0xca
 8004462:	625a      	str	r2, [r3, #36]	; 0x24
 8004464:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004466:	2253      	movs	r2, #83	; 0x53
 8004468:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	4a0a      	ldr	r2, [pc, #40]	; (8004498 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004470:	f043 0320 	orr.w	r3, r3, #32
 8004474:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004476:	4b08      	ldr	r3, [pc, #32]	; (8004498 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004478:	22ff      	movs	r2, #255	; 0xff
 800447a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr
 8004498:	40002800 	.word	0x40002800

0800449c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_RTCEx_SetSSRU_IT+0x16>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e027      	b.n	8004502 <HAL_RTCEx_SetSSRU_IT+0x66>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044c2:	4b12      	ldr	r3, [pc, #72]	; (800450c <HAL_RTCEx_SetSSRU_IT+0x70>)
 80044c4:	22ca      	movs	r2, #202	; 0xca
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24
 80044c8:	4b10      	ldr	r3, [pc, #64]	; (800450c <HAL_RTCEx_SetSSRU_IT+0x70>)
 80044ca:	2253      	movs	r2, #83	; 0x53
 80044cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80044ce:	4b0f      	ldr	r3, [pc, #60]	; (800450c <HAL_RTCEx_SetSSRU_IT+0x70>)
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	4a0e      	ldr	r2, [pc, #56]	; (800450c <HAL_RTCEx_SetSSRU_IT+0x70>)
 80044d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d8:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80044da:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80044dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044e0:	4a0b      	ldr	r2, [pc, #44]	; (8004510 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80044e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044ea:	4b08      	ldr	r3, [pc, #32]	; (800450c <HAL_RTCEx_SetSSRU_IT+0x70>)
 80044ec:	22ff      	movs	r2, #255	; 0xff
 80044ee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr
 800450c:	40002800 	.word	0x40002800
 8004510:	58000800 	.word	0x58000800

08004514 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d005      	beq.n	8004534 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800452a:	2240      	movs	r2, #64	; 0x40
 800452c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fc fcbd 	bl	8000eae <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40002800 	.word	0x40002800

08004548 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr
	...

0800455c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8004568:	4b07      	ldr	r3, [pc, #28]	; (8004588 <HAL_RTCEx_BKUPWrite+0x2c>)
 800456a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4413      	add	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	601a      	str	r2, [r3, #0]
}
 800457c:	bf00      	nop
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	4000b100 	.word	0x4000b100

0800458c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8004596:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <HAL_RTCEx_BKUPRead+0x28>)
 8004598:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4413      	add	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	4000b100 	.word	0x4000b100

080045b8 <LL_PWR_SetRadioBusyTrigger>:
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045c8:	4904      	ldr	r1, [pc, #16]	; (80045dc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	608b      	str	r3, [r1, #8]
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	58000400 	.word	0x58000400

080045e0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ea:	4a04      	ldr	r2, [pc, #16]	; (80045fc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80045ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr
 80045fc:	58000400 	.word	0x58000400

08004600 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	4a04      	ldr	r2, [pc, #16]	; (800461c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800460c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004614:	bf00      	nop
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr
 800461c:	58000400 	.word	0x58000400

08004620 <LL_PWR_ClearFlag_RFBUSY>:
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004624:	4b03      	ldr	r3, [pc, #12]	; (8004634 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800462a:	619a      	str	r2, [r3, #24]
}
 800462c:	bf00      	nop
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr
 8004634:	58000400 	.word	0x58000400

08004638 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b02      	cmp	r3, #2
 8004646:	d101      	bne.n	800464c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	58000400 	.word	0x58000400

0800465c <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004660:	4b06      	ldr	r3, [pc, #24]	; (800467c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b04      	cmp	r3, #4
 800466a:	d101      	bne.n	8004670 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	58000400 	.word	0x58000400

08004680 <LL_RCC_RF_DisableReset>:
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800468c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004690:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004694:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr

080046a0 <LL_RCC_IsRFUnderReset>:
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80046a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046b4:	d101      	bne.n	80046ba <LL_RCC_IsRFUnderReset+0x1a>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <LL_RCC_IsRFUnderReset+0x1c>
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80046cc:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80046ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80046d2:	4905      	ldr	r1, [pc, #20]	; (80046e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	58000800 	.word	0x58000800

080046ec <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d103      	bne.n	8004702 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	73fb      	strb	r3, [r7, #15]
    return status;
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	e04b      	b.n	800479a <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	799b      	ldrb	r3, [r3, #6]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d105      	bne.n	800471c <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fc f94a 	bl	80009b0 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8004722:	f7ff ffad 	bl	8004680 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004726:	4b1f      	ldr	r3, [pc, #124]	; (80047a4 <HAL_SUBGHZ_Init+0xb8>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4613      	mov	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	0cdb      	lsrs	r3, r3, #19
 8004734:	2264      	movs	r2, #100	; 0x64
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d105      	bne.n	800474e <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	609a      	str	r2, [r3, #8]
      break;
 800474c:	e007      	b.n	800475e <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	3b01      	subs	r3, #1
 8004752:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004754:	f7ff ffa4 	bl	80046a0 <LL_RCC_IsRFUnderReset>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1ee      	bne.n	800473c <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800475e:	f7ff ff3f 	bl	80045e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004762:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004766:	f7ff ffad 	bl	80046c4 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800476a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800476e:	f7ff ff23 	bl	80045b8 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004772:	f7ff ff55 	bl	8004620 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4618      	mov	r0, r3
 8004782:	f000 faad 	bl	8004ce0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	719a      	strb	r2, [r3, #6]

  return status;
 8004798:	7bfb      	ldrb	r3, [r7, #15]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000000 	.word	0x20000000

080047a8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	461a      	mov	r2, r3
 80047b4:	460b      	mov	r3, r1
 80047b6:	817b      	strh	r3, [r7, #10]
 80047b8:	4613      	mov	r3, r2
 80047ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	799b      	ldrb	r3, [r3, #6]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d14a      	bne.n	800485c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	795b      	ldrb	r3, [r3, #5]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e045      	b.n	800485e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2202      	movs	r2, #2
 80047dc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fb4c 	bl	8004e7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80047e4:	f7ff ff0c 	bl	8004600 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80047e8:	210d      	movs	r1, #13
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fa98 	bl	8004d20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80047f0:	897b      	ldrh	r3, [r7, #10]
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	4619      	mov	r1, r3
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fa90 	bl	8004d20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004800:	897b      	ldrh	r3, [r7, #10]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	4619      	mov	r1, r3
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 fa8a 	bl	8004d20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800480c:	2300      	movs	r3, #0
 800480e:	82bb      	strh	r3, [r7, #20]
 8004810:	e00a      	b.n	8004828 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004812:	8abb      	ldrh	r3, [r7, #20]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	4413      	add	r3, r2
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	4619      	mov	r1, r3
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 fa7f 	bl	8004d20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004822:	8abb      	ldrh	r3, [r7, #20]
 8004824:	3301      	adds	r3, #1
 8004826:	82bb      	strh	r3, [r7, #20]
 8004828:	8aba      	ldrh	r2, [r7, #20]
 800482a:	893b      	ldrh	r3, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	d3f0      	bcc.n	8004812 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004830:	f7ff fed6 	bl	80045e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 fb45 	bl	8004ec4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
 8004846:	e001      	b.n	800484c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2201      	movs	r2, #1
 8004850:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	715a      	strb	r2, [r3, #5]

    return status;
 8004858:	7dfb      	ldrb	r3, [r7, #23]
 800485a:	e000      	b.n	800485e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800485c:	2302      	movs	r3, #2
  }
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b088      	sub	sp, #32
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	461a      	mov	r2, r3
 8004872:	460b      	mov	r3, r1
 8004874:	817b      	strh	r3, [r7, #10]
 8004876:	4613      	mov	r3, r2
 8004878:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	799b      	ldrb	r3, [r3, #6]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	d14a      	bne.n	800491e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	795b      	ldrb	r3, [r3, #5]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004890:	2302      	movs	r3, #2
 8004892:	e045      	b.n	8004920 <HAL_SUBGHZ_ReadRegisters+0xba>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 faee 	bl	8004e7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80048a0:	f7ff feae 	bl	8004600 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80048a4:	211d      	movs	r1, #29
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 fa3a 	bl	8004d20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80048ac:	897b      	ldrh	r3, [r7, #10]
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	4619      	mov	r1, r3
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 fa32 	bl	8004d20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80048bc:	897b      	ldrh	r3, [r7, #10]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	4619      	mov	r1, r3
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fa2c 	bl	8004d20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80048c8:	2100      	movs	r1, #0
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 fa28 	bl	8004d20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80048d0:	2300      	movs	r3, #0
 80048d2:	82fb      	strh	r3, [r7, #22]
 80048d4:	e009      	b.n	80048ea <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80048d6:	69b9      	ldr	r1, [r7, #24]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 fa77 	bl	8004dcc <SUBGHZSPI_Receive>
      pData++;
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	3301      	adds	r3, #1
 80048e2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80048e4:	8afb      	ldrh	r3, [r7, #22]
 80048e6:	3301      	adds	r3, #1
 80048e8:	82fb      	strh	r3, [r7, #22]
 80048ea:	8afa      	ldrh	r2, [r7, #22]
 80048ec:	893b      	ldrh	r3, [r7, #8]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d3f1      	bcc.n	80048d6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80048f2:	f7ff fe75 	bl	80045e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 fae4 	bl	8004ec4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e001      	b.n	800490e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2201      	movs	r2, #1
 8004912:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	715a      	strb	r2, [r3, #5]

    return status;
 800491a:	7ffb      	ldrb	r3, [r7, #31]
 800491c:	e000      	b.n	8004920 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800491e:	2302      	movs	r3, #2
  }
}
 8004920:	4618      	mov	r0, r3
 8004922:	3720      	adds	r7, #32
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	607a      	str	r2, [r7, #4]
 8004932:	461a      	mov	r2, r3
 8004934:	460b      	mov	r3, r1
 8004936:	72fb      	strb	r3, [r7, #11]
 8004938:	4613      	mov	r3, r2
 800493a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	799b      	ldrb	r3, [r3, #6]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	d14a      	bne.n	80049dc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	795b      	ldrb	r3, [r3, #5]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800494e:	2302      	movs	r3, #2
 8004950:	e045      	b.n	80049de <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 fa8f 	bl	8004e7c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800495e:	7afb      	ldrb	r3, [r7, #11]
 8004960:	2b84      	cmp	r3, #132	; 0x84
 8004962:	d002      	beq.n	800496a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004964:	7afb      	ldrb	r3, [r7, #11]
 8004966:	2b94      	cmp	r3, #148	; 0x94
 8004968:	d103      	bne.n	8004972 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	711a      	strb	r2, [r3, #4]
 8004970:	e002      	b.n	8004978 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004978:	f7ff fe42 	bl	8004600 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800497c:	7afb      	ldrb	r3, [r7, #11]
 800497e:	4619      	mov	r1, r3
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f9cd 	bl	8004d20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004986:	2300      	movs	r3, #0
 8004988:	82bb      	strh	r3, [r7, #20]
 800498a:	e00a      	b.n	80049a2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800498c:	8abb      	ldrh	r3, [r7, #20]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4413      	add	r3, r2
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	4619      	mov	r1, r3
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f9c2 	bl	8004d20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800499c:	8abb      	ldrh	r3, [r7, #20]
 800499e:	3301      	adds	r3, #1
 80049a0:	82bb      	strh	r3, [r7, #20]
 80049a2:	8aba      	ldrh	r2, [r7, #20]
 80049a4:	893b      	ldrh	r3, [r7, #8]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d3f0      	bcc.n	800498c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80049aa:	f7ff fe19 	bl	80045e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80049ae:	7afb      	ldrb	r3, [r7, #11]
 80049b0:	2b84      	cmp	r3, #132	; 0x84
 80049b2:	d002      	beq.n	80049ba <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 fa85 	bl	8004ec4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	75fb      	strb	r3, [r7, #23]
 80049c6:	e001      	b.n	80049cc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2201      	movs	r2, #1
 80049d0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	715a      	strb	r2, [r3, #5]

    return status;
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	e000      	b.n	80049de <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80049dc:	2302      	movs	r3, #2
  }
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b088      	sub	sp, #32
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	461a      	mov	r2, r3
 80049f2:	460b      	mov	r3, r1
 80049f4:	72fb      	strb	r3, [r7, #11]
 80049f6:	4613      	mov	r3, r2
 80049f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	799b      	ldrb	r3, [r3, #6]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d13d      	bne.n	8004a84 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	795b      	ldrb	r3, [r3, #5]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e038      	b.n	8004a86 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fa2e 	bl	8004e7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004a20:	f7ff fdee 	bl	8004600 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004a24:	7afb      	ldrb	r3, [r7, #11]
 8004a26:	4619      	mov	r1, r3
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f979 	bl	8004d20 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004a2e:	2100      	movs	r1, #0
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f975 	bl	8004d20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004a36:	2300      	movs	r3, #0
 8004a38:	82fb      	strh	r3, [r7, #22]
 8004a3a:	e009      	b.n	8004a50 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004a3c:	69b9      	ldr	r1, [r7, #24]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 f9c4 	bl	8004dcc <SUBGHZSPI_Receive>
      pData++;
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	3301      	adds	r3, #1
 8004a48:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004a4a:	8afb      	ldrh	r3, [r7, #22]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	82fb      	strh	r3, [r7, #22]
 8004a50:	8afa      	ldrh	r2, [r7, #22]
 8004a52:	893b      	ldrh	r3, [r7, #8]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d3f1      	bcc.n	8004a3c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004a58:	f7ff fdc2 	bl	80045e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 fa31 	bl	8004ec4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	77fb      	strb	r3, [r7, #31]
 8004a6e:	e001      	b.n	8004a74 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2201      	movs	r2, #1
 8004a78:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	715a      	strb	r2, [r3, #5]

    return status;
 8004a80:	7ffb      	ldrb	r3, [r7, #31]
 8004a82:	e000      	b.n	8004a86 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004a84:	2302      	movs	r3, #2
  }
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3720      	adds	r7, #32
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b086      	sub	sp, #24
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	72fb      	strb	r3, [r7, #11]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	799b      	ldrb	r3, [r3, #6]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d13e      	bne.n	8004b2a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	795b      	ldrb	r3, [r3, #5]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e039      	b.n	8004b2c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2201      	movs	r2, #1
 8004abc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f9dc 	bl	8004e7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004ac4:	f7ff fd9c 	bl	8004600 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004ac8:	210e      	movs	r1, #14
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f928 	bl	8004d20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004ad0:	7afb      	ldrb	r3, [r7, #11]
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f923 	bl	8004d20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004ada:	2300      	movs	r3, #0
 8004adc:	82bb      	strh	r3, [r7, #20]
 8004ade:	e00a      	b.n	8004af6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004ae0:	8abb      	ldrh	r3, [r7, #20]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 f918 	bl	8004d20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004af0:	8abb      	ldrh	r3, [r7, #20]
 8004af2:	3301      	adds	r3, #1
 8004af4:	82bb      	strh	r3, [r7, #20]
 8004af6:	8aba      	ldrh	r2, [r7, #20]
 8004af8:	893b      	ldrh	r3, [r7, #8]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d3f0      	bcc.n	8004ae0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004afe:	f7ff fd6f 	bl	80045e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f9de 	bl	8004ec4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	75fb      	strb	r3, [r7, #23]
 8004b14:	e001      	b.n	8004b1a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	715a      	strb	r2, [r3, #5]

    return status;
 8004b26:	7dfb      	ldrb	r3, [r7, #23]
 8004b28:	e000      	b.n	8004b2c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004b2a:	2302      	movs	r3, #2
  }
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	460b      	mov	r3, r1
 8004b42:	72fb      	strb	r3, [r7, #11]
 8004b44:	4613      	mov	r3, r2
 8004b46:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	799b      	ldrb	r3, [r3, #6]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d141      	bne.n	8004bda <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	795b      	ldrb	r3, [r3, #5]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e03c      	b.n	8004bdc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f987 	bl	8004e7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004b6e:	f7ff fd47 	bl	8004600 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004b72:	211e      	movs	r1, #30
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 f8d3 	bl	8004d20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004b7a:	7afb      	ldrb	r3, [r7, #11]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f8ce 	bl	8004d20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004b84:	2100      	movs	r1, #0
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f8ca 	bl	8004d20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	82fb      	strh	r3, [r7, #22]
 8004b90:	e009      	b.n	8004ba6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004b92:	69b9      	ldr	r1, [r7, #24]
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f919 	bl	8004dcc <SUBGHZSPI_Receive>
      pData++;
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004ba0:	8afb      	ldrh	r3, [r7, #22]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	82fb      	strh	r3, [r7, #22]
 8004ba6:	8afa      	ldrh	r2, [r7, #22]
 8004ba8:	893b      	ldrh	r3, [r7, #8]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d3f1      	bcc.n	8004b92 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004bae:	f7ff fd17 	bl	80045e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 f986 	bl	8004ec4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e001      	b.n	8004bca <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	715a      	strb	r2, [r3, #5]

    return status;
 8004bd6:	7ffb      	ldrb	r3, [r7, #31]
 8004bd8:	e000      	b.n	8004bdc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004bda:	2302      	movs	r3, #2
  }
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004bec:	2300      	movs	r3, #0
 8004bee:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004bf0:	f107 020c 	add.w	r2, r7, #12
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	2112      	movs	r1, #18
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff fef4 	bl	80049e6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004bfe:	7b3b      	ldrb	r3, [r7, #12]
 8004c00:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004c02:	89fb      	ldrh	r3, [r7, #14]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	b21a      	sxth	r2, r3
 8004c08:	7b7b      	ldrb	r3, [r7, #13]
 8004c0a:	b21b      	sxth	r3, r3
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	b21b      	sxth	r3, r3
 8004c10:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004c12:	89fb      	ldrh	r3, [r7, #14]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f005 fb0d 	bl	800a23c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004c22:	89fb      	ldrh	r3, [r7, #14]
 8004c24:	085b      	lsrs	r3, r3, #1
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f005 fb12 	bl	800a258 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004c34:	89fb      	ldrh	r3, [r7, #14]
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f005 fb61 	bl	800a308 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004c46:	89fb      	ldrh	r3, [r7, #14]
 8004c48:	08db      	lsrs	r3, r3, #3
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f005 fb66 	bl	800a324 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004c58:	89fb      	ldrh	r3, [r7, #14]
 8004c5a:	091b      	lsrs	r3, r3, #4
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f005 fb6b 	bl	800a340 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004c6a:	89fb      	ldrh	r3, [r7, #14]
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f005 fb38 	bl	800a2ec <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004c7c:	89fb      	ldrh	r3, [r7, #14]
 8004c7e:	099b      	lsrs	r3, r3, #6
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f005 faf3 	bl	800a274 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004c8e:	89fb      	ldrh	r3, [r7, #14]
 8004c90:	09db      	lsrs	r3, r3, #7
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00e      	beq.n	8004cb8 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004c9a:	89fb      	ldrh	r3, [r7, #14]
 8004c9c:	0a1b      	lsrs	r3, r3, #8
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d004      	beq.n	8004cb0 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f005 faf1 	bl	800a290 <HAL_SUBGHZ_CADStatusCallback>
 8004cae:	e003      	b.n	8004cb8 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f005 faec 	bl	800a290 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004cb8:	89fb      	ldrh	r3, [r7, #14]
 8004cba:	0a5b      	lsrs	r3, r3, #9
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f005 fb01 	bl	800a2cc <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8004cca:	f107 020c 	add.w	r2, r7, #12
 8004cce:	2302      	movs	r3, #2
 8004cd0:	2102      	movs	r1, #2
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff fe28 	bl	8004928 <HAL_SUBGHZ_ExecSetCmd>
}
 8004cd8:	bf00      	nop
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <SUBGHZSPI_Init+0x3c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a0b      	ldr	r2, [pc, #44]	; (8004d1c <SUBGHZSPI_Init+0x3c>)
 8004cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004cf4:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <SUBGHZSPI_Init+0x3c>)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004cfc:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004cfe:	4b07      	ldr	r3, [pc, #28]	; (8004d1c <SUBGHZSPI_Init+0x3c>)
 8004d00:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004d04:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004d06:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <SUBGHZSPI_Init+0x3c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a04      	ldr	r2, [pc, #16]	; (8004d1c <SUBGHZSPI_Init+0x3c>)
 8004d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d10:	6013      	str	r3, [r2, #0]
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr
 8004d1c:	58010000 	.word	0x58010000

08004d20 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d30:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <SUBGHZSPI_Transmit+0xa0>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	4613      	mov	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	1a9b      	subs	r3, r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	0cdb      	lsrs	r3, r3, #19
 8004d3e:	2264      	movs	r2, #100	; 0x64
 8004d40:	fb02 f303 	mul.w	r3, r2, r3
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d105      	bne.n	8004d58 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	609a      	str	r2, [r3, #8]
      break;
 8004d56:	e008      	b.n	8004d6a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004d5e:	4b19      	ldr	r3, [pc, #100]	; (8004dc4 <SUBGHZSPI_Transmit+0xa4>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d1ed      	bne.n	8004d46 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004d6a:	4b17      	ldr	r3, [pc, #92]	; (8004dc8 <SUBGHZSPI_Transmit+0xa8>)
 8004d6c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	78fa      	ldrb	r2, [r7, #3]
 8004d72:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d74:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <SUBGHZSPI_Transmit+0xa0>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	1a9b      	subs	r3, r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	0cdb      	lsrs	r3, r3, #19
 8004d82:	2264      	movs	r2, #100	; 0x64
 8004d84:	fb02 f303 	mul.w	r3, r2, r3
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d105      	bne.n	8004d9c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	609a      	str	r2, [r3, #8]
      break;
 8004d9a:	e008      	b.n	8004dae <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004da2:	4b08      	ldr	r3, [pc, #32]	; (8004dc4 <SUBGHZSPI_Transmit+0xa4>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d1ed      	bne.n	8004d8a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <SUBGHZSPI_Transmit+0xa4>)
 8004db0:	68db      	ldr	r3, [r3, #12]

  return status;
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	371c      	adds	r7, #28
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000000 	.word	0x20000000
 8004dc4:	58010000 	.word	0x58010000
 8004dc8:	5801000c 	.word	0x5801000c

08004dcc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004dda:	4b25      	ldr	r3, [pc, #148]	; (8004e70 <SUBGHZSPI_Receive+0xa4>)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	4613      	mov	r3, r2
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	0cdb      	lsrs	r3, r3, #19
 8004de8:	2264      	movs	r2, #100	; 0x64
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d105      	bne.n	8004e02 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	609a      	str	r2, [r3, #8]
      break;
 8004e00:	e008      	b.n	8004e14 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004e08:	4b1a      	ldr	r3, [pc, #104]	; (8004e74 <SUBGHZSPI_Receive+0xa8>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d1ed      	bne.n	8004df0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004e14:	4b18      	ldr	r3, [pc, #96]	; (8004e78 <SUBGHZSPI_Receive+0xac>)
 8004e16:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	22ff      	movs	r2, #255	; 0xff
 8004e1c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004e1e:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <SUBGHZSPI_Receive+0xa4>)
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	4613      	mov	r3, r2
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	0cdb      	lsrs	r3, r3, #19
 8004e2c:	2264      	movs	r2, #100	; 0x64
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d105      	bne.n	8004e46 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	609a      	str	r2, [r3, #8]
      break;
 8004e44:	e008      	b.n	8004e58 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004e4c:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <SUBGHZSPI_Receive+0xa8>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d1ed      	bne.n	8004e34 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004e58:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <SUBGHZSPI_Receive+0xa8>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	701a      	strb	r2, [r3, #0]

  return status;
 8004e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20000000 	.word	0x20000000
 8004e74:	58010000 	.word	0x58010000
 8004e78:	5801000c 	.word	0x5801000c

08004e7c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	791b      	ldrb	r3, [r3, #4]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d111      	bne.n	8004eb0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004e8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <SUBGHZ_CheckDeviceReady+0x44>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	4413      	add	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	0c1b      	lsrs	r3, r3, #16
 8004e9a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004e9c:	f7ff fbb0 	bl	8004600 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f9      	bne.n	8004ea0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004eac:	f7ff fb98 	bl	80045e0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f807 	bl	8004ec4 <SUBGHZ_WaitOnBusy>
 8004eb6:	4603      	mov	r3, r0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20000000 	.word	0x20000000

08004ec4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004ed0:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <SUBGHZ_WaitOnBusy+0x58>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	4413      	add	r3, r2
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	0d1b      	lsrs	r3, r3, #20
 8004ede:	2264      	movs	r2, #100	; 0x64
 8004ee0:	fb02 f303 	mul.w	r3, r2, r3
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004ee6:	f7ff fbb9 	bl	800465c <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004eea:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d105      	bne.n	8004efe <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	609a      	str	r2, [r3, #8]
      break;
 8004efc:	e009      	b.n	8004f12 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004f04:	f7ff fb98 	bl	8004638 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d0e9      	beq.n	8004ee6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000000 	.word	0x20000000

08004f20 <LL_RCC_GetUSARTClockSource>:
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	401a      	ands	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	041b      	lsls	r3, r3, #16
 8004f38:	4313      	orrs	r3, r2
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <LL_RCC_GetLPUARTClockSource>:
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4013      	ands	r3, r2
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr

08004f62 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e042      	b.n	8004ffa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fc f8f6 	bl	8001178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2224      	movs	r2, #36	; 0x24
 8004f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fc4b 	bl	8005840 <UART_SetConfig>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e022      	b.n	8004ffa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 feb3 	bl	8005d28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fe0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0201 	orr.w	r2, r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 ff39 	bl	8005e6a <UART_CheckIdleState>
 8004ff8:	4603      	mov	r3, r0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08a      	sub	sp, #40	; 0x28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005018:	2b20      	cmp	r3, #32
 800501a:	d142      	bne.n	80050a2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <HAL_UART_Receive_IT+0x24>
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e03b      	b.n	80050a4 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_UART_Receive_IT+0x36>
 8005036:	2302      	movs	r3, #2
 8005038:	e034      	b.n	80050a4 <HAL_UART_Receive_IT+0xa0>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a17      	ldr	r2, [pc, #92]	; (80050ac <HAL_UART_Receive_IT+0xa8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d01f      	beq.n	8005092 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d018      	beq.n	8005092 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	613b      	str	r3, [r7, #16]
   return(result);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	623b      	str	r3, [r7, #32]
 8005080:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	69f9      	ldr	r1, [r7, #28]
 8005084:	6a3a      	ldr	r2, [r7, #32]
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	61bb      	str	r3, [r7, #24]
   return(result);
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e6      	bne.n	8005060 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	461a      	mov	r2, r3
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 fff9 	bl	8006090 <UART_Start_Receive_IT>
 800509e:	4603      	mov	r3, r0
 80050a0:	e000      	b.n	80050a4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80050a2:	2302      	movs	r3, #2
  }
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3728      	adds	r7, #40	; 0x28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40008000 	.word	0x40008000

080050b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	; 0x28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d17a      	bne.n	80051be <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_UART_Transmit_DMA+0x24>
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e073      	b.n	80051c0 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_UART_Transmit_DMA+0x36>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e06c      	b.n	80051c0 <HAL_UART_Transmit_DMA+0x110>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	88fa      	ldrh	r2, [r7, #6]
 80050f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	88fa      	ldrh	r2, [r7, #6]
 8005100:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2221      	movs	r2, #33	; 0x21
 8005110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005118:	2b00      	cmp	r3, #0
 800511a:	d02c      	beq.n	8005176 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005120:	4a29      	ldr	r2, [pc, #164]	; (80051c8 <HAL_UART_Transmit_DMA+0x118>)
 8005122:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005128:	4a28      	ldr	r2, [pc, #160]	; (80051cc <HAL_UART_Transmit_DMA+0x11c>)
 800512a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005130:	4a27      	ldr	r2, [pc, #156]	; (80051d0 <HAL_UART_Transmit_DMA+0x120>)
 8005132:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005138:	2200      	movs	r2, #0
 800513a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005144:	4619      	mov	r1, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3328      	adds	r3, #40	; 0x28
 800514c:	461a      	mov	r2, r3
 800514e:	88fb      	ldrh	r3, [r7, #6]
 8005150:	f7fc fd8c 	bl	8001c6c <HAL_DMA_Start_IT>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00d      	beq.n	8005176 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2210      	movs	r2, #16
 800515e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2220      	movs	r2, #32
 800516e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e024      	b.n	80051c0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2240      	movs	r2, #64	; 0x40
 800517c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3308      	adds	r3, #8
 800518c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	613b      	str	r3, [r7, #16]
   return(result);
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3308      	adds	r3, #8
 80051a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a6:	623a      	str	r2, [r7, #32]
 80051a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	69f9      	ldr	r1, [r7, #28]
 80051ac:	6a3a      	ldr	r2, [r7, #32]
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e5      	bne.n	8005186 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e000      	b.n	80051c0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80051be:	2302      	movs	r3, #2
  }
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3728      	adds	r7, #40	; 0x28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	0800642b 	.word	0x0800642b
 80051cc:	080064c5 	.word	0x080064c5
 80051d0:	080064e1 	.word	0x080064e1

080051d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b0ba      	sub	sp, #232	; 0xe8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80051fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8005202:	4013      	ands	r3, r2
 8005204:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800520c:	2b00      	cmp	r3, #0
 800520e:	d11b      	bne.n	8005248 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d015      	beq.n	8005248 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800521c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b00      	cmp	r3, #0
 8005226:	d105      	bne.n	8005234 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800522c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d009      	beq.n	8005248 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 82d6 	beq.w	80057ea <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	4798      	blx	r3
      }
      return;
 8005246:	e2d0      	b.n	80057ea <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005248:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 811f 	beq.w	8005490 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005252:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005256:	4b8b      	ldr	r3, [pc, #556]	; (8005484 <HAL_UART_IRQHandler+0x2b0>)
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d106      	bne.n	800526c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800525e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005262:	4b89      	ldr	r3, [pc, #548]	; (8005488 <HAL_UART_IRQHandler+0x2b4>)
 8005264:	4013      	ands	r3, r2
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 8112 	beq.w	8005490 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800526c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d011      	beq.n	800529c <HAL_UART_IRQHandler+0xc8>
 8005278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800527c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00b      	beq.n	800529c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2201      	movs	r2, #1
 800528a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005292:	f043 0201 	orr.w	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800529c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d011      	beq.n	80052cc <HAL_UART_IRQHandler+0xf8>
 80052a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00b      	beq.n	80052cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2202      	movs	r2, #2
 80052ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052c2:	f043 0204 	orr.w	r2, r3, #4
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d011      	beq.n	80052fc <HAL_UART_IRQHandler+0x128>
 80052d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00b      	beq.n	80052fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2204      	movs	r2, #4
 80052ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f2:	f043 0202 	orr.w	r2, r3, #2
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d017      	beq.n	8005338 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b00      	cmp	r3, #0
 8005312:	d105      	bne.n	8005320 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005314:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005318:	4b5a      	ldr	r3, [pc, #360]	; (8005484 <HAL_UART_IRQHandler+0x2b0>)
 800531a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00b      	beq.n	8005338 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2208      	movs	r2, #8
 8005326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800532e:	f043 0208 	orr.w	r2, r3, #8
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800533c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005340:	2b00      	cmp	r3, #0
 8005342:	d012      	beq.n	800536a <HAL_UART_IRQHandler+0x196>
 8005344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005348:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00c      	beq.n	800536a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005358:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005360:	f043 0220 	orr.w	r2, r3, #32
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 823c 	beq.w	80057ee <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d013      	beq.n	80053aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d105      	bne.n	800539a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800538e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d007      	beq.n	80053aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053be:	2b40      	cmp	r3, #64	; 0x40
 80053c0:	d005      	beq.n	80053ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d04f      	beq.n	800546e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 ffc6 	bl	8006360 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b40      	cmp	r3, #64	; 0x40
 80053e0:	d141      	bne.n	8005466 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3308      	adds	r3, #8
 80053e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3308      	adds	r3, #8
 800540a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800540e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800541a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1d9      	bne.n	80053e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d013      	beq.n	800545e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800543a:	4a14      	ldr	r2, [pc, #80]	; (800548c <HAL_UART_IRQHandler+0x2b8>)
 800543c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005442:	4618      	mov	r0, r3
 8005444:	f7fc fcee 	bl	8001e24 <HAL_DMA_Abort_IT>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d017      	beq.n	800547e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005458:	4610      	mov	r0, r2
 800545a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545c:	e00f      	b.n	800547e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f9d9 	bl	8005816 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005464:	e00b      	b.n	800547e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f9d5 	bl	8005816 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800546c:	e007      	b.n	800547e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f9d1 	bl	8005816 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800547c:	e1b7      	b.n	80057ee <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800547e:	bf00      	nop
    return;
 8005480:	e1b5      	b.n	80057ee <HAL_UART_IRQHandler+0x61a>
 8005482:	bf00      	nop
 8005484:	10000001 	.word	0x10000001
 8005488:	04000120 	.word	0x04000120
 800548c:	08006561 	.word	0x08006561

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005494:	2b01      	cmp	r3, #1
 8005496:	f040 814a 	bne.w	800572e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800549a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549e:	f003 0310 	and.w	r3, r3, #16
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 8143 	beq.w	800572e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80054a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054ac:	f003 0310 	and.w	r3, r3, #16
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 813c 	beq.w	800572e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2210      	movs	r2, #16
 80054bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	f040 80b5 	bne.w	8005638 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80054da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 8187 	beq.w	80057f2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054ee:	429a      	cmp	r2, r3
 80054f0:	f080 817f 	bcs.w	80057f2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b00      	cmp	r3, #0
 800550c:	f040 8086 	bne.w	800561c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005524:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800552c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	461a      	mov	r2, r3
 8005536:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800553a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800553e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005546:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005552:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1da      	bne.n	8005510 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3308      	adds	r3, #8
 8005560:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800556a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800556c:	f023 0301 	bic.w	r3, r3, #1
 8005570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3308      	adds	r3, #8
 800557a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800557e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005582:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005586:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e1      	bne.n	800555a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3308      	adds	r3, #8
 800559c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3308      	adds	r3, #8
 80055b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e3      	bne.n	8005596 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ec:	f023 0310 	bic.w	r3, r3, #16
 80055f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005600:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005604:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800560c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e4      	bne.n	80055dc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005616:	4618      	mov	r0, r3
 8005618:	f7fc fba6 	bl	8001d68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005628:	b29b      	uxth	r3, r3
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	b29b      	uxth	r3, r3
 800562e:	4619      	mov	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f8f9 	bl	8005828 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005636:	e0dc      	b.n	80057f2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005644:	b29b      	uxth	r3, r3
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 80ce 	beq.w	80057f6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800565a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 80c9 	beq.w	80057f6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005674:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005678:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005686:	647b      	str	r3, [r7, #68]	; 0x44
 8005688:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800568c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e4      	bne.n	8005664 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	623b      	str	r3, [r7, #32]
   return(result);
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b0:	f023 0301 	bic.w	r3, r3, #1
 80056b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3308      	adds	r3, #8
 80056be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056c2:	633a      	str	r2, [r7, #48]	; 0x30
 80056c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e1      	bne.n	800569a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2220      	movs	r2, #32
 80056da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0310 	bic.w	r3, r3, #16
 80056fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	69b9      	ldr	r1, [r7, #24]
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	617b      	str	r3, [r7, #20]
   return(result);
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e4      	bne.n	80056ea <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005720:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005724:	4619      	mov	r1, r3
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f87e 	bl	8005828 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800572c:	e063      	b.n	80057f6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800572e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00e      	beq.n	8005758 <HAL_UART_IRQHandler+0x584>
 800573a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800573e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d008      	beq.n	8005758 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800574e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f001 fba3 	bl	8006e9c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005756:	e051      	b.n	80057fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005760:	2b00      	cmp	r3, #0
 8005762:	d014      	beq.n	800578e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576c:	2b00      	cmp	r3, #0
 800576e:	d105      	bne.n	800577c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d008      	beq.n	800578e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005780:	2b00      	cmp	r3, #0
 8005782:	d03a      	beq.n	80057fa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
    }
    return;
 800578c:	e035      	b.n	80057fa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800578e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b00      	cmp	r3, #0
 8005798:	d009      	beq.n	80057ae <HAL_UART_IRQHandler+0x5da>
 800579a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800579e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fef0 	bl	800658c <UART_EndTransmit_IT>
    return;
 80057ac:	e026      	b.n	80057fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80057ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d009      	beq.n	80057ce <HAL_UART_IRQHandler+0x5fa>
 80057ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f001 fb7a 	bl	8006ec0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057cc:	e016      	b.n	80057fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d010      	beq.n	80057fc <HAL_UART_IRQHandler+0x628>
 80057da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	da0c      	bge.n	80057fc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f001 fb63 	bl	8006eae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057e8:	e008      	b.n	80057fc <HAL_UART_IRQHandler+0x628>
      return;
 80057ea:	bf00      	nop
 80057ec:	e006      	b.n	80057fc <HAL_UART_IRQHandler+0x628>
    return;
 80057ee:	bf00      	nop
 80057f0:	e004      	b.n	80057fc <HAL_UART_IRQHandler+0x628>
      return;
 80057f2:	bf00      	nop
 80057f4:	e002      	b.n	80057fc <HAL_UART_IRQHandler+0x628>
      return;
 80057f6:	bf00      	nop
 80057f8:	e000      	b.n	80057fc <HAL_UART_IRQHandler+0x628>
    return;
 80057fa:	bf00      	nop
  }
}
 80057fc:	37e8      	adds	r7, #232	; 0xe8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop

08005804 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr

08005816 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr

08005828 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr
	...

08005840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005844:	b08c      	sub	sp, #48	; 0x30
 8005846:	af00      	add	r7, sp, #0
 8005848:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	431a      	orrs	r2, r3
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	431a      	orrs	r2, r3
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	4313      	orrs	r3, r2
 8005866:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	4b94      	ldr	r3, [pc, #592]	; (8005ac0 <UART_SetConfig+0x280>)
 8005870:	4013      	ands	r3, r2
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005878:	430b      	orrs	r3, r1
 800587a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a89      	ldr	r2, [pc, #548]	; (8005ac4 <UART_SetConfig+0x284>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d004      	beq.n	80058ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a8:	4313      	orrs	r3, r2
 80058aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80058b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058c0:	430b      	orrs	r3, r1
 80058c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	f023 010f 	bic.w	r1, r3, #15
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a7a      	ldr	r2, [pc, #488]	; (8005ac8 <UART_SetConfig+0x288>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d127      	bne.n	8005934 <UART_SetConfig+0xf4>
 80058e4:	2003      	movs	r0, #3
 80058e6:	f7ff fb1b 	bl	8004f20 <LL_RCC_GetUSARTClockSource>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d81b      	bhi.n	800592c <UART_SetConfig+0xec>
 80058f4:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <UART_SetConfig+0xbc>)
 80058f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fa:	bf00      	nop
 80058fc:	0800590d 	.word	0x0800590d
 8005900:	0800591d 	.word	0x0800591d
 8005904:	08005915 	.word	0x08005915
 8005908:	08005925 	.word	0x08005925
 800590c:	2301      	movs	r3, #1
 800590e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005912:	e080      	b.n	8005a16 <UART_SetConfig+0x1d6>
 8005914:	2302      	movs	r3, #2
 8005916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591a:	e07c      	b.n	8005a16 <UART_SetConfig+0x1d6>
 800591c:	2304      	movs	r3, #4
 800591e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005922:	e078      	b.n	8005a16 <UART_SetConfig+0x1d6>
 8005924:	2308      	movs	r3, #8
 8005926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592a:	e074      	b.n	8005a16 <UART_SetConfig+0x1d6>
 800592c:	2310      	movs	r3, #16
 800592e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005932:	e070      	b.n	8005a16 <UART_SetConfig+0x1d6>
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a64      	ldr	r2, [pc, #400]	; (8005acc <UART_SetConfig+0x28c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d138      	bne.n	80059b0 <UART_SetConfig+0x170>
 800593e:	200c      	movs	r0, #12
 8005940:	f7ff faee 	bl	8004f20 <LL_RCC_GetUSARTClockSource>
 8005944:	4603      	mov	r3, r0
 8005946:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800594a:	2b0c      	cmp	r3, #12
 800594c:	d82c      	bhi.n	80059a8 <UART_SetConfig+0x168>
 800594e:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <UART_SetConfig+0x114>)
 8005950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005954:	08005989 	.word	0x08005989
 8005958:	080059a9 	.word	0x080059a9
 800595c:	080059a9 	.word	0x080059a9
 8005960:	080059a9 	.word	0x080059a9
 8005964:	08005999 	.word	0x08005999
 8005968:	080059a9 	.word	0x080059a9
 800596c:	080059a9 	.word	0x080059a9
 8005970:	080059a9 	.word	0x080059a9
 8005974:	08005991 	.word	0x08005991
 8005978:	080059a9 	.word	0x080059a9
 800597c:	080059a9 	.word	0x080059a9
 8005980:	080059a9 	.word	0x080059a9
 8005984:	080059a1 	.word	0x080059a1
 8005988:	2300      	movs	r3, #0
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800598e:	e042      	b.n	8005a16 <UART_SetConfig+0x1d6>
 8005990:	2302      	movs	r3, #2
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005996:	e03e      	b.n	8005a16 <UART_SetConfig+0x1d6>
 8005998:	2304      	movs	r3, #4
 800599a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800599e:	e03a      	b.n	8005a16 <UART_SetConfig+0x1d6>
 80059a0:	2308      	movs	r3, #8
 80059a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059a6:	e036      	b.n	8005a16 <UART_SetConfig+0x1d6>
 80059a8:	2310      	movs	r3, #16
 80059aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ae:	e032      	b.n	8005a16 <UART_SetConfig+0x1d6>
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a43      	ldr	r2, [pc, #268]	; (8005ac4 <UART_SetConfig+0x284>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d12a      	bne.n	8005a10 <UART_SetConfig+0x1d0>
 80059ba:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80059be:	f7ff fac1 	bl	8004f44 <LL_RCC_GetLPUARTClockSource>
 80059c2:	4603      	mov	r3, r0
 80059c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059c8:	d01a      	beq.n	8005a00 <UART_SetConfig+0x1c0>
 80059ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059ce:	d81b      	bhi.n	8005a08 <UART_SetConfig+0x1c8>
 80059d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d4:	d00c      	beq.n	80059f0 <UART_SetConfig+0x1b0>
 80059d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059da:	d815      	bhi.n	8005a08 <UART_SetConfig+0x1c8>
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <UART_SetConfig+0x1a8>
 80059e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e4:	d008      	beq.n	80059f8 <UART_SetConfig+0x1b8>
 80059e6:	e00f      	b.n	8005a08 <UART_SetConfig+0x1c8>
 80059e8:	2300      	movs	r3, #0
 80059ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ee:	e012      	b.n	8005a16 <UART_SetConfig+0x1d6>
 80059f0:	2302      	movs	r3, #2
 80059f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f6:	e00e      	b.n	8005a16 <UART_SetConfig+0x1d6>
 80059f8:	2304      	movs	r3, #4
 80059fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059fe:	e00a      	b.n	8005a16 <UART_SetConfig+0x1d6>
 8005a00:	2308      	movs	r3, #8
 8005a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a06:	e006      	b.n	8005a16 <UART_SetConfig+0x1d6>
 8005a08:	2310      	movs	r3, #16
 8005a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a0e:	e002      	b.n	8005a16 <UART_SetConfig+0x1d6>
 8005a10:	2310      	movs	r3, #16
 8005a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a2a      	ldr	r2, [pc, #168]	; (8005ac4 <UART_SetConfig+0x284>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	f040 80a4 	bne.w	8005b6a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d823      	bhi.n	8005a72 <UART_SetConfig+0x232>
 8005a2a:	a201      	add	r2, pc, #4	; (adr r2, 8005a30 <UART_SetConfig+0x1f0>)
 8005a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a30:	08005a55 	.word	0x08005a55
 8005a34:	08005a73 	.word	0x08005a73
 8005a38:	08005a5d 	.word	0x08005a5d
 8005a3c:	08005a73 	.word	0x08005a73
 8005a40:	08005a63 	.word	0x08005a63
 8005a44:	08005a73 	.word	0x08005a73
 8005a48:	08005a73 	.word	0x08005a73
 8005a4c:	08005a73 	.word	0x08005a73
 8005a50:	08005a6b 	.word	0x08005a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a54:	f7fd ff48 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 8005a58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a5a:	e010      	b.n	8005a7e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a5c:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <UART_SetConfig+0x290>)
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a60:	e00d      	b.n	8005a7e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a62:	f7fd fe8d 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8005a66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a68:	e009      	b.n	8005a7e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a70:	e005      	b.n	8005a7e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 8137 	beq.w	8005cf4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	4a12      	ldr	r2, [pc, #72]	; (8005ad4 <UART_SetConfig+0x294>)
 8005a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a90:	461a      	mov	r2, r3
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4413      	add	r3, r2
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d305      	bcc.n	8005ab6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d910      	bls.n	8005ad8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005abc:	e11a      	b.n	8005cf4 <UART_SetConfig+0x4b4>
 8005abe:	bf00      	nop
 8005ac0:	cfff69f3 	.word	0xcfff69f3
 8005ac4:	40008000 	.word	0x40008000
 8005ac8:	40013800 	.word	0x40013800
 8005acc:	40004400 	.word	0x40004400
 8005ad0:	00f42400 	.word	0x00f42400
 8005ad4:	0800c524 	.word	0x0800c524
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	2200      	movs	r2, #0
 8005adc:	60bb      	str	r3, [r7, #8]
 8005ade:	60fa      	str	r2, [r7, #12]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	4a8e      	ldr	r2, [pc, #568]	; (8005d20 <UART_SetConfig+0x4e0>)
 8005ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	2200      	movs	r2, #0
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	607a      	str	r2, [r7, #4]
 8005af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005af6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005afa:	f7fa fb45 	bl	8000188 <__aeabi_uldivmod>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4610      	mov	r0, r2
 8005b04:	4619      	mov	r1, r3
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	020b      	lsls	r3, r1, #8
 8005b10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b14:	0202      	lsls	r2, r0, #8
 8005b16:	6979      	ldr	r1, [r7, #20]
 8005b18:	6849      	ldr	r1, [r1, #4]
 8005b1a:	0849      	lsrs	r1, r1, #1
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	460c      	mov	r4, r1
 8005b20:	4605      	mov	r5, r0
 8005b22:	eb12 0804 	adds.w	r8, r2, r4
 8005b26:	eb43 0905 	adc.w	r9, r3, r5
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	469a      	mov	sl, r3
 8005b32:	4693      	mov	fp, r2
 8005b34:	4652      	mov	r2, sl
 8005b36:	465b      	mov	r3, fp
 8005b38:	4640      	mov	r0, r8
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	f7fa fb24 	bl	8000188 <__aeabi_uldivmod>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4613      	mov	r3, r2
 8005b46:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b4e:	d308      	bcc.n	8005b62 <UART_SetConfig+0x322>
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b56:	d204      	bcs.n	8005b62 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6a3a      	ldr	r2, [r7, #32]
 8005b5e:	60da      	str	r2, [r3, #12]
 8005b60:	e0c8      	b.n	8005cf4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b68:	e0c4      	b.n	8005cf4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b72:	d168      	bne.n	8005c46 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005b74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d828      	bhi.n	8005bce <UART_SetConfig+0x38e>
 8005b7c:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <UART_SetConfig+0x344>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005ba9 	.word	0x08005ba9
 8005b88:	08005bb1 	.word	0x08005bb1
 8005b8c:	08005bb9 	.word	0x08005bb9
 8005b90:	08005bcf 	.word	0x08005bcf
 8005b94:	08005bbf 	.word	0x08005bbf
 8005b98:	08005bcf 	.word	0x08005bcf
 8005b9c:	08005bcf 	.word	0x08005bcf
 8005ba0:	08005bcf 	.word	0x08005bcf
 8005ba4:	08005bc7 	.word	0x08005bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ba8:	f7fd fe9e 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 8005bac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bae:	e014      	b.n	8005bda <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bb0:	f7fd feac 	bl	800390c <HAL_RCC_GetPCLK2Freq>
 8005bb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bb6:	e010      	b.n	8005bda <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bb8:	4b5a      	ldr	r3, [pc, #360]	; (8005d24 <UART_SetConfig+0x4e4>)
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bbc:	e00d      	b.n	8005bda <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bbe:	f7fd fddf 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8005bc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bc4:	e009      	b.n	8005bda <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bcc:	e005      	b.n	8005bda <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005bd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 8089 	beq.w	8005cf4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	4a4e      	ldr	r2, [pc, #312]	; (8005d20 <UART_SetConfig+0x4e0>)
 8005be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bec:	461a      	mov	r2, r3
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bf4:	005a      	lsls	r2, r3, #1
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	441a      	add	r2, r3
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	2b0f      	cmp	r3, #15
 8005c0e:	d916      	bls.n	8005c3e <UART_SetConfig+0x3fe>
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c16:	d212      	bcs.n	8005c3e <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f023 030f 	bic.w	r3, r3, #15
 8005c20:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	085b      	lsrs	r3, r3, #1
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	8bfb      	ldrh	r3, [r7, #30]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	8bfa      	ldrh	r2, [r7, #30]
 8005c3a:	60da      	str	r2, [r3, #12]
 8005c3c:	e05a      	b.n	8005cf4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c44:	e056      	b.n	8005cf4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c4a:	2b08      	cmp	r3, #8
 8005c4c:	d827      	bhi.n	8005c9e <UART_SetConfig+0x45e>
 8005c4e:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <UART_SetConfig+0x414>)
 8005c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c54:	08005c79 	.word	0x08005c79
 8005c58:	08005c81 	.word	0x08005c81
 8005c5c:	08005c89 	.word	0x08005c89
 8005c60:	08005c9f 	.word	0x08005c9f
 8005c64:	08005c8f 	.word	0x08005c8f
 8005c68:	08005c9f 	.word	0x08005c9f
 8005c6c:	08005c9f 	.word	0x08005c9f
 8005c70:	08005c9f 	.word	0x08005c9f
 8005c74:	08005c97 	.word	0x08005c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c78:	f7fd fe36 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 8005c7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c7e:	e014      	b.n	8005caa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c80:	f7fd fe44 	bl	800390c <HAL_RCC_GetPCLK2Freq>
 8005c84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c86:	e010      	b.n	8005caa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c88:	4b26      	ldr	r3, [pc, #152]	; (8005d24 <UART_SetConfig+0x4e4>)
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c8c:	e00d      	b.n	8005caa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c8e:	f7fd fd77 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8005c92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c94:	e009      	b.n	8005caa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c9c:	e005      	b.n	8005caa <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ca8:	bf00      	nop
    }

    if (pclk != 0U)
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d021      	beq.n	8005cf4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	4a1a      	ldr	r2, [pc, #104]	; (8005d20 <UART_SetConfig+0x4e0>)
 8005cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	085b      	lsrs	r3, r3, #1
 8005cc8:	441a      	add	r2, r3
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	2b0f      	cmp	r3, #15
 8005cda:	d908      	bls.n	8005cee <UART_SetConfig+0x4ae>
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce2:	d204      	bcs.n	8005cee <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6a3a      	ldr	r2, [r7, #32]
 8005cea:	60da      	str	r2, [r3, #12]
 8005cec:	e002      	b.n	8005cf4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2200      	movs	r2, #0
 8005d08:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005d10:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3730      	adds	r7, #48	; 0x30
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d1e:	bf00      	nop
 8005d20:	0800c524 	.word	0x0800c524
 8005d24:	00f42400 	.word	0x00f42400

08005d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00a      	beq.n	8005d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dde:	f003 0320 	and.w	r3, r3, #32
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01a      	beq.n	8005e3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e26:	d10a      	bne.n	8005e3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	605a      	str	r2, [r3, #4]
  }
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bc80      	pop	{r7}
 8005e68:	4770      	bx	lr

08005e6a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b086      	sub	sp, #24
 8005e6e:	af02      	add	r7, sp, #8
 8005e70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e7a:	f7fa fe35 	bl	8000ae8 <HAL_GetTick>
 8005e7e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0308 	and.w	r3, r3, #8
 8005e8a:	2b08      	cmp	r3, #8
 8005e8c:	d10e      	bne.n	8005eac <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f82f 	bl	8005f00 <UART_WaitOnFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e025      	b.n	8005ef8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d10e      	bne.n	8005ed8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f819 	bl	8005f00 <UART_WaitOnFlagUntilTimeout>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e00f      	b.n	8005ef8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b09c      	sub	sp, #112	; 0x70
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f10:	e0a9      	b.n	8006066 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f18:	f000 80a5 	beq.w	8006066 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f1c:	f7fa fde4 	bl	8000ae8 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d302      	bcc.n	8005f32 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d140      	bne.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
 8005f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f46:	667b      	str	r3, [r7, #100]	; 0x64
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f52:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f58:	e841 2300 	strex	r3, r2, [r1]
 8005f5c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e6      	bne.n	8005f32 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3308      	adds	r3, #8
 8005f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6e:	e853 3f00 	ldrex	r3, [r3]
 8005f72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	f023 0301 	bic.w	r3, r3, #1
 8005f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3308      	adds	r3, #8
 8005f82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f84:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f86:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f8c:	e841 2300 	strex	r3, r2, [r1]
 8005f90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1e5      	bne.n	8005f64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e069      	b.n	8006088 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d051      	beq.n	8006066 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fd0:	d149      	bne.n	8006066 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fda:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ff0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8005ffc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006000:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e6      	bne.n	8005fdc <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3308      	adds	r3, #8
 8006014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	613b      	str	r3, [r7, #16]
   return(result);
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	66bb      	str	r3, [r7, #104]	; 0x68
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3308      	adds	r3, #8
 800602c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800602e:	623a      	str	r2, [r7, #32]
 8006030:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	69f9      	ldr	r1, [r7, #28]
 8006034:	6a3a      	ldr	r2, [r7, #32]
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	61bb      	str	r3, [r7, #24]
   return(result);
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1e5      	bne.n	800600e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2220      	movs	r2, #32
 8006046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2220      	movs	r2, #32
 800604e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e010      	b.n	8006088 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69da      	ldr	r2, [r3, #28]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4013      	ands	r3, r2
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	429a      	cmp	r2, r3
 8006074:	bf0c      	ite	eq
 8006076:	2301      	moveq	r3, #1
 8006078:	2300      	movne	r3, #0
 800607a:	b2db      	uxtb	r3, r3
 800607c:	461a      	mov	r2, r3
 800607e:	79fb      	ldrb	r3, [r7, #7]
 8006080:	429a      	cmp	r2, r3
 8006082:	f43f af46 	beq.w	8005f12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3770      	adds	r7, #112	; 0x70
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006090:	b480      	push	{r7}
 8006092:	b0a3      	sub	sp, #140	; 0x8c
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	4613      	mov	r3, r2
 800609c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	88fa      	ldrh	r2, [r7, #6]
 80060a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	88fa      	ldrh	r2, [r7, #6]
 80060b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c2:	d10e      	bne.n	80060e2 <UART_Start_Receive_IT+0x52>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d105      	bne.n	80060d8 <UART_Start_Receive_IT+0x48>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80060d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80060d6:	e02d      	b.n	8006134 <UART_Start_Receive_IT+0xa4>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	22ff      	movs	r2, #255	; 0xff
 80060dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80060e0:	e028      	b.n	8006134 <UART_Start_Receive_IT+0xa4>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10d      	bne.n	8006106 <UART_Start_Receive_IT+0x76>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d104      	bne.n	80060fc <UART_Start_Receive_IT+0x6c>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	22ff      	movs	r2, #255	; 0xff
 80060f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80060fa:	e01b      	b.n	8006134 <UART_Start_Receive_IT+0xa4>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	227f      	movs	r2, #127	; 0x7f
 8006100:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006104:	e016      	b.n	8006134 <UART_Start_Receive_IT+0xa4>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800610e:	d10d      	bne.n	800612c <UART_Start_Receive_IT+0x9c>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d104      	bne.n	8006122 <UART_Start_Receive_IT+0x92>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	227f      	movs	r2, #127	; 0x7f
 800611c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006120:	e008      	b.n	8006134 <UART_Start_Receive_IT+0xa4>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	223f      	movs	r2, #63	; 0x3f
 8006126:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800612a:	e003      	b.n	8006134 <UART_Start_Receive_IT+0xa4>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2222      	movs	r2, #34	; 0x22
 8006140:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3308      	adds	r3, #8
 800614a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006156:	f043 0301 	orr.w	r3, r3, #1
 800615a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3308      	adds	r3, #8
 8006164:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006168:	673a      	str	r2, [r7, #112]	; 0x70
 800616a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800616e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006176:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e3      	bne.n	8006144 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006184:	d153      	bne.n	800622e <UART_Start_Receive_IT+0x19e>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800618c:	88fa      	ldrh	r2, [r7, #6]
 800618e:	429a      	cmp	r2, r3
 8006190:	d34d      	bcc.n	800622e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619a:	d107      	bne.n	80061ac <UART_Start_Receive_IT+0x11c>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d103      	bne.n	80061ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4a4a      	ldr	r2, [pc, #296]	; (80062d0 <UART_Start_Receive_IT+0x240>)
 80061a8:	671a      	str	r2, [r3, #112]	; 0x70
 80061aa:	e002      	b.n	80061b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4a49      	ldr	r2, [pc, #292]	; (80062d4 <UART_Start_Receive_IT+0x244>)
 80061b0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d01a      	beq.n	80061f8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061e6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061ec:	e841 2300 	strex	r3, r2, [r1]
 80061f0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80061f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e4      	bne.n	80061c2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3308      	adds	r3, #8
 80061fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800620e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3308      	adds	r3, #8
 8006216:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006218:	64ba      	str	r2, [r7, #72]	; 0x48
 800621a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800621e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e5      	bne.n	80061f8 <UART_Start_Receive_IT+0x168>
 800622c:	e04a      	b.n	80062c4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006236:	d107      	bne.n	8006248 <UART_Start_Receive_IT+0x1b8>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d103      	bne.n	8006248 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4a25      	ldr	r2, [pc, #148]	; (80062d8 <UART_Start_Receive_IT+0x248>)
 8006244:	671a      	str	r2, [r3, #112]	; 0x70
 8006246:	e002      	b.n	800624e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4a24      	ldr	r2, [pc, #144]	; (80062dc <UART_Start_Receive_IT+0x24c>)
 800624c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d019      	beq.n	8006292 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006272:	677b      	str	r3, [r7, #116]	; 0x74
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800627c:	637b      	str	r3, [r7, #52]	; 0x34
 800627e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800628a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e6      	bne.n	800625e <UART_Start_Receive_IT+0x1ce>
 8006290:	e018      	b.n	80062c4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	e853 3f00 	ldrex	r3, [r3]
 800629e:	613b      	str	r3, [r7, #16]
   return(result);
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f043 0320 	orr.w	r3, r3, #32
 80062a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	461a      	mov	r2, r3
 80062ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b0:	623b      	str	r3, [r7, #32]
 80062b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b4:	69f9      	ldr	r1, [r7, #28]
 80062b6:	6a3a      	ldr	r2, [r7, #32]
 80062b8:	e841 2300 	strex	r3, r2, [r1]
 80062bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1e6      	bne.n	8006292 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	378c      	adds	r7, #140	; 0x8c
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr
 80062d0:	08006b9d 	.word	0x08006b9d
 80062d4:	080068a5 	.word	0x080068a5
 80062d8:	08006743 	.word	0x08006743
 80062dc:	080065e3 	.word	0x080065e3

080062e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b08f      	sub	sp, #60	; 0x3c
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062fc:	637b      	str	r3, [r7, #52]	; 0x34
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006308:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800630c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e6      	bne.n	80062e8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3308      	adds	r3, #8
 8006320:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	60bb      	str	r3, [r7, #8]
   return(result);
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006330:	633b      	str	r3, [r7, #48]	; 0x30
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3308      	adds	r3, #8
 8006338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800633a:	61ba      	str	r2, [r7, #24]
 800633c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	6979      	ldr	r1, [r7, #20]
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	613b      	str	r3, [r7, #16]
   return(result);
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e5      	bne.n	800631a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2220      	movs	r2, #32
 8006352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006356:	bf00      	nop
 8006358:	373c      	adds	r7, #60	; 0x3c
 800635a:	46bd      	mov	sp, r7
 800635c:	bc80      	pop	{r7}
 800635e:	4770      	bx	lr

08006360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006360:	b480      	push	{r7}
 8006362:	b095      	sub	sp, #84	; 0x54
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800637c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006386:	643b      	str	r3, [r7, #64]	; 0x40
 8006388:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800638c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e6      	bne.n	8006368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3308      	adds	r3, #8
 80063a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063b0:	f023 0301 	bic.w	r3, r3, #1
 80063b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3308      	adds	r3, #8
 80063bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e3      	bne.n	800639a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d118      	bne.n	800640c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f023 0310 	bic.w	r3, r3, #16
 80063ee:	647b      	str	r3, [r7, #68]	; 0x44
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063f8:	61bb      	str	r3, [r7, #24]
 80063fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	6979      	ldr	r1, [r7, #20]
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	613b      	str	r3, [r7, #16]
   return(result);
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e6      	bne.n	80063da <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2220      	movs	r2, #32
 8006410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006420:	bf00      	nop
 8006422:	3754      	adds	r7, #84	; 0x54
 8006424:	46bd      	mov	sp, r7
 8006426:	bc80      	pop	{r7}
 8006428:	4770      	bx	lr

0800642a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b090      	sub	sp, #64	; 0x40
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b00      	cmp	r3, #0
 8006444:	d137      	bne.n	80064b6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006448:	2200      	movs	r2, #0
 800644a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800644e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3308      	adds	r3, #8
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	e853 3f00 	ldrex	r3, [r3]
 800645c:	623b      	str	r3, [r7, #32]
   return(result);
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006464:	63bb      	str	r3, [r7, #56]	; 0x38
 8006466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3308      	adds	r3, #8
 800646c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800646e:	633a      	str	r2, [r7, #48]	; 0x30
 8006470:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006476:	e841 2300 	strex	r3, r2, [r1]
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1e5      	bne.n	800644e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006496:	637b      	str	r3, [r7, #52]	; 0x34
 8006498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a0:	61fb      	str	r3, [r7, #28]
 80064a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	69b9      	ldr	r1, [r7, #24]
 80064a6:	69fa      	ldr	r2, [r7, #28]
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	617b      	str	r3, [r7, #20]
   return(result);
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e6      	bne.n	8006482 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064b4:	e002      	b.n	80064bc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80064b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80064b8:	f7fa ffd0 	bl	800145c <HAL_UART_TxCpltCallback>
}
 80064bc:	bf00      	nop
 80064be:	3740      	adds	r7, #64	; 0x40
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f7ff f996 	bl	8005804 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064d8:	bf00      	nop
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064f4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006508:	2b80      	cmp	r3, #128	; 0x80
 800650a:	d109      	bne.n	8006520 <UART_DMAError+0x40>
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	2b21      	cmp	r3, #33	; 0x21
 8006510:	d106      	bne.n	8006520 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2200      	movs	r2, #0
 8006516:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800651a:	6978      	ldr	r0, [r7, #20]
 800651c:	f7ff fee0 	bl	80062e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d109      	bne.n	8006542 <UART_DMAError+0x62>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b22      	cmp	r3, #34	; 0x22
 8006532:	d106      	bne.n	8006542 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2200      	movs	r2, #0
 8006538:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800653c:	6978      	ldr	r0, [r7, #20]
 800653e:	f7ff ff0f 	bl	8006360 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006548:	f043 0210 	orr.w	r2, r3, #16
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006552:	6978      	ldr	r0, [r7, #20]
 8006554:	f7ff f95f 	bl	8005816 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006558:	bf00      	nop
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f7ff f949 	bl	8005816 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006584:	bf00      	nop
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a8:	61fb      	str	r3, [r7, #28]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	61bb      	str	r3, [r7, #24]
 80065b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	6979      	ldr	r1, [r7, #20]
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	613b      	str	r3, [r7, #16]
   return(result);
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e6      	bne.n	8006594 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7fa ff41 	bl	800145c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065da:	bf00      	nop
 80065dc:	3720      	adds	r7, #32
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b096      	sub	sp, #88	; 0x58
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80065f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fa:	2b22      	cmp	r3, #34	; 0x22
 80065fc:	f040 8095 	bne.w	800672a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800660a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800660e:	b2d9      	uxtb	r1, r3
 8006610:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006614:	b2da      	uxtb	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661a:	400a      	ands	r2, r1
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006630:	b29b      	uxth	r3, r3
 8006632:	3b01      	subs	r3, #1
 8006634:	b29a      	uxth	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006642:	b29b      	uxth	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	d178      	bne.n	800673a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006658:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800665c:	653b      	str	r3, [r7, #80]	; 0x50
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006666:	647b      	str	r3, [r7, #68]	; 0x44
 8006668:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800666c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e6      	bne.n	8006648 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3308      	adds	r3, #8
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	623b      	str	r3, [r7, #32]
   return(result);
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	f023 0301 	bic.w	r3, r3, #1
 8006690:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3308      	adds	r3, #8
 8006698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800669a:	633a      	str	r2, [r7, #48]	; 0x30
 800669c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e5      	bne.n	800667a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d12e      	bne.n	8006722 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	e853 3f00 	ldrex	r3, [r3]
 80066d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0310 	bic.w	r3, r3, #16
 80066de:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e8:	61fb      	str	r3, [r7, #28]
 80066ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ec:	69b9      	ldr	r1, [r7, #24]
 80066ee:	69fa      	ldr	r2, [r7, #28]
 80066f0:	e841 2300 	strex	r3, r2, [r1]
 80066f4:	617b      	str	r3, [r7, #20]
   return(result);
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1e6      	bne.n	80066ca <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f003 0310 	and.w	r3, r3, #16
 8006706:	2b10      	cmp	r3, #16
 8006708:	d103      	bne.n	8006712 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2210      	movs	r2, #16
 8006710:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7ff f884 	bl	8005828 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006720:	e00b      	b.n	800673a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fa feb0 	bl	8001488 <HAL_UART_RxCpltCallback>
}
 8006728:	e007      	b.n	800673a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	699a      	ldr	r2, [r3, #24]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f042 0208 	orr.w	r2, r2, #8
 8006738:	619a      	str	r2, [r3, #24]
}
 800673a:	bf00      	nop
 800673c:	3758      	adds	r7, #88	; 0x58
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b096      	sub	sp, #88	; 0x58
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006750:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675a:	2b22      	cmp	r3, #34	; 0x22
 800675c:	f040 8095 	bne.w	800688a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800676e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006770:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006774:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006778:	4013      	ands	r3, r2
 800677a:	b29a      	uxth	r2, r3
 800677c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800677e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006784:	1c9a      	adds	r2, r3, #2
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006790:	b29b      	uxth	r3, r3
 8006792:	3b01      	subs	r3, #1
 8006794:	b29a      	uxth	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d178      	bne.n	800689a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c6:	643b      	str	r3, [r7, #64]	; 0x40
 80067c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e6      	bne.n	80067a8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	f023 0301 	bic.w	r3, r3, #1
 80067f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3308      	adds	r3, #8
 80067f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1e5      	bne.n	80067da <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2220      	movs	r2, #32
 8006812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006820:	2b01      	cmp	r3, #1
 8006822:	d12e      	bne.n	8006882 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	e853 3f00 	ldrex	r3, [r3]
 8006836:	60bb      	str	r3, [r7, #8]
   return(result);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f023 0310 	bic.w	r3, r3, #16
 800683e:	647b      	str	r3, [r7, #68]	; 0x44
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	461a      	mov	r2, r3
 8006846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006848:	61bb      	str	r3, [r7, #24]
 800684a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684c:	6979      	ldr	r1, [r7, #20]
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	e841 2300 	strex	r3, r2, [r1]
 8006854:	613b      	str	r3, [r7, #16]
   return(result);
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e6      	bne.n	800682a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f003 0310 	and.w	r3, r3, #16
 8006866:	2b10      	cmp	r3, #16
 8006868:	d103      	bne.n	8006872 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2210      	movs	r2, #16
 8006870:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006878:	4619      	mov	r1, r3
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7fe ffd4 	bl	8005828 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006880:	e00b      	b.n	800689a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fa fe00 	bl	8001488 <HAL_UART_RxCpltCallback>
}
 8006888:	e007      	b.n	800689a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699a      	ldr	r2, [r3, #24]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0208 	orr.w	r2, r2, #8
 8006898:	619a      	str	r2, [r3, #24]
}
 800689a:	bf00      	nop
 800689c:	3758      	adds	r7, #88	; 0x58
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
	...

080068a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b0a6      	sub	sp, #152	; 0x98
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80068b2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068da:	2b22      	cmp	r3, #34	; 0x22
 80068dc:	f040 814f 	bne.w	8006b7e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80068e6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068ea:	e0f6      	b.n	8006ada <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068f6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80068fa:	b2d9      	uxtb	r1, r3
 80068fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006900:	b2da      	uxtb	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006906:	400a      	ands	r2, r1
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800691c:	b29b      	uxth	r3, r3
 800691e:	3b01      	subs	r3, #1
 8006920:	b29a      	uxth	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006932:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	2b00      	cmp	r3, #0
 800693c:	d053      	beq.n	80069e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800693e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d011      	beq.n	800696e <UART_RxISR_8BIT_FIFOEN+0xca>
 800694a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800694e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2201      	movs	r2, #1
 800695c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006964:	f043 0201 	orr.w	r2, r3, #1
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800696e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d011      	beq.n	800699e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800697a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00b      	beq.n	800699e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2202      	movs	r2, #2
 800698c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006994:	f043 0204 	orr.w	r2, r3, #4
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800699e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d011      	beq.n	80069ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 80069aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00b      	beq.n	80069ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2204      	movs	r2, #4
 80069bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069c4:	f043 0202 	orr.w	r2, r3, #2
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d006      	beq.n	80069e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7fe ff1c 	bl	8005816 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d173      	bne.n	8006ada <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069fa:	e853 3f00 	ldrex	r3, [r3]
 80069fe:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a14:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a16:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006a1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e4      	bne.n	80069f2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a32:	e853 3f00 	ldrex	r3, [r3]
 8006a36:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a3e:	f023 0301 	bic.w	r3, r3, #1
 8006a42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3308      	adds	r3, #8
 8006a4a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006a4c:	657a      	str	r2, [r7, #84]	; 0x54
 8006a4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a54:	e841 2300 	strex	r3, r2, [r1]
 8006a58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e3      	bne.n	8006a28 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d12e      	bne.n	8006ad4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	f023 0310 	bic.w	r3, r3, #16
 8006a90:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8006a9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e6      	bne.n	8006a7c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	f003 0310 	and.w	r3, r3, #16
 8006ab8:	2b10      	cmp	r3, #16
 8006aba:	d103      	bne.n	8006ac4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2210      	movs	r2, #16
 8006ac2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7fe feab 	bl	8005828 <HAL_UARTEx_RxEventCallback>
 8006ad2:	e002      	b.n	8006ada <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7fa fcd7 	bl	8001488 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ada:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d006      	beq.n	8006af0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006ae2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f47f aefe 	bne.w	80068ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006af6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006afa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d045      	beq.n	8006b8e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d23e      	bcs.n	8006b8e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3308      	adds	r3, #8
 8006b16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b26:	673b      	str	r3, [r7, #112]	; 0x70
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006b30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e5      	bne.n	8006b10 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a14      	ldr	r2, [pc, #80]	; (8006b98 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8006b48:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f043 0320 	orr.w	r3, r3, #32
 8006b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6979      	ldr	r1, [r7, #20]
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	613b      	str	r3, [r7, #16]
   return(result);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e6      	bne.n	8006b4a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b7c:	e007      	b.n	8006b8e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	699a      	ldr	r2, [r3, #24]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f042 0208 	orr.w	r2, r2, #8
 8006b8c:	619a      	str	r2, [r3, #24]
}
 8006b8e:	bf00      	nop
 8006b90:	3798      	adds	r7, #152	; 0x98
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	080065e3 	.word	0x080065e3

08006b9c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b0a8      	sub	sp, #160	; 0xa0
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006baa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd2:	2b22      	cmp	r3, #34	; 0x22
 8006bd4:	f040 8153 	bne.w	8006e7e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006bde:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006be2:	e0fa      	b.n	8006dda <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006bf6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006bfa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006bfe:	4013      	ands	r3, r2
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c0c:	1c9a      	adds	r2, r3, #2
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006c2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d053      	beq.n	8006ce2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d011      	beq.n	8006c6a <UART_RxISR_16BIT_FIFOEN+0xce>
 8006c46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00b      	beq.n	8006c6a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2201      	movs	r2, #1
 8006c58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c60:	f043 0201 	orr.w	r2, r3, #1
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d011      	beq.n	8006c9a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006c76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00b      	beq.n	8006c9a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2202      	movs	r2, #2
 8006c88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c90:	f043 0204 	orr.w	r2, r3, #4
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c9e:	f003 0304 	and.w	r3, r3, #4
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d011      	beq.n	8006cca <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006ca6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00b      	beq.n	8006cca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2204      	movs	r2, #4
 8006cb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc0:	f043 0202 	orr.w	r2, r3, #2
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d006      	beq.n	8006ce2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7fe fd9e 	bl	8005816 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d175      	bne.n	8006dda <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cf6:	e853 3f00 	ldrex	r3, [r3]
 8006cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d12:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d18:	e841 2300 	strex	r3, r2, [r1]
 8006d1c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e4      	bne.n	8006cee <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3308      	adds	r3, #8
 8006d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d2e:	e853 3f00 	ldrex	r3, [r3]
 8006d32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d3a:	f023 0301 	bic.w	r3, r3, #1
 8006d3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3308      	adds	r3, #8
 8006d48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d54:	e841 2300 	strex	r3, r2, [r1]
 8006d58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1e1      	bne.n	8006d24 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2220      	movs	r2, #32
 8006d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d12e      	bne.n	8006dd4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d84:	e853 3f00 	ldrex	r3, [r3]
 8006d88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8c:	f023 0310 	bic.w	r3, r3, #16
 8006d90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d9c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006da0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006da2:	e841 2300 	strex	r3, r2, [r1]
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1e6      	bne.n	8006d7c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f003 0310 	and.w	r3, r3, #16
 8006db8:	2b10      	cmp	r3, #16
 8006dba:	d103      	bne.n	8006dc4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2210      	movs	r2, #16
 8006dc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7fe fd2b 	bl	8005828 <HAL_UARTEx_RxEventCallback>
 8006dd2:	e002      	b.n	8006dda <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7fa fb57 	bl	8001488 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006dda:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d006      	beq.n	8006df0 <UART_RxISR_16BIT_FIFOEN+0x254>
 8006de2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006de6:	f003 0320 	and.w	r3, r3, #32
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f47f aefa 	bne.w	8006be4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006df6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006dfa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d045      	beq.n	8006e8e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e08:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d23e      	bcs.n	8006e8e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3308      	adds	r3, #8
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	623b      	str	r3, [r7, #32]
   return(result);
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e26:	677b      	str	r3, [r7, #116]	; 0x74
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006e30:	633a      	str	r2, [r7, #48]	; 0x30
 8006e32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e5      	bne.n	8006e10 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a14      	ldr	r2, [pc, #80]	; (8006e98 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8006e48:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f043 0320 	orr.w	r3, r3, #32
 8006e5e:	673b      	str	r3, [r7, #112]	; 0x70
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e68:	61fb      	str	r3, [r7, #28]
 8006e6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	69b9      	ldr	r1, [r7, #24]
 8006e6e:	69fa      	ldr	r2, [r7, #28]
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	617b      	str	r3, [r7, #20]
   return(result);
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e6      	bne.n	8006e4a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e7c:	e007      	b.n	8006e8e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	699a      	ldr	r2, [r3, #24]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f042 0208 	orr.w	r2, r2, #8
 8006e8c:	619a      	str	r2, [r3, #24]
}
 8006e8e:	bf00      	nop
 8006e90:	37a0      	adds	r7, #160	; 0xa0
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	08006743 	.word	0x08006743

08006e9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bc80      	pop	{r7}
 8006eac:	4770      	bx	lr

08006eae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bc80      	pop	{r7}
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bc80      	pop	{r7}
 8006ed0:	4770      	bx	lr

08006ed2 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b088      	sub	sp, #32
 8006ed6:	af02      	add	r7, sp, #8
 8006ed8:	60f8      	str	r0, [r7, #12]
 8006eda:	1d3b      	adds	r3, r7, #4
 8006edc:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e046      	b.n	8006f80 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2224      	movs	r2, #36	; 0x24
 8006efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 0201 	bic.w	r2, r2, #1
 8006f10:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	430a      	orrs	r2, r1
 8006f24:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d105      	bne.n	8006f38 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006f2c:	1d3b      	adds	r3, r7, #4
 8006f2e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f000 f911 	bl	800715a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0201 	orr.w	r2, r2, #1
 8006f46:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f48:	f7f9 fdce 	bl	8000ae8 <HAL_GetTick>
 8006f4c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f7fe ffcf 	bl	8005f00 <UART_WaitOnFlagUntilTimeout>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	75fb      	strb	r3, [r7, #23]
 8006f6c:	e003      	b.n	8006f76 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b089      	sub	sp, #36	; 0x24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d101      	bne.n	8006f9e <HAL_UARTEx_EnableStopMode+0x16>
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e021      	b.n	8006fe2 <HAL_UARTEx_EnableStopMode+0x5a>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	e853 3f00 	ldrex	r3, [r3]
 8006fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f043 0302 	orr.w	r3, r3, #2
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	61bb      	str	r3, [r7, #24]
 8006fc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	6979      	ldr	r1, [r7, #20]
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	e841 2300 	strex	r3, r2, [r1]
 8006fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e6      	bne.n	8006fa6 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3724      	adds	r7, #36	; 0x24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr

08006fec <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d101      	bne.n	8007002 <HAL_UARTEx_EnableFifoMode+0x16>
 8006ffe:	2302      	movs	r3, #2
 8007000:	e02b      	b.n	800705a <HAL_UARTEx_EnableFifoMode+0x6e>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2224      	movs	r2, #36	; 0x24
 800700e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 0201 	bic.w	r2, r2, #1
 8007028:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007030:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007038:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f8ac 	bl	80071a0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2220      	movs	r2, #32
 800704c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b084      	sub	sp, #16
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007072:	2b01      	cmp	r3, #1
 8007074:	d101      	bne.n	800707a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007076:	2302      	movs	r3, #2
 8007078:	e02d      	b.n	80070d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2224      	movs	r2, #36	; 0x24
 8007086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 0201 	bic.w	r2, r2, #1
 80070a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f872 	bl	80071a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e02d      	b.n	8007152 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2224      	movs	r2, #36	; 0x24
 8007102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 0201 	bic.w	r2, r2, #1
 800711c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f834 	bl	80071a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2220      	movs	r2, #32
 8007144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800715a:	b480      	push	{r7}
 800715c:	b085      	sub	sp, #20
 800715e:	af00      	add	r7, sp, #0
 8007160:	60f8      	str	r0, [r7, #12]
 8007162:	1d3b      	adds	r3, r7, #4
 8007164:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f023 0210 	bic.w	r2, r3, #16
 8007172:	893b      	ldrh	r3, [r7, #8]
 8007174:	4619      	mov	r1, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8007188:	7abb      	ldrb	r3, [r7, #10]
 800718a:	061a      	lsls	r2, r3, #24
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	605a      	str	r2, [r3, #4]
}
 8007194:	bf00      	nop
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	bc80      	pop	{r7}
 800719c:	4770      	bx	lr
	...

080071a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d108      	bne.n	80071c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071c0:	e031      	b.n	8007226 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071c2:	2308      	movs	r3, #8
 80071c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071c6:	2308      	movs	r3, #8
 80071c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	0e5b      	lsrs	r3, r3, #25
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	0f5b      	lsrs	r3, r3, #29
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071ea:	7bbb      	ldrb	r3, [r7, #14]
 80071ec:	7b3a      	ldrb	r2, [r7, #12]
 80071ee:	4910      	ldr	r1, [pc, #64]	; (8007230 <UARTEx_SetNbDataToProcess+0x90>)
 80071f0:	5c8a      	ldrb	r2, [r1, r2]
 80071f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80071f6:	7b3a      	ldrb	r2, [r7, #12]
 80071f8:	490e      	ldr	r1, [pc, #56]	; (8007234 <UARTEx_SetNbDataToProcess+0x94>)
 80071fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007200:	b29a      	uxth	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	7b7a      	ldrb	r2, [r7, #13]
 800720c:	4908      	ldr	r1, [pc, #32]	; (8007230 <UARTEx_SetNbDataToProcess+0x90>)
 800720e:	5c8a      	ldrb	r2, [r1, r2]
 8007210:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007214:	7b7a      	ldrb	r2, [r7, #13]
 8007216:	4907      	ldr	r1, [pc, #28]	; (8007234 <UARTEx_SetNbDataToProcess+0x94>)
 8007218:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800721a:	fb93 f3f2 	sdiv	r3, r3, r2
 800721e:	b29a      	uxth	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007226:	bf00      	nop
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	bc80      	pop	{r7}
 800722e:	4770      	bx	lr
 8007230:	0800c53c 	.word	0x0800c53c
 8007234:	0800c544 	.word	0x0800c544

08007238 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af02      	add	r7, sp, #8
 800723e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007240:	4a24      	ldr	r2, [pc, #144]	; (80072d4 <RadioInit+0x9c>)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8007246:	4b24      	ldr	r3, [pc, #144]	; (80072d8 <RadioInit+0xa0>)
 8007248:	2200      	movs	r2, #0
 800724a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800724c:	4b22      	ldr	r3, [pc, #136]	; (80072d8 <RadioInit+0xa0>)
 800724e:	2200      	movs	r2, #0
 8007250:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007252:	4b21      	ldr	r3, [pc, #132]	; (80072d8 <RadioInit+0xa0>)
 8007254:	2200      	movs	r2, #0
 8007256:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007258:	4b1f      	ldr	r3, [pc, #124]	; (80072d8 <RadioInit+0xa0>)
 800725a:	2200      	movs	r2, #0
 800725c:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 800725e:	481f      	ldr	r0, [pc, #124]	; (80072dc <RadioInit+0xa4>)
 8007260:	f001 ff88 	bl	8009174 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8007264:	4b1c      	ldr	r3, [pc, #112]	; (80072d8 <RadioInit+0xa0>)
 8007266:	2200      	movs	r2, #0
 8007268:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800726a:	4b1b      	ldr	r3, [pc, #108]	; (80072d8 <RadioInit+0xa0>)
 800726c:	2200      	movs	r2, #0
 800726e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8007270:	f002 fa16 	bl	80096a0 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8007274:	2100      	movs	r1, #0
 8007276:	2000      	movs	r0, #0
 8007278:	f002 fdde 	bl	8009e38 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800727c:	2204      	movs	r2, #4
 800727e:	2100      	movs	r1, #0
 8007280:	2001      	movs	r0, #1
 8007282:	f002 fb9b 	bl	80099bc <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007286:	2300      	movs	r3, #0
 8007288:	2200      	movs	r2, #0
 800728a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800728e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007292:	f002 facb 	bl	800982c <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8007296:	f000 fe83 	bl	8007fa0 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800729a:	2300      	movs	r3, #0
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	4b10      	ldr	r3, [pc, #64]	; (80072e0 <RadioInit+0xa8>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	f04f 31ff 	mov.w	r1, #4294967295
 80072a6:	480f      	ldr	r0, [pc, #60]	; (80072e4 <RadioInit+0xac>)
 80072a8:	f004 f9f6 	bl	800b698 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80072ac:	2300      	movs	r3, #0
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <RadioInit+0xb0>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	f04f 31ff 	mov.w	r1, #4294967295
 80072b8:	480c      	ldr	r0, [pc, #48]	; (80072ec <RadioInit+0xb4>)
 80072ba:	f004 f9ed 	bl	800b698 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80072be:	4809      	ldr	r0, [pc, #36]	; (80072e4 <RadioInit+0xac>)
 80072c0:	f004 fa8e 	bl	800b7e0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80072c4:	4809      	ldr	r0, [pc, #36]	; (80072ec <RadioInit+0xb4>)
 80072c6:	f004 fa8b 	bl	800b7e0 <UTIL_TIMER_Stop>
}
 80072ca:	bf00      	nop
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20000280 	.word	0x20000280
 80072d8:	20000284 	.word	0x20000284
 80072dc:	0800838d 	.word	0x0800838d
 80072e0:	08008315 	.word	0x08008315
 80072e4:	200002e0 	.word	0x200002e0
 80072e8:	08008329 	.word	0x08008329
 80072ec:	200002f8 	.word	0x200002f8

080072f0 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80072f4:	f001 ff80 	bl	80091f8 <SUBGRF_GetOperatingMode>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b07      	cmp	r3, #7
 80072fc:	d00a      	beq.n	8007314 <RadioGetStatus+0x24>
 80072fe:	2b07      	cmp	r3, #7
 8007300:	dc0a      	bgt.n	8007318 <RadioGetStatus+0x28>
 8007302:	2b04      	cmp	r3, #4
 8007304:	d002      	beq.n	800730c <RadioGetStatus+0x1c>
 8007306:	2b05      	cmp	r3, #5
 8007308:	d002      	beq.n	8007310 <RadioGetStatus+0x20>
 800730a:	e005      	b.n	8007318 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800730c:	2302      	movs	r3, #2
 800730e:	e004      	b.n	800731a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8007310:	2301      	movs	r3, #1
 8007312:	e002      	b.n	800731a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007314:	2303      	movs	r3, #3
 8007316:	e000      	b.n	800731a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8007318:	2300      	movs	r3, #0
    }
}
 800731a:	4618      	mov	r0, r3
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	4603      	mov	r3, r0
 8007328:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800732a:	4a2a      	ldr	r2, [pc, #168]	; (80073d4 <RadioSetModem+0xb4>)
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	4618      	mov	r0, r3
 8007334:	f003 f943 	bl	800a5be <RFW_SetRadioModem>
    switch( modem )
 8007338:	79fb      	ldrb	r3, [r7, #7]
 800733a:	2b05      	cmp	r3, #5
 800733c:	d80e      	bhi.n	800735c <RadioSetModem+0x3c>
 800733e:	a201      	add	r2, pc, #4	; (adr r2, 8007344 <RadioSetModem+0x24>)
 8007340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007344:	0800736b 	.word	0x0800736b
 8007348:	08007379 	.word	0x08007379
 800734c:	0800735d 	.word	0x0800735d
 8007350:	0800739f 	.word	0x0800739f
 8007354:	080073ad 	.word	0x080073ad
 8007358:	080073bb 	.word	0x080073bb
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800735c:	2003      	movs	r0, #3
 800735e:	f002 fb07 	bl	8009970 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007362:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <RadioSetModem+0xb4>)
 8007364:	2200      	movs	r2, #0
 8007366:	735a      	strb	r2, [r3, #13]
        break;
 8007368:	e02f      	b.n	80073ca <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800736a:	2000      	movs	r0, #0
 800736c:	f002 fb00 	bl	8009970 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007370:	4b18      	ldr	r3, [pc, #96]	; (80073d4 <RadioSetModem+0xb4>)
 8007372:	2200      	movs	r2, #0
 8007374:	735a      	strb	r2, [r3, #13]
        break;
 8007376:	e028      	b.n	80073ca <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8007378:	2001      	movs	r0, #1
 800737a:	f002 faf9 	bl	8009970 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800737e:	4b15      	ldr	r3, [pc, #84]	; (80073d4 <RadioSetModem+0xb4>)
 8007380:	7b5a      	ldrb	r2, [r3, #13]
 8007382:	4b14      	ldr	r3, [pc, #80]	; (80073d4 <RadioSetModem+0xb4>)
 8007384:	7b1b      	ldrb	r3, [r3, #12]
 8007386:	429a      	cmp	r2, r3
 8007388:	d01e      	beq.n	80073c8 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800738a:	4b12      	ldr	r3, [pc, #72]	; (80073d4 <RadioSetModem+0xb4>)
 800738c:	7b1a      	ldrb	r2, [r3, #12]
 800738e:	4b11      	ldr	r3, [pc, #68]	; (80073d4 <RadioSetModem+0xb4>)
 8007390:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8007392:	4b10      	ldr	r3, [pc, #64]	; (80073d4 <RadioSetModem+0xb4>)
 8007394:	7b5b      	ldrb	r3, [r3, #13]
 8007396:	4618      	mov	r0, r3
 8007398:	f000 ff86 	bl	80082a8 <RadioSetPublicNetwork>
        }
        break;
 800739c:	e014      	b.n	80073c8 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800739e:	2002      	movs	r0, #2
 80073a0:	f002 fae6 	bl	8009970 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80073a4:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <RadioSetModem+0xb4>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	735a      	strb	r2, [r3, #13]
        break;
 80073aa:	e00e      	b.n	80073ca <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80073ac:	2002      	movs	r0, #2
 80073ae:	f002 fadf 	bl	8009970 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80073b2:	4b08      	ldr	r3, [pc, #32]	; (80073d4 <RadioSetModem+0xb4>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	735a      	strb	r2, [r3, #13]
        break;
 80073b8:	e007      	b.n	80073ca <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80073ba:	2000      	movs	r0, #0
 80073bc:	f002 fad8 	bl	8009970 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80073c0:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <RadioSetModem+0xb4>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	735a      	strb	r2, [r3, #13]
        break;
 80073c6:	e000      	b.n	80073ca <RadioSetModem+0xaa>
        break;
 80073c8:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80073ca:	bf00      	nop
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20000284 	.word	0x20000284

080073d8 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f002 fa7f 	bl	80098e4 <SUBGRF_SetRfFrequency>
}
 80073e6:	bf00      	nop
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b090      	sub	sp, #64	; 0x40
 80073f2:	af0a      	add	r7, sp, #40	; 0x28
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	603b      	str	r3, [r7, #0]
 80073fa:	4613      	mov	r3, r2
 80073fc:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80073fe:	2301      	movs	r3, #1
 8007400:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8007402:	2300      	movs	r3, #0
 8007404:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8007406:	2300      	movs	r3, #0
 8007408:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 800740a:	f000 fddc 	bl	8007fc6 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800740e:	2000      	movs	r0, #0
 8007410:	f7ff ff86 	bl	8007320 <RadioSetModem>

    RadioSetChannel( freq );
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f7ff ffdf 	bl	80073d8 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800741a:	2301      	movs	r3, #1
 800741c:	9309      	str	r3, [sp, #36]	; 0x24
 800741e:	2300      	movs	r3, #0
 8007420:	9308      	str	r3, [sp, #32]
 8007422:	2300      	movs	r3, #0
 8007424:	9307      	str	r3, [sp, #28]
 8007426:	2300      	movs	r3, #0
 8007428:	9306      	str	r3, [sp, #24]
 800742a:	2300      	movs	r3, #0
 800742c:	9305      	str	r3, [sp, #20]
 800742e:	2300      	movs	r3, #0
 8007430:	9304      	str	r3, [sp, #16]
 8007432:	2300      	movs	r3, #0
 8007434:	9303      	str	r3, [sp, #12]
 8007436:	2300      	movs	r3, #0
 8007438:	9302      	str	r3, [sp, #8]
 800743a:	2303      	movs	r3, #3
 800743c:	9301      	str	r3, [sp, #4]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	2300      	movs	r3, #0
 8007444:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007448:	68b9      	ldr	r1, [r7, #8]
 800744a:	2000      	movs	r0, #0
 800744c:	f000 f83c 	bl	80074c8 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8007450:	2000      	movs	r0, #0
 8007452:	f000 fdbf 	bl	8007fd4 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8007456:	f000 ff55 	bl	8008304 <RadioGetWakeupTime>
 800745a:	4603      	mov	r3, r0
 800745c:	4618      	mov	r0, r3
 800745e:	f7f9 fb57 	bl	8000b10 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8007462:	f004 fad7 	bl	800ba14 <UTIL_TIMER_GetCurrentTime>
 8007466:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007468:	e00d      	b.n	8007486 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800746a:	2000      	movs	r0, #0
 800746c:	f000 fe9a 	bl	80081a4 <RadioRssi>
 8007470:	4603      	mov	r3, r0
 8007472:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8007474:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800747c:	429a      	cmp	r2, r3
 800747e:	dd02      	ble.n	8007486 <RadioIsChannelFree+0x98>
        {
            status = false;
 8007480:	2300      	movs	r3, #0
 8007482:	75fb      	strb	r3, [r7, #23]
            break;
 8007484:	e006      	b.n	8007494 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007486:	6938      	ldr	r0, [r7, #16]
 8007488:	f004 fad6 	bl	800ba38 <UTIL_TIMER_GetElapsedTime>
 800748c:	4602      	mov	r2, r0
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	4293      	cmp	r3, r2
 8007492:	d8ea      	bhi.n	800746a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8007494:	f000 fd97 	bl	8007fc6 <RadioStandby>

    return status;
 8007498:	7dfb      	ldrb	r3, [r7, #23]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80074a8:	2300      	movs	r3, #0
 80074aa:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80074ac:	2300      	movs	r3, #0
 80074ae:	2200      	movs	r2, #0
 80074b0:	2100      	movs	r1, #0
 80074b2:	2000      	movs	r0, #0
 80074b4:	f002 f9ba 	bl	800982c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80074b8:	f001 ff6f 	bl	800939a <SUBGRF_GetRandom>
 80074bc:	6078      	str	r0, [r7, #4]

    return rnd;
 80074be:	687b      	ldr	r3, [r7, #4]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08a      	sub	sp, #40	; 0x28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60b9      	str	r1, [r7, #8]
 80074d0:	607a      	str	r2, [r7, #4]
 80074d2:	461a      	mov	r2, r3
 80074d4:	4603      	mov	r3, r0
 80074d6:	73fb      	strb	r3, [r7, #15]
 80074d8:	4613      	mov	r3, r2
 80074da:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80074dc:	4ab9      	ldr	r2, [pc, #740]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 80074de:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80074e2:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80074e4:	f003 f829 	bl	800a53a <RFW_DeInit>
    if( rxContinuous == true )
 80074e8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80074f4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d004      	beq.n	8007506 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80074fc:	4ab2      	ldr	r2, [pc, #712]	; (80077c8 <RadioSetRxConfig+0x300>)
 80074fe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007502:	7013      	strb	r3, [r2, #0]
 8007504:	e002      	b.n	800750c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8007506:	4bb0      	ldr	r3, [pc, #704]	; (80077c8 <RadioSetRxConfig+0x300>)
 8007508:	22ff      	movs	r2, #255	; 0xff
 800750a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	2b05      	cmp	r3, #5
 8007510:	d009      	beq.n	8007526 <RadioSetRxConfig+0x5e>
 8007512:	2b05      	cmp	r3, #5
 8007514:	f300 81ca 	bgt.w	80078ac <RadioSetRxConfig+0x3e4>
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 80bf 	beq.w	800769c <RadioSetRxConfig+0x1d4>
 800751e:	2b01      	cmp	r3, #1
 8007520:	f000 8124 	beq.w	800776c <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8007524:	e1c2      	b.n	80078ac <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8007526:	2001      	movs	r0, #1
 8007528:	f002 f87c 	bl	8009624 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800752c:	4ba5      	ldr	r3, [pc, #660]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 800752e:	2200      	movs	r2, #0
 8007530:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007534:	4aa3      	ldr	r2, [pc, #652]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800753a:	4ba2      	ldr	r3, [pc, #648]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 800753c:	2209      	movs	r2, #9
 800753e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8007542:	4ba0      	ldr	r3, [pc, #640]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 8007544:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007548:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800754a:	68b8      	ldr	r0, [r7, #8]
 800754c:	f002 ff28 	bl	800a3a0 <SUBGRF_GetFskBandwidthRegValue>
 8007550:	4603      	mov	r3, r0
 8007552:	461a      	mov	r2, r3
 8007554:	4b9b      	ldr	r3, [pc, #620]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 8007556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800755a:	4b9a      	ldr	r3, [pc, #616]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 800755c:	2200      	movs	r2, #0
 800755e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007560:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	b29a      	uxth	r2, r3
 8007566:	4b97      	ldr	r3, [pc, #604]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 8007568:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800756a:	4b96      	ldr	r3, [pc, #600]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 800756c:	2200      	movs	r2, #0
 800756e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8007570:	4b94      	ldr	r3, [pc, #592]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 8007572:	2210      	movs	r2, #16
 8007574:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007576:	4b93      	ldr	r3, [pc, #588]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 8007578:	2200      	movs	r2, #0
 800757a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800757c:	4b91      	ldr	r3, [pc, #580]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 800757e:	2200      	movs	r2, #0
 8007580:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007582:	4b91      	ldr	r3, [pc, #580]	; (80077c8 <RadioSetRxConfig+0x300>)
 8007584:	781a      	ldrb	r2, [r3, #0]
 8007586:	4b8f      	ldr	r3, [pc, #572]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 8007588:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800758a:	4b8e      	ldr	r3, [pc, #568]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 800758c:	2201      	movs	r2, #1
 800758e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8007590:	4b8c      	ldr	r3, [pc, #560]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 8007592:	2200      	movs	r2, #0
 8007594:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8007596:	2005      	movs	r0, #5
 8007598:	f7ff fec2 	bl	8007320 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800759c:	488b      	ldr	r0, [pc, #556]	; (80077cc <RadioSetRxConfig+0x304>)
 800759e:	f002 fadb 	bl	8009b58 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80075a2:	488b      	ldr	r0, [pc, #556]	; (80077d0 <RadioSetRxConfig+0x308>)
 80075a4:	f002 fbaa 	bl	8009cfc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80075a8:	4a8a      	ldr	r2, [pc, #552]	; (80077d4 <RadioSetRxConfig+0x30c>)
 80075aa:	f107 031c 	add.w	r3, r7, #28
 80075ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80075b6:	f107 031c 	add.w	r3, r7, #28
 80075ba:	4618      	mov	r0, r3
 80075bc:	f001 fe6b 	bl	8009296 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80075c0:	f240 10ff 	movw	r0, #511	; 0x1ff
 80075c4:	f001 feb6 	bl	8009334 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80075c8:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80075cc:	f000 fe09 	bl	80081e2 <RadioRead>
 80075d0:	4603      	mov	r3, r0
 80075d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80075d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075da:	f023 0310 	bic.w	r3, r3, #16
 80075de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80075e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075e6:	4619      	mov	r1, r3
 80075e8:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80075ec:	f000 fde7 	bl	80081be <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80075f0:	2104      	movs	r1, #4
 80075f2:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80075f6:	f000 fde2 	bl	80081be <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80075fa:	f640 009b 	movw	r0, #2203	; 0x89b
 80075fe:	f000 fdf0 	bl	80081e2 <RadioRead>
 8007602:	4603      	mov	r3, r0
 8007604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800760c:	f023 031c 	bic.w	r3, r3, #28
 8007610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8007614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007618:	f043 0308 	orr.w	r3, r3, #8
 800761c:	b2db      	uxtb	r3, r3
 800761e:	4619      	mov	r1, r3
 8007620:	f640 009b 	movw	r0, #2203	; 0x89b
 8007624:	f000 fdcb 	bl	80081be <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8007628:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800762c:	f000 fdd9 	bl	80081e2 <RadioRead>
 8007630:	4603      	mov	r3, r0
 8007632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800763a:	f023 0318 	bic.w	r3, r3, #24
 800763e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8007642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007646:	f043 0318 	orr.w	r3, r3, #24
 800764a:	b2db      	uxtb	r3, r3
 800764c:	4619      	mov	r1, r3
 800764e:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007652:	f000 fdb4 	bl	80081be <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8007656:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800765a:	f000 fdc2 	bl	80081e2 <RadioRead>
 800765e:	4603      	mov	r3, r0
 8007660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8007664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8007670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007674:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8007678:	b2db      	uxtb	r3, r3
 800767a:	4619      	mov	r1, r3
 800767c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007680:	f000 fd9d 	bl	80081be <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007684:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007686:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800768a:	fb02 f303 	mul.w	r3, r2, r3
 800768e:	461a      	mov	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	fbb2 f3f3 	udiv	r3, r2, r3
 8007696:	4a4b      	ldr	r2, [pc, #300]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 8007698:	6093      	str	r3, [r2, #8]
            break;
 800769a:	e108      	b.n	80078ae <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800769c:	2000      	movs	r0, #0
 800769e:	f001 ffc1 	bl	8009624 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80076a2:	4b48      	ldr	r3, [pc, #288]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80076aa:	4a46      	ldr	r2, [pc, #280]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80076b0:	4b44      	ldr	r3, [pc, #272]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 80076b2:	220b      	movs	r2, #11
 80076b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80076b8:	68b8      	ldr	r0, [r7, #8]
 80076ba:	f002 fe71 	bl	800a3a0 <SUBGRF_GetFskBandwidthRegValue>
 80076be:	4603      	mov	r3, r0
 80076c0:	461a      	mov	r2, r3
 80076c2:	4b40      	ldr	r3, [pc, #256]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 80076c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80076c8:	4b3e      	ldr	r3, [pc, #248]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80076ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	4b3b      	ldr	r3, [pc, #236]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 80076d6:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80076d8:	4b3a      	ldr	r3, [pc, #232]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 80076da:	2204      	movs	r2, #4
 80076dc:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80076de:	4b39      	ldr	r3, [pc, #228]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 80076e0:	2218      	movs	r2, #24
 80076e2:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80076e4:	4b37      	ldr	r3, [pc, #220]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80076ea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80076ee:	f083 0301 	eor.w	r3, r3, #1
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	461a      	mov	r2, r3
 80076f6:	4b33      	ldr	r3, [pc, #204]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 80076f8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80076fa:	4b33      	ldr	r3, [pc, #204]	; (80077c8 <RadioSetRxConfig+0x300>)
 80076fc:	781a      	ldrb	r2, [r3, #0]
 80076fe:	4b31      	ldr	r3, [pc, #196]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 8007700:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8007702:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800770a:	4b2e      	ldr	r3, [pc, #184]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 800770c:	22f2      	movs	r2, #242	; 0xf2
 800770e:	75da      	strb	r2, [r3, #23]
 8007710:	e002      	b.n	8007718 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007712:	4b2c      	ldr	r3, [pc, #176]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 8007714:	2201      	movs	r2, #1
 8007716:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007718:	4b2a      	ldr	r3, [pc, #168]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 800771a:	2201      	movs	r2, #1
 800771c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800771e:	f000 fc52 	bl	8007fc6 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8007722:	2000      	movs	r0, #0
 8007724:	f7ff fdfc 	bl	8007320 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007728:	4828      	ldr	r0, [pc, #160]	; (80077cc <RadioSetRxConfig+0x304>)
 800772a:	f002 fa15 	bl	8009b58 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800772e:	4828      	ldr	r0, [pc, #160]	; (80077d0 <RadioSetRxConfig+0x308>)
 8007730:	f002 fae4 	bl	8009cfc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007734:	4a28      	ldr	r2, [pc, #160]	; (80077d8 <RadioSetRxConfig+0x310>)
 8007736:	f107 0314 	add.w	r3, r7, #20
 800773a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800773e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007742:	f107 0314 	add.w	r3, r7, #20
 8007746:	4618      	mov	r0, r3
 8007748:	f001 fda5 	bl	8009296 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800774c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007750:	f001 fdf0 	bl	8009334 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007754:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007756:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800775a:	fb02 f303 	mul.w	r3, r2, r3
 800775e:	461a      	mov	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	fbb2 f3f3 	udiv	r3, r2, r3
 8007766:	4a17      	ldr	r2, [pc, #92]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 8007768:	6093      	str	r3, [r2, #8]
            break;
 800776a:	e0a0      	b.n	80078ae <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800776c:	2000      	movs	r0, #0
 800776e:	f001 ff59 	bl	8009624 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007772:	4b14      	ldr	r3, [pc, #80]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	b2da      	uxtb	r2, r3
 800777e:	4b11      	ldr	r3, [pc, #68]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 8007780:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8007784:	4a15      	ldr	r2, [pc, #84]	; (80077dc <RadioSetRxConfig+0x314>)
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	4413      	add	r3, r2
 800778a:	781a      	ldrb	r2, [r3, #0]
 800778c:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 800778e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8007792:	4a0c      	ldr	r2, [pc, #48]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d105      	bne.n	80077ac <RadioSetRxConfig+0x2e4>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b0b      	cmp	r3, #11
 80077a4:	d008      	beq.n	80077b8 <RadioSetRxConfig+0x2f0>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b0c      	cmp	r3, #12
 80077aa:	d005      	beq.n	80077b8 <RadioSetRxConfig+0x2f0>
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d116      	bne.n	80077e0 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b0c      	cmp	r3, #12
 80077b6:	d113      	bne.n	80077e0 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80077b8:	4b02      	ldr	r3, [pc, #8]	; (80077c4 <RadioSetRxConfig+0x2fc>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80077c0:	e012      	b.n	80077e8 <RadioSetRxConfig+0x320>
 80077c2:	bf00      	nop
 80077c4:	20000284 	.word	0x20000284
 80077c8:	20000008 	.word	0x20000008
 80077cc:	200002bc 	.word	0x200002bc
 80077d0:	20000292 	.word	0x20000292
 80077d4:	0800c19c 	.word	0x0800c19c
 80077d8:	0800c1a4 	.word	0x0800c1a4
 80077dc:	0800c5d0 	.word	0x0800c5d0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80077e0:	4b35      	ldr	r3, [pc, #212]	; (80078b8 <RadioSetRxConfig+0x3f0>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80077e8:	4b33      	ldr	r3, [pc, #204]	; (80078b8 <RadioSetRxConfig+0x3f0>)
 80077ea:	2201      	movs	r2, #1
 80077ec:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80077ee:	4b32      	ldr	r3, [pc, #200]	; (80078b8 <RadioSetRxConfig+0x3f0>)
 80077f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077f4:	2b05      	cmp	r3, #5
 80077f6:	d004      	beq.n	8007802 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80077f8:	4b2f      	ldr	r3, [pc, #188]	; (80078b8 <RadioSetRxConfig+0x3f0>)
 80077fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80077fe:	2b06      	cmp	r3, #6
 8007800:	d10a      	bne.n	8007818 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8007802:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007804:	2b0b      	cmp	r3, #11
 8007806:	d803      	bhi.n	8007810 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007808:	4b2b      	ldr	r3, [pc, #172]	; (80078b8 <RadioSetRxConfig+0x3f0>)
 800780a:	220c      	movs	r2, #12
 800780c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800780e:	e006      	b.n	800781e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007810:	4a29      	ldr	r2, [pc, #164]	; (80078b8 <RadioSetRxConfig+0x3f0>)
 8007812:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007814:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007816:	e002      	b.n	800781e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007818:	4a27      	ldr	r2, [pc, #156]	; (80078b8 <RadioSetRxConfig+0x3f0>)
 800781a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800781c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800781e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007822:	4b25      	ldr	r3, [pc, #148]	; (80078b8 <RadioSetRxConfig+0x3f0>)
 8007824:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007826:	4b25      	ldr	r3, [pc, #148]	; (80078bc <RadioSetRxConfig+0x3f4>)
 8007828:	781a      	ldrb	r2, [r3, #0]
 800782a:	4b23      	ldr	r3, [pc, #140]	; (80078b8 <RadioSetRxConfig+0x3f0>)
 800782c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800782e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007832:	4b21      	ldr	r3, [pc, #132]	; (80078b8 <RadioSetRxConfig+0x3f0>)
 8007834:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007838:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800783c:	4b1e      	ldr	r3, [pc, #120]	; (80078b8 <RadioSetRxConfig+0x3f0>)
 800783e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007842:	f000 fbc0 	bl	8007fc6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007846:	2001      	movs	r0, #1
 8007848:	f7ff fd6a 	bl	8007320 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800784c:	481c      	ldr	r0, [pc, #112]	; (80078c0 <RadioSetRxConfig+0x3f8>)
 800784e:	f002 f983 	bl	8009b58 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007852:	481c      	ldr	r0, [pc, #112]	; (80078c4 <RadioSetRxConfig+0x3fc>)
 8007854:	f002 fa52 	bl	8009cfc <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8007858:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800785a:	b2db      	uxtb	r3, r3
 800785c:	4618      	mov	r0, r3
 800785e:	f001 fef0 	bl	8009642 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8007862:	4b15      	ldr	r3, [pc, #84]	; (80078b8 <RadioSetRxConfig+0x3f0>)
 8007864:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007868:	2b01      	cmp	r3, #1
 800786a:	d10d      	bne.n	8007888 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800786c:	f240 7036 	movw	r0, #1846	; 0x736
 8007870:	f002 fba0 	bl	8009fb4 <SUBGRF_ReadRegister>
 8007874:	4603      	mov	r3, r0
 8007876:	f023 0304 	bic.w	r3, r3, #4
 800787a:	b2db      	uxtb	r3, r3
 800787c:	4619      	mov	r1, r3
 800787e:	f240 7036 	movw	r0, #1846	; 0x736
 8007882:	f002 fb83 	bl	8009f8c <SUBGRF_WriteRegister>
 8007886:	e00c      	b.n	80078a2 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8007888:	f240 7036 	movw	r0, #1846	; 0x736
 800788c:	f002 fb92 	bl	8009fb4 <SUBGRF_ReadRegister>
 8007890:	4603      	mov	r3, r0
 8007892:	f043 0304 	orr.w	r3, r3, #4
 8007896:	b2db      	uxtb	r3, r3
 8007898:	4619      	mov	r1, r3
 800789a:	f240 7036 	movw	r0, #1846	; 0x736
 800789e:	f002 fb75 	bl	8009f8c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80078a2:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <RadioSetRxConfig+0x3f0>)
 80078a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078a8:	609a      	str	r2, [r3, #8]
            break;
 80078aa:	e000      	b.n	80078ae <RadioSetRxConfig+0x3e6>
            break;
 80078ac:	bf00      	nop
    }
}
 80078ae:	bf00      	nop
 80078b0:	3728      	adds	r7, #40	; 0x28
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20000284 	.word	0x20000284
 80078bc:	20000008 	.word	0x20000008
 80078c0:	200002bc 	.word	0x200002bc
 80078c4:	20000292 	.word	0x20000292

080078c8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60ba      	str	r2, [r7, #8]
 80078d0:	607b      	str	r3, [r7, #4]
 80078d2:	4603      	mov	r3, r0
 80078d4:	73fb      	strb	r3, [r7, #15]
 80078d6:	460b      	mov	r3, r1
 80078d8:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80078da:	f002 fe2e 	bl	800a53a <RFW_DeInit>
    switch( modem )
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	f000 80c7 	beq.w	8007a74 <RadioSetTxConfig+0x1ac>
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	f300 80d6 	bgt.w	8007a98 <RadioSetTxConfig+0x1d0>
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <RadioSetTxConfig+0x2e>
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d059      	beq.n	80079a8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80078f4:	e0d0      	b.n	8007a98 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80078f6:	4b74      	ldr	r3, [pc, #464]	; (8007ac8 <RadioSetTxConfig+0x200>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80078fe:	4a72      	ldr	r2, [pc, #456]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007900:	6a3b      	ldr	r3, [r7, #32]
 8007902:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007904:	4b70      	ldr	r3, [pc, #448]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007906:	220b      	movs	r2, #11
 8007908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f002 fd47 	bl	800a3a0 <SUBGRF_GetFskBandwidthRegValue>
 8007912:	4603      	mov	r3, r0
 8007914:	461a      	mov	r2, r3
 8007916:	4b6c      	ldr	r3, [pc, #432]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800791c:	4a6a      	ldr	r2, [pc, #424]	; (8007ac8 <RadioSetTxConfig+0x200>)
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007922:	4b69      	ldr	r3, [pc, #420]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007924:	2200      	movs	r2, #0
 8007926:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007928:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	b29a      	uxth	r2, r3
 800792e:	4b66      	ldr	r3, [pc, #408]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007930:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007932:	4b65      	ldr	r3, [pc, #404]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007934:	2204      	movs	r2, #4
 8007936:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8007938:	4b63      	ldr	r3, [pc, #396]	; (8007ac8 <RadioSetTxConfig+0x200>)
 800793a:	2218      	movs	r2, #24
 800793c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800793e:	4b62      	ldr	r3, [pc, #392]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007940:	2200      	movs	r2, #0
 8007942:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007944:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007948:	f083 0301 	eor.w	r3, r3, #1
 800794c:	b2db      	uxtb	r3, r3
 800794e:	461a      	mov	r2, r3
 8007950:	4b5d      	ldr	r3, [pc, #372]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007952:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8007954:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800795c:	4b5a      	ldr	r3, [pc, #360]	; (8007ac8 <RadioSetTxConfig+0x200>)
 800795e:	22f2      	movs	r2, #242	; 0xf2
 8007960:	75da      	strb	r2, [r3, #23]
 8007962:	e002      	b.n	800796a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007964:	4b58      	ldr	r3, [pc, #352]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007966:	2201      	movs	r2, #1
 8007968:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800796a:	4b57      	ldr	r3, [pc, #348]	; (8007ac8 <RadioSetTxConfig+0x200>)
 800796c:	2201      	movs	r2, #1
 800796e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007970:	f000 fb29 	bl	8007fc6 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8007974:	2000      	movs	r0, #0
 8007976:	f7ff fcd3 	bl	8007320 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800797a:	4854      	ldr	r0, [pc, #336]	; (8007acc <RadioSetTxConfig+0x204>)
 800797c:	f002 f8ec 	bl	8009b58 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007980:	4853      	ldr	r0, [pc, #332]	; (8007ad0 <RadioSetTxConfig+0x208>)
 8007982:	f002 f9bb 	bl	8009cfc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007986:	4a53      	ldr	r2, [pc, #332]	; (8007ad4 <RadioSetTxConfig+0x20c>)
 8007988:	f107 0310 	add.w	r3, r7, #16
 800798c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007990:	e883 0003 	stmia.w	r3, {r0, r1}
 8007994:	f107 0310 	add.w	r3, r7, #16
 8007998:	4618      	mov	r0, r3
 800799a:	f001 fc7c 	bl	8009296 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800799e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80079a2:	f001 fcc7 	bl	8009334 <SUBGRF_SetWhiteningSeed>
            break;
 80079a6:	e078      	b.n	8007a9a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80079a8:	4b47      	ldr	r3, [pc, #284]	; (8007ac8 <RadioSetTxConfig+0x200>)
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	4b44      	ldr	r3, [pc, #272]	; (8007ac8 <RadioSetTxConfig+0x200>)
 80079b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80079ba:	4a47      	ldr	r2, [pc, #284]	; (8007ad8 <RadioSetTxConfig+0x210>)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4413      	add	r3, r2
 80079c0:	781a      	ldrb	r2, [r3, #0]
 80079c2:	4b41      	ldr	r3, [pc, #260]	; (8007ac8 <RadioSetTxConfig+0x200>)
 80079c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80079c8:	4a3f      	ldr	r2, [pc, #252]	; (8007ac8 <RadioSetTxConfig+0x200>)
 80079ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80079ce:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d105      	bne.n	80079e4 <RadioSetTxConfig+0x11c>
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	2b0b      	cmp	r3, #11
 80079dc:	d008      	beq.n	80079f0 <RadioSetTxConfig+0x128>
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	2b0c      	cmp	r3, #12
 80079e2:	d005      	beq.n	80079f0 <RadioSetTxConfig+0x128>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d107      	bne.n	80079fa <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	2b0c      	cmp	r3, #12
 80079ee:	d104      	bne.n	80079fa <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80079f0:	4b35      	ldr	r3, [pc, #212]	; (8007ac8 <RadioSetTxConfig+0x200>)
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80079f8:	e003      	b.n	8007a02 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80079fa:	4b33      	ldr	r3, [pc, #204]	; (8007ac8 <RadioSetTxConfig+0x200>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007a02:	4b31      	ldr	r3, [pc, #196]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007a04:	2201      	movs	r2, #1
 8007a06:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007a08:	4b2f      	ldr	r3, [pc, #188]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007a0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a0e:	2b05      	cmp	r3, #5
 8007a10:	d004      	beq.n	8007a1c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007a12:	4b2d      	ldr	r3, [pc, #180]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007a14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007a18:	2b06      	cmp	r3, #6
 8007a1a:	d10a      	bne.n	8007a32 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8007a1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a1e:	2b0b      	cmp	r3, #11
 8007a20:	d803      	bhi.n	8007a2a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007a22:	4b29      	ldr	r3, [pc, #164]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007a24:	220c      	movs	r2, #12
 8007a26:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007a28:	e006      	b.n	8007a38 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007a2a:	4a27      	ldr	r2, [pc, #156]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007a2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a2e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007a30:	e002      	b.n	8007a38 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007a32:	4a25      	ldr	r2, [pc, #148]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007a34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a36:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007a38:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007a3c:	4b22      	ldr	r3, [pc, #136]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007a3e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007a40:	4b26      	ldr	r3, [pc, #152]	; (8007adc <RadioSetTxConfig+0x214>)
 8007a42:	781a      	ldrb	r2, [r3, #0]
 8007a44:	4b20      	ldr	r3, [pc, #128]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007a46:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007a48:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007a4c:	4b1e      	ldr	r3, [pc, #120]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007a4e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007a52:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007a56:	4b1c      	ldr	r3, [pc, #112]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007a58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007a5c:	f000 fab3 	bl	8007fc6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007a60:	2001      	movs	r0, #1
 8007a62:	f7ff fc5d 	bl	8007320 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007a66:	4819      	ldr	r0, [pc, #100]	; (8007acc <RadioSetTxConfig+0x204>)
 8007a68:	f002 f876 	bl	8009b58 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007a6c:	4818      	ldr	r0, [pc, #96]	; (8007ad0 <RadioSetTxConfig+0x208>)
 8007a6e:	f002 f945 	bl	8009cfc <SUBGRF_SetPacketParams>
            break;
 8007a72:	e012      	b.n	8007a9a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8007a74:	2004      	movs	r0, #4
 8007a76:	f7ff fc53 	bl	8007320 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007a7a:	4b13      	ldr	r3, [pc, #76]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8007a82:	4a11      	ldr	r2, [pc, #68]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007a88:	4b0f      	ldr	r3, [pc, #60]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007a8a:	2216      	movs	r2, #22
 8007a8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007a90:	480e      	ldr	r0, [pc, #56]	; (8007acc <RadioSetTxConfig+0x204>)
 8007a92:	f002 f861 	bl	8009b58 <SUBGRF_SetModulationParams>
            break;
 8007a96:	e000      	b.n	8007a9a <RadioSetTxConfig+0x1d2>
            break;
 8007a98:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007a9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f002 fb90 	bl	800a1c4 <SUBGRF_SetRfTxPower>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	4b07      	ldr	r3, [pc, #28]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007aaa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8007aae:	4b06      	ldr	r3, [pc, #24]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007ab0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f002 fd54 	bl	800a562 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007aba:	4a03      	ldr	r2, [pc, #12]	; (8007ac8 <RadioSetTxConfig+0x200>)
 8007abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007abe:	6053      	str	r3, [r2, #4]
}
 8007ac0:	bf00      	nop
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	20000284 	.word	0x20000284
 8007acc:	200002bc 	.word	0x200002bc
 8007ad0:	20000292 	.word	0x20000292
 8007ad4:	0800c1a4 	.word	0x0800c1a4
 8007ad8:	0800c5d0 	.word	0x0800c5d0
 8007adc:	20000008 	.word	0x20000008

08007ae0 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
    return true;
 8007ae8:	2301      	movs	r3, #1
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bc80      	pop	{r7}
 8007af2:	4770      	bx	lr

08007af4 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	2b0a      	cmp	r3, #10
 8007b06:	d83e      	bhi.n	8007b86 <RadioGetLoRaBandwidthInHz+0x92>
 8007b08:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <RadioGetLoRaBandwidthInHz+0x1c>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b3d 	.word	0x08007b3d
 8007b14:	08007b4d 	.word	0x08007b4d
 8007b18:	08007b5d 	.word	0x08007b5d
 8007b1c:	08007b6d 	.word	0x08007b6d
 8007b20:	08007b75 	.word	0x08007b75
 8007b24:	08007b7b 	.word	0x08007b7b
 8007b28:	08007b81 	.word	0x08007b81
 8007b2c:	08007b87 	.word	0x08007b87
 8007b30:	08007b45 	.word	0x08007b45
 8007b34:	08007b55 	.word	0x08007b55
 8007b38:	08007b65 	.word	0x08007b65
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007b3c:	f641 6384 	movw	r3, #7812	; 0x1e84
 8007b40:	60fb      	str	r3, [r7, #12]
        break;
 8007b42:	e020      	b.n	8007b86 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8007b44:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8007b48:	60fb      	str	r3, [r7, #12]
        break;
 8007b4a:	e01c      	b.n	8007b86 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007b4c:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007b50:	60fb      	str	r3, [r7, #12]
        break;
 8007b52:	e018      	b.n	8007b86 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8007b54:	f245 1361 	movw	r3, #20833	; 0x5161
 8007b58:	60fb      	str	r3, [r7, #12]
        break;
 8007b5a:	e014      	b.n	8007b86 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8007b5c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007b60:	60fb      	str	r3, [r7, #12]
        break;
 8007b62:	e010      	b.n	8007b86 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8007b64:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8007b68:	60fb      	str	r3, [r7, #12]
        break;
 8007b6a:	e00c      	b.n	8007b86 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8007b6c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007b70:	60fb      	str	r3, [r7, #12]
        break;
 8007b72:	e008      	b.n	8007b86 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8007b74:	4b07      	ldr	r3, [pc, #28]	; (8007b94 <RadioGetLoRaBandwidthInHz+0xa0>)
 8007b76:	60fb      	str	r3, [r7, #12]
        break;
 8007b78:	e005      	b.n	8007b86 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8007b7a:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <RadioGetLoRaBandwidthInHz+0xa4>)
 8007b7c:	60fb      	str	r3, [r7, #12]
        break;
 8007b7e:	e002      	b.n	8007b86 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8007b80:	4b06      	ldr	r3, [pc, #24]	; (8007b9c <RadioGetLoRaBandwidthInHz+0xa8>)
 8007b82:	60fb      	str	r3, [r7, #12]
        break;
 8007b84:	bf00      	nop
    }

    return bandwidthInHz;
 8007b86:	68fb      	ldr	r3, [r7, #12]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bc80      	pop	{r7}
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	0001e848 	.word	0x0001e848
 8007b98:	0003d090 	.word	0x0003d090
 8007b9c:	0007a120 	.word	0x0007a120

08007ba0 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	4608      	mov	r0, r1
 8007baa:	4611      	mov	r1, r2
 8007bac:	461a      	mov	r2, r3
 8007bae:	4603      	mov	r3, r0
 8007bb0:	70fb      	strb	r3, [r7, #3]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	803b      	strh	r3, [r7, #0]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8007bba:	883b      	ldrh	r3, [r7, #0]
 8007bbc:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007bbe:	78ba      	ldrb	r2, [r7, #2]
 8007bc0:	f082 0201 	eor.w	r2, r2, #1
 8007bc4:	b2d2      	uxtb	r2, r2
 8007bc6:	2a00      	cmp	r2, #0
 8007bc8:	d001      	beq.n	8007bce <RadioGetGfskTimeOnAirNumerator+0x2e>
 8007bca:	2208      	movs	r2, #8
 8007bcc:	e000      	b.n	8007bd0 <RadioGetGfskTimeOnAirNumerator+0x30>
 8007bce:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8007bd0:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007bd2:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8007bd6:	7c3b      	ldrb	r3, [r7, #16]
 8007bd8:	7d39      	ldrb	r1, [r7, #20]
 8007bda:	2900      	cmp	r1, #0
 8007bdc:	d001      	beq.n	8007be2 <RadioGetGfskTimeOnAirNumerator+0x42>
 8007bde:	2102      	movs	r1, #2
 8007be0:	e000      	b.n	8007be4 <RadioGetGfskTimeOnAirNumerator+0x44>
 8007be2:	2100      	movs	r1, #0
 8007be4:	440b      	add	r3, r1
 8007be6:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007be8:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bc80      	pop	{r7}
 8007bf2:	4770      	bx	lr

08007bf4 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b08b      	sub	sp, #44	; 0x2c
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	4611      	mov	r1, r2
 8007c00:	461a      	mov	r2, r3
 8007c02:	460b      	mov	r3, r1
 8007c04:	71fb      	strb	r3, [r7, #7]
 8007c06:	4613      	mov	r3, r2
 8007c08:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8007c10:	2300      	movs	r3, #0
 8007c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2b05      	cmp	r3, #5
 8007c1a:	d002      	beq.n	8007c22 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b06      	cmp	r3, #6
 8007c20:	d104      	bne.n	8007c2c <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8007c22:	88bb      	ldrh	r3, [r7, #4]
 8007c24:	2b0b      	cmp	r3, #11
 8007c26:	d801      	bhi.n	8007c2c <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8007c28:	230c      	movs	r3, #12
 8007c2a:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d105      	bne.n	8007c3e <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2b0b      	cmp	r3, #11
 8007c36:	d008      	beq.n	8007c4a <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2b0c      	cmp	r3, #12
 8007c3c:	d005      	beq.n	8007c4a <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d105      	bne.n	8007c50 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2b0c      	cmp	r3, #12
 8007c48:	d102      	bne.n	8007c50 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007c50:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007c54:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8007c56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007c5a:	2a00      	cmp	r2, #0
 8007c5c:	d001      	beq.n	8007c62 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8007c5e:	2210      	movs	r2, #16
 8007c60:	e000      	b.n	8007c64 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8007c62:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007c64:	4413      	add	r3, r2
 8007c66:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8007c6c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8007c6e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007c72:	2a00      	cmp	r2, #0
 8007c74:	d001      	beq.n	8007c7a <RadioGetLoRaTimeOnAirNumerator+0x86>
 8007c76:	2200      	movs	r2, #0
 8007c78:	e000      	b.n	8007c7c <RadioGetLoRaTimeOnAirNumerator+0x88>
 8007c7a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8007c7c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007c7e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2b06      	cmp	r3, #6
 8007c84:	d803      	bhi.n	8007c8e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	623b      	str	r3, [r7, #32]
 8007c8c:	e00e      	b.n	8007cac <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	3308      	adds	r3, #8
 8007c92:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8007c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d004      	beq.n	8007ca6 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	3b02      	subs	r3, #2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	623b      	str	r3, [r7, #32]
 8007ca4:	e002      	b.n	8007cac <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	da01      	bge.n	8007cb6 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8007cb6:	69fa      	ldr	r2, [r7, #28]
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	4413      	add	r3, r2
 8007cbc:	1e5a      	subs	r2, r3, #1
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	fb03 f202 	mul.w	r2, r3, r2
 8007cca:	88bb      	ldrh	r3, [r7, #4]
 8007ccc:	4413      	add	r3, r2
    int32_t intermediate =
 8007cce:	330c      	adds	r3, #12
 8007cd0:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2b06      	cmp	r3, #6
 8007cd6:	d802      	bhi.n	8007cde <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	3302      	adds	r3, #2
 8007cdc:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	1c5a      	adds	r2, r3, #1
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	3b02      	subs	r3, #2
 8007ce8:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	372c      	adds	r7, #44	; 0x2c
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bc80      	pop	{r7}
 8007cf4:	4770      	bx	lr
	...

08007cf8 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08a      	sub	sp, #40	; 0x28
 8007cfc:	af04      	add	r7, sp, #16
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	607a      	str	r2, [r7, #4]
 8007d02:	461a      	mov	r2, r3
 8007d04:	4603      	mov	r3, r0
 8007d06:	73fb      	strb	r3, [r7, #15]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8007d10:	2301      	movs	r3, #1
 8007d12:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <RadioTimeOnAir+0x28>
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d017      	beq.n	8007d4e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8007d1e:	e035      	b.n	8007d8c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8007d20:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8007d24:	8c3a      	ldrh	r2, [r7, #32]
 8007d26:	7bb9      	ldrb	r1, [r7, #14]
 8007d28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	4603      	mov	r3, r0
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff ff32 	bl	8007ba0 <RadioGetGfskTimeOnAirNumerator>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d42:	fb02 f303 	mul.w	r3, r2, r3
 8007d46:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	613b      	str	r3, [r7, #16]
        break;
 8007d4c:	e01e      	b.n	8007d8c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8007d4e:	8c39      	ldrh	r1, [r7, #32]
 8007d50:	7bba      	ldrb	r2, [r7, #14]
 8007d52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d56:	9302      	str	r3, [sp, #8]
 8007d58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d5c:	9301      	str	r3, [sp, #4]
 8007d5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	460b      	mov	r3, r1
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	68b8      	ldr	r0, [r7, #8]
 8007d6a:	f7ff ff43 	bl	8007bf4 <RadioGetLoRaTimeOnAirNumerator>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d74:	fb02 f303 	mul.w	r3, r2, r3
 8007d78:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8007d7a:	4a0a      	ldr	r2, [pc, #40]	; (8007da4 <RadioTimeOnAir+0xac>)
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	4413      	add	r3, r2
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7ff feb6 	bl	8007af4 <RadioGetLoRaBandwidthInHz>
 8007d88:	6138      	str	r0, [r7, #16]
        break;
 8007d8a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	4413      	add	r3, r2
 8007d92:	1e5a      	subs	r2, r3, #1
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	0800c5d0 	.word	0x0800c5d0

08007da8 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8007db4:	2300      	movs	r3, #0
 8007db6:	2200      	movs	r2, #0
 8007db8:	f240 2101 	movw	r1, #513	; 0x201
 8007dbc:	f240 2001 	movw	r0, #513	; 0x201
 8007dc0:	f001 fd34 	bl	800982c <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007dc4:	4b71      	ldr	r3, [pc, #452]	; (8007f8c <RadioSend+0x1e4>)
 8007dc6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007dca:	2101      	movs	r1, #1
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f002 f9d1 	bl	800a174 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007dd2:	4b6e      	ldr	r3, [pc, #440]	; (8007f8c <RadioSend+0x1e4>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d112      	bne.n	8007e00 <RadioSend+0x58>
 8007dda:	4b6c      	ldr	r3, [pc, #432]	; (8007f8c <RadioSend+0x1e4>)
 8007ddc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007de0:	2b06      	cmp	r3, #6
 8007de2:	d10d      	bne.n	8007e00 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007de4:	f640 0089 	movw	r0, #2185	; 0x889
 8007de8:	f002 f8e4 	bl	8009fb4 <SUBGRF_ReadRegister>
 8007dec:	4603      	mov	r3, r0
 8007dee:	f023 0304 	bic.w	r3, r3, #4
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	4619      	mov	r1, r3
 8007df6:	f640 0089 	movw	r0, #2185	; 0x889
 8007dfa:	f002 f8c7 	bl	8009f8c <SUBGRF_WriteRegister>
 8007dfe:	e00c      	b.n	8007e1a <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8007e00:	f640 0089 	movw	r0, #2185	; 0x889
 8007e04:	f002 f8d6 	bl	8009fb4 <SUBGRF_ReadRegister>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f043 0304 	orr.w	r3, r3, #4
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	4619      	mov	r1, r3
 8007e12:	f640 0089 	movw	r0, #2185	; 0x889
 8007e16:	f002 f8b9 	bl	8009f8c <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8007e1a:	4b5c      	ldr	r3, [pc, #368]	; (8007f8c <RadioSend+0x1e4>)
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	f200 80a7 	bhi.w	8007f72 <RadioSend+0x1ca>
 8007e24:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <RadioSend+0x84>)
 8007e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2a:	bf00      	nop
 8007e2c:	08007e5b 	.word	0x08007e5b
 8007e30:	08007e41 	.word	0x08007e41
 8007e34:	08007e5b 	.word	0x08007e5b
 8007e38:	08007ebb 	.word	0x08007ebb
 8007e3c:	08007edb 	.word	0x08007edb
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8007e40:	4a52      	ldr	r2, [pc, #328]	; (8007f8c <RadioSend+0x1e4>)
 8007e42:	78fb      	ldrb	r3, [r7, #3]
 8007e44:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007e46:	4852      	ldr	r0, [pc, #328]	; (8007f90 <RadioSend+0x1e8>)
 8007e48:	f001 ff58 	bl	8009cfc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f001 fa0c 	bl	8009270 <SUBGRF_SendPayload>
            break;
 8007e58:	e08c      	b.n	8007f74 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8007e5a:	f002 fb74 	bl	800a546 <RFW_Is_Init>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d11d      	bne.n	8007ea0 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007e64:	f107 020d 	add.w	r2, r7, #13
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f002 fb82 	bl	800a576 <RFW_TransmitInit>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10c      	bne.n	8007e92 <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8007e78:	7b7a      	ldrb	r2, [r7, #13]
 8007e7a:	4b44      	ldr	r3, [pc, #272]	; (8007f8c <RadioSend+0x1e4>)
 8007e7c:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007e7e:	4844      	ldr	r0, [pc, #272]	; (8007f90 <RadioSend+0x1e8>)
 8007e80:	f001 ff3c 	bl	8009cfc <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8007e84:	7b7b      	ldrb	r3, [r7, #13]
 8007e86:	2200      	movs	r2, #0
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 f9f0 	bl	8009270 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8007e90:	e070      	b.n	8007f74 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8007e92:	4b40      	ldr	r3, [pc, #256]	; (8007f94 <RadioSend+0x1ec>)
 8007e94:	2201      	movs	r2, #1
 8007e96:	2100      	movs	r1, #0
 8007e98:	2002      	movs	r0, #2
 8007e9a:	f003 fe99 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
 8007e9e:	e072      	b.n	8007f86 <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8007ea0:	4a3a      	ldr	r2, [pc, #232]	; (8007f8c <RadioSend+0x1e4>)
 8007ea2:	78fb      	ldrb	r3, [r7, #3]
 8007ea4:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ea6:	483a      	ldr	r0, [pc, #232]	; (8007f90 <RadioSend+0x1e8>)
 8007ea8:	f001 ff28 	bl	8009cfc <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 f9dc 	bl	8009270 <SUBGRF_SendPayload>
            break;
 8007eb8:	e05c      	b.n	8007f74 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007eba:	4b34      	ldr	r3, [pc, #208]	; (8007f8c <RadioSend+0x1e4>)
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8007ec0:	4a32      	ldr	r2, [pc, #200]	; (8007f8c <RadioSend+0x1e4>)
 8007ec2:	78fb      	ldrb	r3, [r7, #3]
 8007ec4:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ec6:	4832      	ldr	r0, [pc, #200]	; (8007f90 <RadioSend+0x1e8>)
 8007ec8:	f001 ff18 	bl	8009cfc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f001 f9cc 	bl	8009270 <SUBGRF_SendPayload>
            break;
 8007ed8:	e04c      	b.n	8007f74 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8007eda:	78fb      	ldrb	r3, [r7, #3]
 8007edc:	461a      	mov	r2, r3
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	482d      	ldr	r0, [pc, #180]	; (8007f98 <RadioSend+0x1f0>)
 8007ee2:	f000 fcbc 	bl	800885e <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007ee6:	4b29      	ldr	r3, [pc, #164]	; (8007f8c <RadioSend+0x1e4>)
 8007ee8:	2202      	movs	r2, #2
 8007eea:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8007eec:	78fb      	ldrb	r3, [r7, #3]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	4b26      	ldr	r3, [pc, #152]	; (8007f8c <RadioSend+0x1e4>)
 8007ef4:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ef6:	4826      	ldr	r0, [pc, #152]	; (8007f90 <RadioSend+0x1e8>)
 8007ef8:	f001 ff00 	bl	8009cfc <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8007efc:	2100      	movs	r1, #0
 8007efe:	20f1      	movs	r0, #241	; 0xf1
 8007f00:	f000 f95d 	bl	80081be <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8007f04:	2100      	movs	r1, #0
 8007f06:	20f0      	movs	r0, #240	; 0xf0
 8007f08:	f000 f959 	bl	80081be <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8007f0c:	4b1f      	ldr	r3, [pc, #124]	; (8007f8c <RadioSend+0x1e4>)
 8007f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f10:	2b64      	cmp	r3, #100	; 0x64
 8007f12:	d108      	bne.n	8007f26 <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8007f14:	2170      	movs	r1, #112	; 0x70
 8007f16:	20f3      	movs	r0, #243	; 0xf3
 8007f18:	f000 f951 	bl	80081be <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8007f1c:	211d      	movs	r1, #29
 8007f1e:	20f2      	movs	r0, #242	; 0xf2
 8007f20:	f000 f94d 	bl	80081be <RadioWrite>
 8007f24:	e007      	b.n	8007f36 <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8007f26:	21e1      	movs	r1, #225	; 0xe1
 8007f28:	20f3      	movs	r0, #243	; 0xf3
 8007f2a:	f000 f948 	bl	80081be <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8007f2e:	2104      	movs	r1, #4
 8007f30:	20f2      	movs	r0, #242	; 0xf2
 8007f32:	f000 f944 	bl	80081be <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007f36:	78fb      	ldrb	r3, [r7, #3]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	00db      	lsls	r3, r3, #3
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	3302      	adds	r3, #2
 8007f40:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8007f42:	89fb      	ldrh	r3, [r7, #14]
 8007f44:	0a1b      	lsrs	r3, r3, #8
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	20f4      	movs	r0, #244	; 0xf4
 8007f4e:	f000 f936 	bl	80081be <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8007f52:	89fb      	ldrh	r3, [r7, #14]
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	4619      	mov	r1, r3
 8007f58:	20f5      	movs	r0, #245	; 0xf5
 8007f5a:	f000 f930 	bl	80081be <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	3301      	adds	r3, #1
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007f68:	4619      	mov	r1, r3
 8007f6a:	480b      	ldr	r0, [pc, #44]	; (8007f98 <RadioSend+0x1f0>)
 8007f6c:	f001 f980 	bl	8009270 <SUBGRF_SendPayload>
            break;
 8007f70:	e000      	b.n	8007f74 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007f72:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8007f74:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <RadioSend+0x1e4>)
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4808      	ldr	r0, [pc, #32]	; (8007f9c <RadioSend+0x1f4>)
 8007f7c:	f003 fca0 	bl	800b8c0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8007f80:	4806      	ldr	r0, [pc, #24]	; (8007f9c <RadioSend+0x1f4>)
 8007f82:	f003 fbbf 	bl	800b704 <UTIL_TIMER_Start>
}
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	20000284 	.word	0x20000284
 8007f90:	20000292 	.word	0x20000292
 8007f94:	0800c1ac 	.word	0x0800c1ac
 8007f98:	20000180 	.word	0x20000180
 8007f9c:	200002e0 	.word	0x200002e0

08007fa0 <RadioSleep>:

static void RadioSleep( void )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8007faa:	793b      	ldrb	r3, [r7, #4]
 8007fac:	f043 0304 	orr.w	r3, r3, #4
 8007fb0:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8007fb2:	7938      	ldrb	r0, [r7, #4]
 8007fb4:	f001 fa38 	bl	8009428 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8007fb8:	2002      	movs	r0, #2
 8007fba:	f7f8 fda9 	bl	8000b10 <HAL_Delay>
}
 8007fbe:	bf00      	nop
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <RadioStandby>:

static void RadioStandby( void )
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8007fca:	2000      	movs	r0, #0
 8007fcc:	f001 fa5e 	bl	800948c <SUBGRF_SetStandby>
}
 8007fd0:	bf00      	nop
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8007fdc:	f002 fab3 	bl	800a546 <RFW_Is_Init>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d102      	bne.n	8007fec <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8007fe6:	f002 fad6 	bl	800a596 <RFW_ReceiveInit>
 8007fea:	e007      	b.n	8007ffc <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007fec:	2300      	movs	r3, #0
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f240 2162 	movw	r1, #610	; 0x262
 8007ff4:	f240 2062 	movw	r0, #610	; 0x262
 8007ff8:	f001 fc18 	bl	800982c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d006      	beq.n	8008010 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008002:	6879      	ldr	r1, [r7, #4]
 8008004:	4811      	ldr	r0, [pc, #68]	; (800804c <RadioRx+0x78>)
 8008006:	f003 fc5b 	bl	800b8c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800800a:	4810      	ldr	r0, [pc, #64]	; (800804c <RadioRx+0x78>)
 800800c:	f003 fb7a 	bl	800b704 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008010:	4b0f      	ldr	r3, [pc, #60]	; (8008050 <RadioRx+0x7c>)
 8008012:	2200      	movs	r2, #0
 8008014:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008016:	4b0e      	ldr	r3, [pc, #56]	; (8008050 <RadioRx+0x7c>)
 8008018:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800801c:	2100      	movs	r1, #0
 800801e:	4618      	mov	r0, r3
 8008020:	f002 f8a8 	bl	800a174 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8008024:	4b0a      	ldr	r3, [pc, #40]	; (8008050 <RadioRx+0x7c>)
 8008026:	785b      	ldrb	r3, [r3, #1]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d004      	beq.n	8008036 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800802c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008030:	f001 fa68 	bl	8009504 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008034:	e005      	b.n	8008042 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008036:	4b06      	ldr	r3, [pc, #24]	; (8008050 <RadioRx+0x7c>)
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	019b      	lsls	r3, r3, #6
 800803c:	4618      	mov	r0, r3
 800803e:	f001 fa61 	bl	8009504 <SUBGRF_SetRx>
}
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	200002f8 	.word	0x200002f8
 8008050:	20000284 	.word	0x20000284

08008054 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 800805c:	f002 fa73 	bl	800a546 <RFW_Is_Init>
 8008060:	4603      	mov	r3, r0
 8008062:	2b01      	cmp	r3, #1
 8008064:	d102      	bne.n	800806c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8008066:	f002 fa96 	bl	800a596 <RFW_ReceiveInit>
 800806a:	e007      	b.n	800807c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800806c:	2300      	movs	r3, #0
 800806e:	2200      	movs	r2, #0
 8008070:	f240 2162 	movw	r1, #610	; 0x262
 8008074:	f240 2062 	movw	r0, #610	; 0x262
 8008078:	f001 fbd8 	bl	800982c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d006      	beq.n	8008090 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008082:	6879      	ldr	r1, [r7, #4]
 8008084:	4811      	ldr	r0, [pc, #68]	; (80080cc <RadioRxBoosted+0x78>)
 8008086:	f003 fc1b 	bl	800b8c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800808a:	4810      	ldr	r0, [pc, #64]	; (80080cc <RadioRxBoosted+0x78>)
 800808c:	f003 fb3a 	bl	800b704 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008090:	4b0f      	ldr	r3, [pc, #60]	; (80080d0 <RadioRxBoosted+0x7c>)
 8008092:	2200      	movs	r2, #0
 8008094:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008096:	4b0e      	ldr	r3, [pc, #56]	; (80080d0 <RadioRxBoosted+0x7c>)
 8008098:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800809c:	2100      	movs	r1, #0
 800809e:	4618      	mov	r0, r3
 80080a0:	f002 f868 	bl	800a174 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80080a4:	4b0a      	ldr	r3, [pc, #40]	; (80080d0 <RadioRxBoosted+0x7c>)
 80080a6:	785b      	ldrb	r3, [r3, #1]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d004      	beq.n	80080b6 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80080ac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80080b0:	f001 fa48 	bl	8009544 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80080b4:	e005      	b.n	80080c2 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80080b6:	4b06      	ldr	r3, [pc, #24]	; (80080d0 <RadioRxBoosted+0x7c>)
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	019b      	lsls	r3, r3, #6
 80080bc:	4618      	mov	r0, r3
 80080be:	f001 fa41 	bl	8009544 <SUBGRF_SetRxBoosted>
}
 80080c2:	bf00      	nop
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	200002f8 	.word	0x200002f8
 80080d0:	20000284 	.word	0x20000284

080080d4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	005a      	lsls	r2, r3, #1
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	4413      	add	r3, r2
 80080e6:	4a0c      	ldr	r2, [pc, #48]	; (8008118 <RadioSetRxDutyCycle+0x44>)
 80080e8:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80080ea:	2300      	movs	r3, #0
 80080ec:	2200      	movs	r2, #0
 80080ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80080f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80080f6:	f001 fb99 	bl	800982c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80080fa:	4b07      	ldr	r3, [pc, #28]	; (8008118 <RadioSetRxDutyCycle+0x44>)
 80080fc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008100:	2100      	movs	r1, #0
 8008102:	4618      	mov	r0, r3
 8008104:	f002 f836 	bl	800a174 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 fa3e 	bl	800958c <SUBGRF_SetRxDutyCycle>
}
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	20000284 	.word	0x20000284

0800811c <RadioStartCad>:

static void RadioStartCad( void )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008120:	4b09      	ldr	r3, [pc, #36]	; (8008148 <RadioStartCad+0x2c>)
 8008122:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008126:	2100      	movs	r1, #0
 8008128:	4618      	mov	r0, r3
 800812a:	f002 f823 	bl	800a174 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800812e:	2300      	movs	r3, #0
 8008130:	2200      	movs	r2, #0
 8008132:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008136:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800813a:	f001 fb77 	bl	800982c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800813e:	f001 fa51 	bl	80095e4 <SUBGRF_SetCad>
}
 8008142:	bf00      	nop
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	20000284 	.word	0x20000284

0800814c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	70fb      	strb	r3, [r7, #3]
 8008158:	4613      	mov	r3, r2
 800815a:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 800815c:	883b      	ldrh	r3, [r7, #0]
 800815e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008162:	fb02 f303 	mul.w	r3, r2, r3
 8008166:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f001 fbbb 	bl	80098e4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800816e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008172:	4618      	mov	r0, r3
 8008174:	f002 f826 	bl	800a1c4 <SUBGRF_SetRfTxPower>
 8008178:	4603      	mov	r3, r0
 800817a:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800817c:	7afb      	ldrb	r3, [r7, #11]
 800817e:	2101      	movs	r1, #1
 8008180:	4618      	mov	r0, r3
 8008182:	f001 fff7 	bl	800a174 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8008186:	f001 fa3b 	bl	8009600 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800818a:	68f9      	ldr	r1, [r7, #12]
 800818c:	4804      	ldr	r0, [pc, #16]	; (80081a0 <RadioSetTxContinuousWave+0x54>)
 800818e:	f003 fb97 	bl	800b8c0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8008192:	4803      	ldr	r0, [pc, #12]	; (80081a0 <RadioSetTxContinuousWave+0x54>)
 8008194:	f003 fab6 	bl	800b704 <UTIL_TIMER_Start>
}
 8008198:	bf00      	nop
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	200002e0 	.word	0x200002e0

080081a4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	4603      	mov	r3, r0
 80081ac:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80081ae:	f001 fe5a 	bl	8009e66 <SUBGRF_GetRssiInst>
 80081b2:	4603      	mov	r3, r0
 80081b4:	b21b      	sxth	r3, r3
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	4603      	mov	r3, r0
 80081c6:	460a      	mov	r2, r1
 80081c8:	80fb      	strh	r3, [r7, #6]
 80081ca:	4613      	mov	r3, r2
 80081cc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80081ce:	797a      	ldrb	r2, [r7, #5]
 80081d0:	88fb      	ldrh	r3, [r7, #6]
 80081d2:	4611      	mov	r1, r2
 80081d4:	4618      	mov	r0, r3
 80081d6:	f001 fed9 	bl	8009f8c <SUBGRF_WriteRegister>
}
 80081da:	bf00      	nop
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	4603      	mov	r3, r0
 80081ea:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80081ec:	88fb      	ldrh	r3, [r7, #6]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f001 fee0 	bl	8009fb4 <SUBGRF_ReadRegister>
 80081f4:	4603      	mov	r3, r0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	4603      	mov	r3, r0
 8008206:	6039      	str	r1, [r7, #0]
 8008208:	80fb      	strh	r3, [r7, #6]
 800820a:	4613      	mov	r3, r2
 800820c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800820e:	797b      	ldrb	r3, [r7, #5]
 8008210:	b29a      	uxth	r2, r3
 8008212:	88fb      	ldrh	r3, [r7, #6]
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	4618      	mov	r0, r3
 8008218:	f001 fee0 	bl	8009fdc <SUBGRF_WriteRegisters>
}
 800821c:	bf00      	nop
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	4603      	mov	r3, r0
 800822c:	6039      	str	r1, [r7, #0]
 800822e:	80fb      	strh	r3, [r7, #6]
 8008230:	4613      	mov	r3, r2
 8008232:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8008234:	797b      	ldrb	r3, [r7, #5]
 8008236:	b29a      	uxth	r2, r3
 8008238:	88fb      	ldrh	r3, [r7, #6]
 800823a:	6839      	ldr	r1, [r7, #0]
 800823c:	4618      	mov	r0, r3
 800823e:	f001 feef 	bl	800a020 <SUBGRF_ReadRegisters>
}
 8008242:	bf00      	nop
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
	...

0800824c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	4603      	mov	r3, r0
 8008254:	460a      	mov	r2, r1
 8008256:	71fb      	strb	r3, [r7, #7]
 8008258:	4613      	mov	r3, r2
 800825a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d10a      	bne.n	8008278 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8008262:	4a0e      	ldr	r2, [pc, #56]	; (800829c <RadioSetMaxPayloadLength+0x50>)
 8008264:	79bb      	ldrb	r3, [r7, #6]
 8008266:	7013      	strb	r3, [r2, #0]
 8008268:	4b0c      	ldr	r3, [pc, #48]	; (800829c <RadioSetMaxPayloadLength+0x50>)
 800826a:	781a      	ldrb	r2, [r3, #0]
 800826c:	4b0c      	ldr	r3, [pc, #48]	; (80082a0 <RadioSetMaxPayloadLength+0x54>)
 800826e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008270:	480c      	ldr	r0, [pc, #48]	; (80082a4 <RadioSetMaxPayloadLength+0x58>)
 8008272:	f001 fd43 	bl	8009cfc <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8008276:	e00d      	b.n	8008294 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008278:	4b09      	ldr	r3, [pc, #36]	; (80082a0 <RadioSetMaxPayloadLength+0x54>)
 800827a:	7d5b      	ldrb	r3, [r3, #21]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d109      	bne.n	8008294 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008280:	4a06      	ldr	r2, [pc, #24]	; (800829c <RadioSetMaxPayloadLength+0x50>)
 8008282:	79bb      	ldrb	r3, [r7, #6]
 8008284:	7013      	strb	r3, [r2, #0]
 8008286:	4b05      	ldr	r3, [pc, #20]	; (800829c <RadioSetMaxPayloadLength+0x50>)
 8008288:	781a      	ldrb	r2, [r3, #0]
 800828a:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <RadioSetMaxPayloadLength+0x54>)
 800828c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800828e:	4805      	ldr	r0, [pc, #20]	; (80082a4 <RadioSetMaxPayloadLength+0x58>)
 8008290:	f001 fd34 	bl	8009cfc <SUBGRF_SetPacketParams>
}
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	20000008 	.word	0x20000008
 80082a0:	20000284 	.word	0x20000284
 80082a4:	20000292 	.word	0x20000292

080082a8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80082b2:	4a13      	ldr	r2, [pc, #76]	; (8008300 <RadioSetPublicNetwork+0x58>)
 80082b4:	79fb      	ldrb	r3, [r7, #7]
 80082b6:	7313      	strb	r3, [r2, #12]
 80082b8:	4b11      	ldr	r3, [pc, #68]	; (8008300 <RadioSetPublicNetwork+0x58>)
 80082ba:	7b1a      	ldrb	r2, [r3, #12]
 80082bc:	4b10      	ldr	r3, [pc, #64]	; (8008300 <RadioSetPublicNetwork+0x58>)
 80082be:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80082c0:	2001      	movs	r0, #1
 80082c2:	f7ff f82d 	bl	8007320 <RadioSetModem>
    if( enable == true )
 80082c6:	79fb      	ldrb	r3, [r7, #7]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00a      	beq.n	80082e2 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80082cc:	2134      	movs	r1, #52	; 0x34
 80082ce:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80082d2:	f001 fe5b 	bl	8009f8c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80082d6:	2144      	movs	r1, #68	; 0x44
 80082d8:	f240 7041 	movw	r0, #1857	; 0x741
 80082dc:	f001 fe56 	bl	8009f8c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80082e0:	e009      	b.n	80082f6 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80082e2:	2114      	movs	r1, #20
 80082e4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80082e8:	f001 fe50 	bl	8009f8c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80082ec:	2124      	movs	r1, #36	; 0x24
 80082ee:	f240 7041 	movw	r0, #1857	; 0x741
 80082f2:	f001 fe4b 	bl	8009f8c <SUBGRF_WriteRegister>
}
 80082f6:	bf00      	nop
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	20000284 	.word	0x20000284

08008304 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8008308:	f001 ff90 	bl	800a22c <SUBGRF_GetRadioWakeUpTime>
 800830c:	4603      	mov	r3, r0
 800830e:	3303      	adds	r3, #3
}
 8008310:	4618      	mov	r0, r3
 8008312:	bd80      	pop	{r7, pc}

08008314 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800831c:	f000 f80e 	bl	800833c <RadioOnTxTimeoutProcess>
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8008330:	f000 f818 	bl	8008364 <RadioOnRxTimeoutProcess>
}
 8008334:	bf00      	nop
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008340:	4b07      	ldr	r3, [pc, #28]	; (8008360 <RadioOnTxTimeoutProcess+0x24>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d008      	beq.n	800835a <RadioOnTxTimeoutProcess+0x1e>
 8008348:	4b05      	ldr	r3, [pc, #20]	; (8008360 <RadioOnTxTimeoutProcess+0x24>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8008352:	4b03      	ldr	r3, [pc, #12]	; (8008360 <RadioOnTxTimeoutProcess+0x24>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	4798      	blx	r3
    }
}
 800835a:	bf00      	nop
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	20000280 	.word	0x20000280

08008364 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008368:	4b07      	ldr	r3, [pc, #28]	; (8008388 <RadioOnRxTimeoutProcess+0x24>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d008      	beq.n	8008382 <RadioOnRxTimeoutProcess+0x1e>
 8008370:	4b05      	ldr	r3, [pc, #20]	; (8008388 <RadioOnRxTimeoutProcess+0x24>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800837a:	4b03      	ldr	r3, [pc, #12]	; (8008388 <RadioOnRxTimeoutProcess+0x24>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	4798      	blx	r3
    }
}
 8008382:	bf00      	nop
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20000280 	.word	0x20000280

0800838c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8008396:	4a05      	ldr	r2, [pc, #20]	; (80083ac <RadioOnDioIrq+0x20>)
 8008398:	88fb      	ldrh	r3, [r7, #6]
 800839a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800839e:	f000 f807 	bl	80083b0 <RadioIrqProcess>
}
 80083a2:	bf00      	nop
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000284 	.word	0x20000284

080083b0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80083b0:	b590      	push	{r4, r7, lr}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80083b6:	2300      	movs	r3, #0
 80083b8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80083be:	4ba8      	ldr	r3, [pc, #672]	; (8008660 <RadioIrqProcess+0x2b0>)
 80083c0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80083c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083c8:	f000 810c 	beq.w	80085e4 <RadioIrqProcess+0x234>
 80083cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083d0:	f300 81e8 	bgt.w	80087a4 <RadioIrqProcess+0x3f4>
 80083d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d8:	f000 80f0 	beq.w	80085bc <RadioIrqProcess+0x20c>
 80083dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083e0:	f300 81e0 	bgt.w	80087a4 <RadioIrqProcess+0x3f4>
 80083e4:	2b80      	cmp	r3, #128	; 0x80
 80083e6:	f000 80d5 	beq.w	8008594 <RadioIrqProcess+0x1e4>
 80083ea:	2b80      	cmp	r3, #128	; 0x80
 80083ec:	f300 81da 	bgt.w	80087a4 <RadioIrqProcess+0x3f4>
 80083f0:	2b20      	cmp	r3, #32
 80083f2:	dc49      	bgt.n	8008488 <RadioIrqProcess+0xd8>
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f340 81d5 	ble.w	80087a4 <RadioIrqProcess+0x3f4>
 80083fa:	3b01      	subs	r3, #1
 80083fc:	2b1f      	cmp	r3, #31
 80083fe:	f200 81d1 	bhi.w	80087a4 <RadioIrqProcess+0x3f4>
 8008402:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <RadioIrqProcess+0x58>)
 8008404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008408:	08008491 	.word	0x08008491
 800840c:	080084cb 	.word	0x080084cb
 8008410:	080087a5 	.word	0x080087a5
 8008414:	08008681 	.word	0x08008681
 8008418:	080087a5 	.word	0x080087a5
 800841c:	080087a5 	.word	0x080087a5
 8008420:	080087a5 	.word	0x080087a5
 8008424:	080086fd 	.word	0x080086fd
 8008428:	080087a5 	.word	0x080087a5
 800842c:	080087a5 	.word	0x080087a5
 8008430:	080087a5 	.word	0x080087a5
 8008434:	080087a5 	.word	0x080087a5
 8008438:	080087a5 	.word	0x080087a5
 800843c:	080087a5 	.word	0x080087a5
 8008440:	080087a5 	.word	0x080087a5
 8008444:	08008719 	.word	0x08008719
 8008448:	080087a5 	.word	0x080087a5
 800844c:	080087a5 	.word	0x080087a5
 8008450:	080087a5 	.word	0x080087a5
 8008454:	080087a5 	.word	0x080087a5
 8008458:	080087a5 	.word	0x080087a5
 800845c:	080087a5 	.word	0x080087a5
 8008460:	080087a5 	.word	0x080087a5
 8008464:	080087a5 	.word	0x080087a5
 8008468:	080087a5 	.word	0x080087a5
 800846c:	080087a5 	.word	0x080087a5
 8008470:	080087a5 	.word	0x080087a5
 8008474:	080087a5 	.word	0x080087a5
 8008478:	080087a5 	.word	0x080087a5
 800847c:	080087a5 	.word	0x080087a5
 8008480:	080087a5 	.word	0x080087a5
 8008484:	08008727 	.word	0x08008727
 8008488:	2b40      	cmp	r3, #64	; 0x40
 800848a:	f000 816d 	beq.w	8008768 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 800848e:	e189      	b.n	80087a4 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8008490:	4874      	ldr	r0, [pc, #464]	; (8008664 <RadioIrqProcess+0x2b4>)
 8008492:	f003 f9a5 	bl	800b7e0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8008496:	2000      	movs	r0, #0
 8008498:	f000 fff8 	bl	800948c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800849c:	f002 f85a 	bl	800a554 <RFW_Is_LongPacketModeEnabled>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d101      	bne.n	80084aa <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80084a6:	f002 f87e 	bl	800a5a6 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80084aa:	4b6f      	ldr	r3, [pc, #444]	; (8008668 <RadioIrqProcess+0x2b8>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 817a 	beq.w	80087a8 <RadioIrqProcess+0x3f8>
 80084b4:	4b6c      	ldr	r3, [pc, #432]	; (8008668 <RadioIrqProcess+0x2b8>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 8174 	beq.w	80087a8 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 80084c0:	4b69      	ldr	r3, [pc, #420]	; (8008668 <RadioIrqProcess+0x2b8>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4798      	blx	r3
        break;
 80084c8:	e16e      	b.n	80087a8 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 80084ca:	4868      	ldr	r0, [pc, #416]	; (800866c <RadioIrqProcess+0x2bc>)
 80084cc:	f003 f988 	bl	800b7e0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80084d0:	4b63      	ldr	r3, [pc, #396]	; (8008660 <RadioIrqProcess+0x2b0>)
 80084d2:	785b      	ldrb	r3, [r3, #1]
 80084d4:	f083 0301 	eor.w	r3, r3, #1
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d014      	beq.n	8008508 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80084de:	2000      	movs	r0, #0
 80084e0:	f000 ffd4 	bl	800948c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80084e4:	2100      	movs	r1, #0
 80084e6:	f640 1002 	movw	r0, #2306	; 0x902
 80084ea:	f001 fd4f 	bl	8009f8c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80084ee:	f640 1044 	movw	r0, #2372	; 0x944
 80084f2:	f001 fd5f 	bl	8009fb4 <SUBGRF_ReadRegister>
 80084f6:	4603      	mov	r3, r0
 80084f8:	f043 0302 	orr.w	r3, r3, #2
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	4619      	mov	r1, r3
 8008500:	f640 1044 	movw	r0, #2372	; 0x944
 8008504:	f001 fd42 	bl	8009f8c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8008508:	1dfb      	adds	r3, r7, #7
 800850a:	22ff      	movs	r2, #255	; 0xff
 800850c:	4619      	mov	r1, r3
 800850e:	4858      	ldr	r0, [pc, #352]	; (8008670 <RadioIrqProcess+0x2c0>)
 8008510:	f000 fe8c 	bl	800922c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8008514:	4857      	ldr	r0, [pc, #348]	; (8008674 <RadioIrqProcess+0x2c4>)
 8008516:	f001 fce7 	bl	8009ee8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800851a:	4b53      	ldr	r3, [pc, #332]	; (8008668 <RadioIrqProcess+0x2b8>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d036      	beq.n	8008590 <RadioIrqProcess+0x1e0>
 8008522:	4b51      	ldr	r3, [pc, #324]	; (8008668 <RadioIrqProcess+0x2b8>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d031      	beq.n	8008590 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 800852c:	4b4c      	ldr	r3, [pc, #304]	; (8008660 <RadioIrqProcess+0x2b0>)
 800852e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008532:	2b01      	cmp	r3, #1
 8008534:	d10e      	bne.n	8008554 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8008536:	4b4c      	ldr	r3, [pc, #304]	; (8008668 <RadioIrqProcess+0x2b8>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689c      	ldr	r4, [r3, #8]
 800853c:	79fb      	ldrb	r3, [r7, #7]
 800853e:	b299      	uxth	r1, r3
 8008540:	4b47      	ldr	r3, [pc, #284]	; (8008660 <RadioIrqProcess+0x2b0>)
 8008542:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8008546:	b21a      	sxth	r2, r3
 8008548:	4b45      	ldr	r3, [pc, #276]	; (8008660 <RadioIrqProcess+0x2b0>)
 800854a:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800854e:	4848      	ldr	r0, [pc, #288]	; (8008670 <RadioIrqProcess+0x2c0>)
 8008550:	47a0      	blx	r4
                break;
 8008552:	e01e      	b.n	8008592 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8008554:	4b42      	ldr	r3, [pc, #264]	; (8008660 <RadioIrqProcess+0x2b0>)
 8008556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008558:	463a      	mov	r2, r7
 800855a:	4611      	mov	r1, r2
 800855c:	4618      	mov	r0, r3
 800855e:	f001 ff47 	bl	800a3f0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8008562:	4b41      	ldr	r3, [pc, #260]	; (8008668 <RadioIrqProcess+0x2b8>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	689c      	ldr	r4, [r3, #8]
 8008568:	79fb      	ldrb	r3, [r7, #7]
 800856a:	b299      	uxth	r1, r3
 800856c:	4b3c      	ldr	r3, [pc, #240]	; (8008660 <RadioIrqProcess+0x2b0>)
 800856e:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8008572:	b218      	sxth	r0, r3
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800857a:	4a3f      	ldr	r2, [pc, #252]	; (8008678 <RadioIrqProcess+0x2c8>)
 800857c:	fb82 c203 	smull	ip, r2, r2, r3
 8008580:	1192      	asrs	r2, r2, #6
 8008582:	17db      	asrs	r3, r3, #31
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	b25b      	sxtb	r3, r3
 8008588:	4602      	mov	r2, r0
 800858a:	4839      	ldr	r0, [pc, #228]	; (8008670 <RadioIrqProcess+0x2c0>)
 800858c:	47a0      	blx	r4
                break;
 800858e:	e000      	b.n	8008592 <RadioIrqProcess+0x1e2>
        }
 8008590:	bf00      	nop
        break;
 8008592:	e118      	b.n	80087c6 <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 8008594:	2000      	movs	r0, #0
 8008596:	f000 ff79 	bl	800948c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800859a:	4b33      	ldr	r3, [pc, #204]	; (8008668 <RadioIrqProcess+0x2b8>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 8104 	beq.w	80087ac <RadioIrqProcess+0x3fc>
 80085a4:	4b30      	ldr	r3, [pc, #192]	; (8008668 <RadioIrqProcess+0x2b8>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 80fe 	beq.w	80087ac <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 80085b0:	4b2d      	ldr	r3, [pc, #180]	; (8008668 <RadioIrqProcess+0x2b8>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	2000      	movs	r0, #0
 80085b8:	4798      	blx	r3
        break;
 80085ba:	e0f7      	b.n	80087ac <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 80085bc:	2000      	movs	r0, #0
 80085be:	f000 ff65 	bl	800948c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80085c2:	4b29      	ldr	r3, [pc, #164]	; (8008668 <RadioIrqProcess+0x2b8>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 80f2 	beq.w	80087b0 <RadioIrqProcess+0x400>
 80085cc:	4b26      	ldr	r3, [pc, #152]	; (8008668 <RadioIrqProcess+0x2b8>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 80ec 	beq.w	80087b0 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 80085d8:	4b23      	ldr	r3, [pc, #140]	; (8008668 <RadioIrqProcess+0x2b8>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	2001      	movs	r0, #1
 80085e0:	4798      	blx	r3
        break;
 80085e2:	e0e5      	b.n	80087b0 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80085e4:	4b25      	ldr	r3, [pc, #148]	; (800867c <RadioIrqProcess+0x2cc>)
 80085e6:	2201      	movs	r2, #1
 80085e8:	2100      	movs	r1, #0
 80085ea:	2002      	movs	r0, #2
 80085ec:	f003 faf0 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80085f0:	f000 fe02 	bl	80091f8 <SUBGRF_GetOperatingMode>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b04      	cmp	r3, #4
 80085f8:	d115      	bne.n	8008626 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 80085fa:	481a      	ldr	r0, [pc, #104]	; (8008664 <RadioIrqProcess+0x2b4>)
 80085fc:	f003 f8f0 	bl	800b7e0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008600:	2000      	movs	r0, #0
 8008602:	f000 ff43 	bl	800948c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008606:	4b18      	ldr	r3, [pc, #96]	; (8008668 <RadioIrqProcess+0x2b8>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	f000 80d2 	beq.w	80087b4 <RadioIrqProcess+0x404>
 8008610:	4b15      	ldr	r3, [pc, #84]	; (8008668 <RadioIrqProcess+0x2b8>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 80cc 	beq.w	80087b4 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 800861c:	4b12      	ldr	r3, [pc, #72]	; (8008668 <RadioIrqProcess+0x2b8>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	4798      	blx	r3
        break;
 8008624:	e0c6      	b.n	80087b4 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8008626:	f000 fde7 	bl	80091f8 <SUBGRF_GetOperatingMode>
 800862a:	4603      	mov	r3, r0
 800862c:	2b05      	cmp	r3, #5
 800862e:	f040 80c1 	bne.w	80087b4 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 8008632:	480e      	ldr	r0, [pc, #56]	; (800866c <RadioIrqProcess+0x2bc>)
 8008634:	f003 f8d4 	bl	800b7e0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008638:	2000      	movs	r0, #0
 800863a:	f000 ff27 	bl	800948c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800863e:	4b0a      	ldr	r3, [pc, #40]	; (8008668 <RadioIrqProcess+0x2b8>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 80b6 	beq.w	80087b4 <RadioIrqProcess+0x404>
 8008648:	4b07      	ldr	r3, [pc, #28]	; (8008668 <RadioIrqProcess+0x2b8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 80b0 	beq.w	80087b4 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 8008654:	4b04      	ldr	r3, [pc, #16]	; (8008668 <RadioIrqProcess+0x2b8>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	4798      	blx	r3
        break;
 800865c:	e0aa      	b.n	80087b4 <RadioIrqProcess+0x404>
 800865e:	bf00      	nop
 8008660:	20000284 	.word	0x20000284
 8008664:	200002e0 	.word	0x200002e0
 8008668:	20000280 	.word	0x20000280
 800866c:	200002f8 	.word	0x200002f8
 8008670:	20000180 	.word	0x20000180
 8008674:	200002a8 	.word	0x200002a8
 8008678:	10624dd3 	.word	0x10624dd3
 800867c:	0800c1c4 	.word	0x0800c1c4
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8008680:	4b53      	ldr	r3, [pc, #332]	; (80087d0 <RadioIrqProcess+0x420>)
 8008682:	2201      	movs	r2, #1
 8008684:	2100      	movs	r1, #0
 8008686:	2002      	movs	r0, #2
 8008688:	f003 faa2 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800868c:	4b51      	ldr	r3, [pc, #324]	; (80087d4 <RadioIrqProcess+0x424>)
 800868e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 8091 	beq.w	80087b8 <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8008696:	4a50      	ldr	r2, [pc, #320]	; (80087d8 <RadioIrqProcess+0x428>)
 8008698:	4b4e      	ldr	r3, [pc, #312]	; (80087d4 <RadioIrqProcess+0x424>)
 800869a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800869c:	0c1b      	lsrs	r3, r3, #16
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	4619      	mov	r1, r3
 80086a2:	f640 1003 	movw	r0, #2307	; 0x903
 80086a6:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 80086a8:	4a4b      	ldr	r2, [pc, #300]	; (80087d8 <RadioIrqProcess+0x428>)
 80086aa:	4b4a      	ldr	r3, [pc, #296]	; (80087d4 <RadioIrqProcess+0x424>)
 80086ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ae:	0a1b      	lsrs	r3, r3, #8
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	4619      	mov	r1, r3
 80086b4:	f640 1004 	movw	r0, #2308	; 0x904
 80086b8:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 80086ba:	4a47      	ldr	r2, [pc, #284]	; (80087d8 <RadioIrqProcess+0x428>)
 80086bc:	4b45      	ldr	r3, [pc, #276]	; (80087d4 <RadioIrqProcess+0x424>)
 80086be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	4619      	mov	r1, r3
 80086c4:	f640 1005 	movw	r0, #2309	; 0x905
 80086c8:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 80086ca:	4c43      	ldr	r4, [pc, #268]	; (80087d8 <RadioIrqProcess+0x428>)
 80086cc:	4b43      	ldr	r3, [pc, #268]	; (80087dc <RadioIrqProcess+0x42c>)
 80086ce:	f640 1002 	movw	r0, #2306	; 0x902
 80086d2:	4798      	blx	r3
 80086d4:	4603      	mov	r3, r0
 80086d6:	f043 0301 	orr.w	r3, r3, #1
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	4619      	mov	r1, r3
 80086de:	f640 1002 	movw	r0, #2306	; 0x902
 80086e2:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 80086e4:	4b3b      	ldr	r3, [pc, #236]	; (80087d4 <RadioIrqProcess+0x424>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80086ea:	2300      	movs	r3, #0
 80086ec:	2200      	movs	r2, #0
 80086ee:	f240 2162 	movw	r1, #610	; 0x262
 80086f2:	f240 2062 	movw	r0, #610	; 0x262
 80086f6:	f001 f899 	bl	800982c <SUBGRF_SetDioIrqParams>
        break;
 80086fa:	e05d      	b.n	80087b8 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80086fc:	4b38      	ldr	r3, [pc, #224]	; (80087e0 <RadioIrqProcess+0x430>)
 80086fe:	2201      	movs	r2, #1
 8008700:	2100      	movs	r1, #0
 8008702:	2002      	movs	r0, #2
 8008704:	f003 fa64 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8008708:	f001 ff1d 	bl	800a546 <RFW_Is_Init>
 800870c:	4603      	mov	r3, r0
 800870e:	2b01      	cmp	r3, #1
 8008710:	d154      	bne.n	80087bc <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 8008712:	f001 ff4e 	bl	800a5b2 <RFW_ReceivePayload>
        break;
 8008716:	e051      	b.n	80087bc <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8008718:	4b32      	ldr	r3, [pc, #200]	; (80087e4 <RadioIrqProcess+0x434>)
 800871a:	2201      	movs	r2, #1
 800871c:	2100      	movs	r1, #0
 800871e:	2002      	movs	r0, #2
 8008720:	f003 fa56 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8008724:	e04f      	b.n	80087c6 <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 8008726:	4830      	ldr	r0, [pc, #192]	; (80087e8 <RadioIrqProcess+0x438>)
 8008728:	f003 f85a 	bl	800b7e0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800872c:	4b29      	ldr	r3, [pc, #164]	; (80087d4 <RadioIrqProcess+0x424>)
 800872e:	785b      	ldrb	r3, [r3, #1]
 8008730:	f083 0301 	eor.w	r3, r3, #1
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d002      	beq.n	8008740 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 800873a:	2000      	movs	r0, #0
 800873c:	f000 fea6 	bl	800948c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008740:	4b2a      	ldr	r3, [pc, #168]	; (80087ec <RadioIrqProcess+0x43c>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d03b      	beq.n	80087c0 <RadioIrqProcess+0x410>
 8008748:	4b28      	ldr	r3, [pc, #160]	; (80087ec <RadioIrqProcess+0x43c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d036      	beq.n	80087c0 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 8008752:	4b26      	ldr	r3, [pc, #152]	; (80087ec <RadioIrqProcess+0x43c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800875a:	4b25      	ldr	r3, [pc, #148]	; (80087f0 <RadioIrqProcess+0x440>)
 800875c:	2201      	movs	r2, #1
 800875e:	2100      	movs	r1, #0
 8008760:	2002      	movs	r0, #2
 8008762:	f003 fa35 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8008766:	e02b      	b.n	80087c0 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8008768:	4b22      	ldr	r3, [pc, #136]	; (80087f4 <RadioIrqProcess+0x444>)
 800876a:	2201      	movs	r2, #1
 800876c:	2100      	movs	r1, #0
 800876e:	2002      	movs	r0, #2
 8008770:	f003 fa2e 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8008774:	4b17      	ldr	r3, [pc, #92]	; (80087d4 <RadioIrqProcess+0x424>)
 8008776:	785b      	ldrb	r3, [r3, #1]
 8008778:	f083 0301 	eor.w	r3, r3, #1
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d002      	beq.n	8008788 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8008782:	2000      	movs	r0, #0
 8008784:	f000 fe82 	bl	800948c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8008788:	4b18      	ldr	r3, [pc, #96]	; (80087ec <RadioIrqProcess+0x43c>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d019      	beq.n	80087c4 <RadioIrqProcess+0x414>
 8008790:	4b16      	ldr	r3, [pc, #88]	; (80087ec <RadioIrqProcess+0x43c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d014      	beq.n	80087c4 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 800879a:	4b14      	ldr	r3, [pc, #80]	; (80087ec <RadioIrqProcess+0x43c>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	4798      	blx	r3
        break;
 80087a2:	e00f      	b.n	80087c4 <RadioIrqProcess+0x414>
        break;
 80087a4:	bf00      	nop
 80087a6:	e00e      	b.n	80087c6 <RadioIrqProcess+0x416>
        break;
 80087a8:	bf00      	nop
 80087aa:	e00c      	b.n	80087c6 <RadioIrqProcess+0x416>
        break;
 80087ac:	bf00      	nop
 80087ae:	e00a      	b.n	80087c6 <RadioIrqProcess+0x416>
        break;
 80087b0:	bf00      	nop
 80087b2:	e008      	b.n	80087c6 <RadioIrqProcess+0x416>
        break;
 80087b4:	bf00      	nop
 80087b6:	e006      	b.n	80087c6 <RadioIrqProcess+0x416>
        break;
 80087b8:	bf00      	nop
 80087ba:	e004      	b.n	80087c6 <RadioIrqProcess+0x416>
        break;
 80087bc:	bf00      	nop
 80087be:	e002      	b.n	80087c6 <RadioIrqProcess+0x416>
        break;
 80087c0:	bf00      	nop
 80087c2:	e000      	b.n	80087c6 <RadioIrqProcess+0x416>
        break;
 80087c4:	bf00      	nop
    }
}
 80087c6:	bf00      	nop
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd90      	pop	{r4, r7, pc}
 80087ce:	bf00      	nop
 80087d0:	0800c1d8 	.word	0x0800c1d8
 80087d4:	20000284 	.word	0x20000284
 80087d8:	080081bf 	.word	0x080081bf
 80087dc:	080081e3 	.word	0x080081e3
 80087e0:	0800c1e4 	.word	0x0800c1e4
 80087e4:	0800c1f0 	.word	0x0800c1f0
 80087e8:	200002f8 	.word	0x200002f8
 80087ec:	20000280 	.word	0x20000280
 80087f0:	0800c1fc 	.word	0x0800c1fc
 80087f4:	0800c208 	.word	0x0800c208

080087f8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80087fc:	4b09      	ldr	r3, [pc, #36]	; (8008824 <RadioTxPrbs+0x2c>)
 80087fe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008802:	2101      	movs	r1, #1
 8008804:	4618      	mov	r0, r3
 8008806:	f001 fcb5 	bl	800a174 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800880a:	4b07      	ldr	r3, [pc, #28]	; (8008828 <RadioTxPrbs+0x30>)
 800880c:	212d      	movs	r1, #45	; 0x2d
 800880e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008812:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8008814:	f000 fefd 	bl	8009612 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8008818:	4804      	ldr	r0, [pc, #16]	; (800882c <RadioTxPrbs+0x34>)
 800881a:	f000 fe53 	bl	80094c4 <SUBGRF_SetTx>
}
 800881e:	bf00      	nop
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	20000284 	.word	0x20000284
 8008828:	080081bf 	.word	0x080081bf
 800882c:	000fffff 	.word	0x000fffff

08008830 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	4603      	mov	r3, r0
 8008838:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800883a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800883e:	4618      	mov	r0, r3
 8008840:	f001 fcc0 	bl	800a1c4 <SUBGRF_SetRfTxPower>
 8008844:	4603      	mov	r3, r0
 8008846:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8008848:	7bfb      	ldrb	r3, [r7, #15]
 800884a:	2101      	movs	r1, #1
 800884c:	4618      	mov	r0, r3
 800884e:	f001 fc91 	bl	800a174 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8008852:	f000 fed5 	bl	8009600 <SUBGRF_SetTxContinuousWave>
}
 8008856:	bf00      	nop
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800885e:	b480      	push	{r7}
 8008860:	b089      	sub	sp, #36	; 0x24
 8008862:	af00      	add	r7, sp, #0
 8008864:	60f8      	str	r0, [r7, #12]
 8008866:	60b9      	str	r1, [r7, #8]
 8008868:	4613      	mov	r3, r2
 800886a:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800886c:	2300      	movs	r3, #0
 800886e:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8008874:	2300      	movs	r3, #0
 8008876:	61bb      	str	r3, [r7, #24]
 8008878:	e011      	b.n	800889e <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	4413      	add	r3, r2
 8008880:	781a      	ldrb	r2, [r3, #0]
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	68b9      	ldr	r1, [r7, #8]
 8008886:	440b      	add	r3, r1
 8008888:	43d2      	mvns	r2, r2
 800888a:	b2d2      	uxtb	r2, r2
 800888c:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	2200      	movs	r2, #0
 8008896:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	3301      	adds	r3, #1
 800889c:	61bb      	str	r3, [r7, #24]
 800889e:	79fb      	ldrb	r3, [r7, #7]
 80088a0:	69ba      	ldr	r2, [r7, #24]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	dbe9      	blt.n	800887a <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80088a6:	2300      	movs	r3, #0
 80088a8:	61bb      	str	r3, [r7, #24]
 80088aa:	e049      	b.n	8008940 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	425a      	negs	r2, r3
 80088b0:	f003 0307 	and.w	r3, r3, #7
 80088b4:	f002 0207 	and.w	r2, r2, #7
 80088b8:	bf58      	it	pl
 80088ba:	4253      	negpl	r3, r2
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	f1c3 0307 	rsb	r3, r3, #7
 80088c2:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	da00      	bge.n	80088cc <payload_integration+0x6e>
 80088ca:	3307      	adds	r3, #7
 80088cc:	10db      	asrs	r3, r3, #3
 80088ce:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	3301      	adds	r3, #1
 80088d4:	425a      	negs	r2, r3
 80088d6:	f003 0307 	and.w	r3, r3, #7
 80088da:	f002 0207 	and.w	r2, r2, #7
 80088de:	bf58      	it	pl
 80088e0:	4253      	negpl	r3, r2
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	f1c3 0307 	rsb	r3, r3, #7
 80088e8:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	3301      	adds	r3, #1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	da00      	bge.n	80088f4 <payload_integration+0x96>
 80088f2:	3307      	adds	r3, #7
 80088f4:	10db      	asrs	r3, r3, #3
 80088f6:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80088f8:	7dbb      	ldrb	r3, [r7, #22]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	4413      	add	r3, r2
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	7dfb      	ldrb	r3, [r7, #23]
 8008904:	fa42 f303 	asr.w	r3, r2, r3
 8008908:	b2db      	uxtb	r3, r3
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8008910:	7ffa      	ldrb	r2, [r7, #31]
 8008912:	7cfb      	ldrb	r3, [r7, #19]
 8008914:	4053      	eors	r3, r2
 8008916:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8008918:	7d3b      	ldrb	r3, [r7, #20]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	4413      	add	r3, r2
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	b25a      	sxtb	r2, r3
 8008922:	7ff9      	ldrb	r1, [r7, #31]
 8008924:	7d7b      	ldrb	r3, [r7, #21]
 8008926:	fa01 f303 	lsl.w	r3, r1, r3
 800892a:	b25b      	sxtb	r3, r3
 800892c:	4313      	orrs	r3, r2
 800892e:	b259      	sxtb	r1, r3
 8008930:	7d3b      	ldrb	r3, [r7, #20]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	4413      	add	r3, r2
 8008936:	b2ca      	uxtb	r2, r1
 8008938:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	3301      	adds	r3, #1
 800893e:	61bb      	str	r3, [r7, #24]
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	00db      	lsls	r3, r3, #3
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	429a      	cmp	r2, r3
 8008948:	dbb0      	blt.n	80088ac <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800894a:	7ffb      	ldrb	r3, [r7, #31]
 800894c:	01db      	lsls	r3, r3, #7
 800894e:	b25a      	sxtb	r2, r3
 8008950:	7ffb      	ldrb	r3, [r7, #31]
 8008952:	019b      	lsls	r3, r3, #6
 8008954:	b25b      	sxtb	r3, r3
 8008956:	4313      	orrs	r3, r2
 8008958:	b25b      	sxtb	r3, r3
 800895a:	7ffa      	ldrb	r2, [r7, #31]
 800895c:	2a00      	cmp	r2, #0
 800895e:	d101      	bne.n	8008964 <payload_integration+0x106>
 8008960:	2220      	movs	r2, #32
 8008962:	e000      	b.n	8008966 <payload_integration+0x108>
 8008964:	2200      	movs	r2, #0
 8008966:	4313      	orrs	r3, r2
 8008968:	b259      	sxtb	r1, r3
 800896a:	79fb      	ldrb	r3, [r7, #7]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	4413      	add	r3, r2
 8008970:	b2ca      	uxtb	r2, r1
 8008972:	701a      	strb	r2, [r3, #0]
}
 8008974:	bf00      	nop
 8008976:	3724      	adds	r7, #36	; 0x24
 8008978:	46bd      	mov	sp, r7
 800897a:	bc80      	pop	{r7}
 800897c:	4770      	bx	lr
	...

08008980 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08c      	sub	sp, #48	; 0x30
 8008984:	af00      	add	r7, sp, #0
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
 800898a:	603b      	str	r3, [r7, #0]
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8008990:	2300      	movs	r3, #0
 8008992:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8008994:	2300      	movs	r3, #0
 8008996:	623b      	str	r3, [r7, #32]
 8008998:	2300      	movs	r3, #0
 800899a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800899c:	f001 fdcd 	bl	800a53a <RFW_DeInit>

    if( rxContinuous != 0 )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	bf14      	ite	ne
 80089b0:	2301      	movne	r3, #1
 80089b2:	2300      	moveq	r3, #0
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	4ba3      	ldr	r3, [pc, #652]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 80089b8:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <RadioSetRxGenericConfig+0x48>
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	f000 80dc 	beq.w	8008b7e <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80089c6:	e194      	b.n	8008cf2 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d003      	beq.n	80089d8 <RadioSetRxGenericConfig+0x58>
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d102      	bne.n	80089de <RadioSetRxGenericConfig+0x5e>
            return -1;
 80089d8:	f04f 33ff 	mov.w	r3, #4294967295
 80089dc:	e18a      	b.n	8008cf4 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	7f9b      	ldrb	r3, [r3, #30]
 80089e2:	2b08      	cmp	r3, #8
 80089e4:	d902      	bls.n	80089ec <RadioSetRxGenericConfig+0x6c>
            return -1;
 80089e6:	f04f 33ff 	mov.w	r3, #4294967295
 80089ea:	e183      	b.n	8008cf4 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	6919      	ldr	r1, [r3, #16]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	7f9b      	ldrb	r3, [r3, #30]
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	f107 0320 	add.w	r3, r7, #32
 80089fa:	4618      	mov	r0, r3
 80089fc:	f002 f996 	bl	800ad2c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	bf14      	ite	ne
 8008a08:	2301      	movne	r3, #1
 8008a0a:	2300      	moveq	r3, #0
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 fe08 	bl	8009624 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008a14:	4b8b      	ldr	r3, [pc, #556]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	4a88      	ldr	r2, [pc, #544]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008a22:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008a2a:	4b86      	ldr	r3, [pc, #536]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f001 fcb3 	bl	800a3a0 <SUBGRF_GetFskBandwidthRegValue>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	4b81      	ldr	r3, [pc, #516]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008a44:	4b7f      	ldr	r3, [pc, #508]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	00db      	lsls	r3, r3, #3
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	4b7b      	ldr	r3, [pc, #492]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008a56:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	7fda      	ldrb	r2, [r3, #31]
 8008a5c:	4b79      	ldr	r3, [pc, #484]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008a5e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	7f9b      	ldrb	r3, [r3, #30]
 8008a64:	00db      	lsls	r3, r3, #3
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	4b76      	ldr	r3, [pc, #472]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008a6a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008a72:	4b74      	ldr	r3, [pc, #464]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008a74:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d105      	bne.n	8008a8c <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	4b6f      	ldr	r3, [pc, #444]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008a88:	759a      	strb	r2, [r3, #22]
 8008a8a:	e00b      	b.n	8008aa4 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d103      	bne.n	8008a9e <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008a96:	4b6b      	ldr	r3, [pc, #428]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008a98:	22ff      	movs	r2, #255	; 0xff
 8008a9a:	759a      	strb	r2, [r3, #22]
 8008a9c:	e002      	b.n	8008aa4 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008a9e:	4b69      	ldr	r3, [pc, #420]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008aa0:	22ff      	movs	r2, #255	; 0xff
 8008aa2:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d004      	beq.n	8008ab8 <RadioSetRxGenericConfig+0x138>
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d12d      	bne.n	8008b14 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008abe:	2bf1      	cmp	r3, #241	; 0xf1
 8008ac0:	d00c      	beq.n	8008adc <RadioSetRxGenericConfig+0x15c>
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008ac8:	2bf2      	cmp	r3, #242	; 0xf2
 8008aca:	d007      	beq.n	8008adc <RadioSetRxGenericConfig+0x15c>
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d002      	beq.n	8008adc <RadioSetRxGenericConfig+0x15c>
            return -1;
 8008ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8008ada:	e10b      	b.n	8008cf4 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8008adc:	2300      	movs	r3, #0
 8008ade:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8008ae4:	4b58      	ldr	r3, [pc, #352]	; (8008c48 <RadioSetRxGenericConfig+0x2c8>)
 8008ae6:	6819      	ldr	r1, [r3, #0]
 8008ae8:	f107 0314 	add.w	r3, r7, #20
 8008aec:	4a57      	ldr	r2, [pc, #348]	; (8008c4c <RadioSetRxGenericConfig+0x2cc>)
 8008aee:	4618      	mov	r0, r3
 8008af0:	f001 fd16 	bl	800a520 <RFW_Init>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <RadioSetRxGenericConfig+0x180>
            return -1;
 8008afa:	f04f 33ff 	mov.w	r3, #4294967295
 8008afe:	e0f9      	b.n	8008cf4 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008b00:	4b50      	ldr	r3, [pc, #320]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008b06:	4b4f      	ldr	r3, [pc, #316]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008b08:	2201      	movs	r2, #1
 8008b0a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008b0c:	4b4d      	ldr	r3, [pc, #308]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	755a      	strb	r2, [r3, #21]
        {
 8008b12:	e00e      	b.n	8008b32 <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8008b1a:	4b4a      	ldr	r3, [pc, #296]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008b1c:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008b24:	4b47      	ldr	r3, [pc, #284]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008b26:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8008b2e:	4b45      	ldr	r3, [pc, #276]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008b30:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008b32:	f7ff fa48 	bl	8007fc6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008b36:	2000      	movs	r0, #0
 8008b38:	f7fe fbf2 	bl	8007320 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008b3c:	4844      	ldr	r0, [pc, #272]	; (8008c50 <RadioSetRxGenericConfig+0x2d0>)
 8008b3e:	f001 f80b 	bl	8009b58 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008b42:	4844      	ldr	r0, [pc, #272]	; (8008c54 <RadioSetRxGenericConfig+0x2d4>)
 8008b44:	f001 f8da 	bl	8009cfc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008b48:	f107 0320 	add.w	r3, r7, #32
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 fba2 	bl	8009296 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	8b9b      	ldrh	r3, [r3, #28]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 fbec 	bl	8009334 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	8b1b      	ldrh	r3, [r3, #24]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 fbc7 	bl	80092f4 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008b6c:	fb03 f202 	mul.w	r2, r3, r2
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b78:	4a32      	ldr	r2, [pc, #200]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008b7a:	6093      	str	r3, [r2, #8]
        break;
 8008b7c:	e0b9      	b.n	8008cf2 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d102      	bne.n	8008b8c <RadioSetRxGenericConfig+0x20c>
            return -1;
 8008b86:	f04f 33ff 	mov.w	r3, #4294967295
 8008b8a:	e0b3      	b.n	8008cf4 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d104      	bne.n	8008ba0 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008b9e:	e002      	b.n	8008ba6 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8008ba0:	23ff      	movs	r3, #255	; 0xff
 8008ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	bf14      	ite	ne
 8008bae:	2301      	movne	r3, #1
 8008bb0:	2300      	moveq	r3, #0
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f000 fd35 	bl	8009624 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 fd3f 	bl	8009642 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008bc4:	4b1f      	ldr	r3, [pc, #124]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008bd2:	4b1c      	ldr	r3, [pc, #112]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008bd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8008bde:	4b19      	ldr	r3, [pc, #100]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8008bea:	4b16      	ldr	r3, [pc, #88]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008bec:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d010      	beq.n	8008c1c <RadioSetRxGenericConfig+0x29c>
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	dc2c      	bgt.n	8008c58 <RadioSetRxGenericConfig+0x2d8>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d002      	beq.n	8008c08 <RadioSetRxGenericConfig+0x288>
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d005      	beq.n	8008c12 <RadioSetRxGenericConfig+0x292>
            break;
 8008c06:	e027      	b.n	8008c58 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008c08:	4b0e      	ldr	r3, [pc, #56]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008c10:	e023      	b.n	8008c5a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008c12:	4b0c      	ldr	r3, [pc, #48]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008c1a:	e01e      	b.n	8008c5a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c22:	2b0b      	cmp	r3, #11
 8008c24:	d004      	beq.n	8008c30 <RadioSetRxGenericConfig+0x2b0>
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c2c:	2b0c      	cmp	r3, #12
 8008c2e:	d104      	bne.n	8008c3a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008c30:	4b04      	ldr	r3, [pc, #16]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008c38:	e00f      	b.n	8008c5a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008c3a:	4b02      	ldr	r3, [pc, #8]	; (8008c44 <RadioSetRxGenericConfig+0x2c4>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008c42:	e00a      	b.n	8008c5a <RadioSetRxGenericConfig+0x2da>
 8008c44:	20000284 	.word	0x20000284
 8008c48:	20000280 	.word	0x20000280
 8008c4c:	200002f8 	.word	0x200002f8
 8008c50:	200002bc 	.word	0x200002bc
 8008c54:	20000292 	.word	0x20000292
            break;
 8008c58:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008c5a:	4b28      	ldr	r3, [pc, #160]	; (8008cfc <RadioSetRxGenericConfig+0x37c>)
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8008c64:	4b25      	ldr	r3, [pc, #148]	; (8008cfc <RadioSetRxGenericConfig+0x37c>)
 8008c66:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8008c6e:	4b23      	ldr	r3, [pc, #140]	; (8008cfc <RadioSetRxGenericConfig+0x37c>)
 8008c70:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008c72:	4a22      	ldr	r2, [pc, #136]	; (8008cfc <RadioSetRxGenericConfig+0x37c>)
 8008c74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c78:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008c80:	4b1e      	ldr	r3, [pc, #120]	; (8008cfc <RadioSetRxGenericConfig+0x37c>)
 8008c82:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8008c8c:	4b1b      	ldr	r3, [pc, #108]	; (8008cfc <RadioSetRxGenericConfig+0x37c>)
 8008c8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8008c92:	f7ff f998 	bl	8007fc6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008c96:	2001      	movs	r0, #1
 8008c98:	f7fe fb42 	bl	8007320 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008c9c:	4818      	ldr	r0, [pc, #96]	; (8008d00 <RadioSetRxGenericConfig+0x380>)
 8008c9e:	f000 ff5b 	bl	8009b58 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008ca2:	4818      	ldr	r0, [pc, #96]	; (8008d04 <RadioSetRxGenericConfig+0x384>)
 8008ca4:	f001 f82a 	bl	8009cfc <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008ca8:	4b14      	ldr	r3, [pc, #80]	; (8008cfc <RadioSetRxGenericConfig+0x37c>)
 8008caa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d10d      	bne.n	8008cce <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008cb2:	f240 7036 	movw	r0, #1846	; 0x736
 8008cb6:	f001 f97d 	bl	8009fb4 <SUBGRF_ReadRegister>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	f023 0304 	bic.w	r3, r3, #4
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	f240 7036 	movw	r0, #1846	; 0x736
 8008cc8:	f001 f960 	bl	8009f8c <SUBGRF_WriteRegister>
 8008ccc:	e00c      	b.n	8008ce8 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008cce:	f240 7036 	movw	r0, #1846	; 0x736
 8008cd2:	f001 f96f 	bl	8009fb4 <SUBGRF_ReadRegister>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	f043 0304 	orr.w	r3, r3, #4
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	4619      	mov	r1, r3
 8008ce0:	f240 7036 	movw	r0, #1846	; 0x736
 8008ce4:	f001 f952 	bl	8009f8c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8008ce8:	4b04      	ldr	r3, [pc, #16]	; (8008cfc <RadioSetRxGenericConfig+0x37c>)
 8008cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cee:	609a      	str	r2, [r3, #8]
        break;
 8008cf0:	bf00      	nop
    }
    return status;
 8008cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3730      	adds	r7, #48	; 0x30
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	20000284 	.word	0x20000284
 8008d00:	200002bc 	.word	0x200002bc
 8008d04:	20000292 	.word	0x20000292

08008d08 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08e      	sub	sp, #56	; 0x38
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60b9      	str	r1, [r7, #8]
 8008d10:	607b      	str	r3, [r7, #4]
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]
 8008d16:	4613      	mov	r3, r2
 8008d18:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d1e:	2300      	movs	r3, #0
 8008d20:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008d22:	f001 fc0a 	bl	800a53a <RFW_DeInit>
    switch( modem )
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	f200 8204 	bhi.w	8009136 <RadioSetTxGenericConfig+0x42e>
 8008d2e:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <RadioSetTxGenericConfig+0x2c>)
 8008d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d34:	08008eb9 	.word	0x08008eb9
 8008d38:	08009001 	.word	0x08009001
 8008d3c:	080090f9 	.word	0x080090f9
 8008d40:	08008d45 	.word	0x08008d45
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	7c9b      	ldrb	r3, [r3, #18]
 8008d48:	2b08      	cmp	r3, #8
 8008d4a:	d902      	bls.n	8008d52 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8008d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d50:	e206      	b.n	8009160 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	6899      	ldr	r1, [r3, #8]
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	7c9b      	ldrb	r3, [r3, #18]
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d60:	4618      	mov	r0, r3
 8008d62:	f001 ffe3 	bl	800ad2c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d102      	bne.n	8008d74 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8008d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d72:	e1f5      	b.n	8009160 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f242 7210 	movw	r2, #10000	; 0x2710
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d813      	bhi.n	8008da8 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 8008d80:	2302      	movs	r3, #2
 8008d82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8008d86:	4b99      	ldr	r3, [pc, #612]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008d88:	2203      	movs	r2, #3
 8008d8a:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8008d8c:	4b97      	ldr	r3, [pc, #604]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008d8e:	2203      	movs	r2, #3
 8008d90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a94      	ldr	r2, [pc, #592]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008d9a:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	7cda      	ldrb	r2, [r3, #19]
 8008da0:	4b92      	ldr	r3, [pc, #584]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008da6:	e017      	b.n	8008dd8 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008dae:	4b8f      	ldr	r3, [pc, #572]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008db4:	4b8d      	ldr	r3, [pc, #564]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a8a      	ldr	r2, [pc, #552]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008dc2:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	7cda      	ldrb	r2, [r3, #19]
 8008dc8:	4b88      	ldr	r3, [pc, #544]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	089b      	lsrs	r3, r3, #2
 8008dd4:	4a85      	ldr	r2, [pc, #532]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008dd6:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	00db      	lsls	r3, r3, #3
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	4b82      	ldr	r3, [pc, #520]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008de4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008de6:	4b81      	ldr	r3, [pc, #516]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008de8:	2204      	movs	r2, #4
 8008dea:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	7c9b      	ldrb	r3, [r3, #18]
 8008df0:	00db      	lsls	r3, r3, #3
 8008df2:	b2da      	uxtb	r2, r3
 8008df4:	4b7d      	ldr	r3, [pc, #500]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008df6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008df8:	4b7c      	ldr	r3, [pc, #496]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	7d9b      	ldrb	r3, [r3, #22]
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d003      	beq.n	8008e0e <RadioSetTxGenericConfig+0x106>
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	7d1b      	ldrb	r3, [r3, #20]
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d12b      	bne.n	8008e66 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	7d5b      	ldrb	r3, [r3, #21]
 8008e12:	2bf1      	cmp	r3, #241	; 0xf1
 8008e14:	d00a      	beq.n	8008e2c <RadioSetTxGenericConfig+0x124>
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	7d5b      	ldrb	r3, [r3, #21]
 8008e1a:	2bf2      	cmp	r3, #242	; 0xf2
 8008e1c:	d006      	beq.n	8008e2c <RadioSetTxGenericConfig+0x124>
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	7d5b      	ldrb	r3, [r3, #21]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d002      	beq.n	8008e2c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8008e26:	f04f 33ff 	mov.w	r3, #4294967295
 8008e2a:	e199      	b.n	8009160 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8008e30:	2301      	movs	r3, #1
 8008e32:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008e36:	4b6e      	ldr	r3, [pc, #440]	; (8008ff0 <RadioSetTxGenericConfig+0x2e8>)
 8008e38:	6819      	ldr	r1, [r3, #0]
 8008e3a:	f107 0320 	add.w	r3, r7, #32
 8008e3e:	4a6d      	ldr	r2, [pc, #436]	; (8008ff4 <RadioSetTxGenericConfig+0x2ec>)
 8008e40:	4618      	mov	r0, r3
 8008e42:	f001 fb6d 	bl	800a520 <RFW_Init>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 8008e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e50:	e186      	b.n	8009160 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008e52:	4b66      	ldr	r3, [pc, #408]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8008e58:	4b64      	ldr	r3, [pc, #400]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008e5e:	4b63      	ldr	r3, [pc, #396]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	755a      	strb	r2, [r3, #21]
        {
 8008e64:	e00b      	b.n	8008e7e <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	7d5a      	ldrb	r2, [r3, #21]
 8008e6a:	4b60      	ldr	r3, [pc, #384]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008e6c:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	7d9a      	ldrb	r2, [r3, #22]
 8008e72:	4b5e      	ldr	r3, [pc, #376]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008e74:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	7d1a      	ldrb	r2, [r3, #20]
 8008e7a:	4b5c      	ldr	r3, [pc, #368]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008e7c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008e7e:	f7ff f8a2 	bl	8007fc6 <RadioStandby>
        RadioSetModem( radio_modem );
 8008e82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe fa4a 	bl	8007320 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008e8c:	485a      	ldr	r0, [pc, #360]	; (8008ff8 <RadioSetTxGenericConfig+0x2f0>)
 8008e8e:	f000 fe63 	bl	8009b58 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008e92:	485a      	ldr	r0, [pc, #360]	; (8008ffc <RadioSetTxGenericConfig+0x2f4>)
 8008e94:	f000 ff32 	bl	8009cfc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008e98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 f9fa 	bl	8009296 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	8a1b      	ldrh	r3, [r3, #16]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 fa44 	bl	8009334 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	899b      	ldrh	r3, [r3, #12]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fa1f 	bl	80092f4 <SUBGRF_SetCrcPolynomial>
        break;
 8008eb6:	e13f      	b.n	8009138 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d102      	bne.n	8008ec6 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8008ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ec4:	e14c      	b.n	8009160 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	7c9b      	ldrb	r3, [r3, #18]
 8008eca:	2b08      	cmp	r3, #8
 8008ecc:	d902      	bls.n	8008ed4 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8008ece:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed2:	e145      	b.n	8009160 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	6899      	ldr	r1, [r3, #8]
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	7c9b      	ldrb	r3, [r3, #18]
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f001 ff22 	bl	800ad2c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008ee8:	4b40      	ldr	r3, [pc, #256]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a3d      	ldr	r2, [pc, #244]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008ef6:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	7cda      	ldrb	r2, [r3, #19]
 8008efc:	4b3b      	ldr	r3, [pc, #236]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	4a39      	ldr	r2, [pc, #228]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008f08:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008f0a:	4b38      	ldr	r3, [pc, #224]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	4b34      	ldr	r3, [pc, #208]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008f1c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008f1e:	4b33      	ldr	r3, [pc, #204]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008f20:	2204      	movs	r2, #4
 8008f22:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	7c9b      	ldrb	r3, [r3, #18]
 8008f28:	00db      	lsls	r3, r3, #3
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	4b2f      	ldr	r3, [pc, #188]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008f2e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008f30:	4b2e      	ldr	r3, [pc, #184]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	7d9b      	ldrb	r3, [r3, #22]
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d003      	beq.n	8008f46 <RadioSetTxGenericConfig+0x23e>
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	7d1b      	ldrb	r3, [r3, #20]
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d12a      	bne.n	8008f9c <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	7d5b      	ldrb	r3, [r3, #21]
 8008f4a:	2bf1      	cmp	r3, #241	; 0xf1
 8008f4c:	d00a      	beq.n	8008f64 <RadioSetTxGenericConfig+0x25c>
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	7d5b      	ldrb	r3, [r3, #21]
 8008f52:	2bf2      	cmp	r3, #242	; 0xf2
 8008f54:	d006      	beq.n	8008f64 <RadioSetTxGenericConfig+0x25c>
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	7d5b      	ldrb	r3, [r3, #21]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d002      	beq.n	8008f64 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8008f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f62:	e0fd      	b.n	8009160 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8008f64:	2301      	movs	r3, #1
 8008f66:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008f6c:	4b20      	ldr	r3, [pc, #128]	; (8008ff0 <RadioSetTxGenericConfig+0x2e8>)
 8008f6e:	6819      	ldr	r1, [r3, #0]
 8008f70:	f107 0314 	add.w	r3, r7, #20
 8008f74:	4a1f      	ldr	r2, [pc, #124]	; (8008ff4 <RadioSetTxGenericConfig+0x2ec>)
 8008f76:	4618      	mov	r0, r3
 8008f78:	f001 fad2 	bl	800a520 <RFW_Init>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 8008f82:	f04f 33ff 	mov.w	r3, #4294967295
 8008f86:	e0eb      	b.n	8009160 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008f88:	4b18      	ldr	r3, [pc, #96]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8008f8e:	4b17      	ldr	r3, [pc, #92]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008f90:	2201      	movs	r2, #1
 8008f92:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008f94:	4b15      	ldr	r3, [pc, #84]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	755a      	strb	r2, [r3, #21]
        {
 8008f9a:	e00b      	b.n	8008fb4 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	7d5a      	ldrb	r2, [r3, #21]
 8008fa0:	4b12      	ldr	r3, [pc, #72]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008fa2:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	7d9a      	ldrb	r2, [r3, #22]
 8008fa8:	4b10      	ldr	r3, [pc, #64]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008faa:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	7d1a      	ldrb	r2, [r3, #20]
 8008fb0:	4b0e      	ldr	r3, [pc, #56]	; (8008fec <RadioSetTxGenericConfig+0x2e4>)
 8008fb2:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008fb4:	f7ff f807 	bl	8007fc6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008fb8:	2000      	movs	r0, #0
 8008fba:	f7fe f9b1 	bl	8007320 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008fbe:	480e      	ldr	r0, [pc, #56]	; (8008ff8 <RadioSetTxGenericConfig+0x2f0>)
 8008fc0:	f000 fdca 	bl	8009b58 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008fc4:	480d      	ldr	r0, [pc, #52]	; (8008ffc <RadioSetTxGenericConfig+0x2f4>)
 8008fc6:	f000 fe99 	bl	8009cfc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 f961 	bl	8009296 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	8a1b      	ldrh	r3, [r3, #16]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 f9ab 	bl	8009334 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	899b      	ldrh	r3, [r3, #12]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 f986 	bl	80092f4 <SUBGRF_SetCrcPolynomial>
        break;
 8008fe8:	e0a6      	b.n	8009138 <RadioSetTxGenericConfig+0x430>
 8008fea:	bf00      	nop
 8008fec:	20000284 	.word	0x20000284
 8008ff0:	20000280 	.word	0x20000280
 8008ff4:	200002e0 	.word	0x200002e0
 8008ff8:	200002bc 	.word	0x200002bc
 8008ffc:	20000292 	.word	0x20000292
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009000:	4b59      	ldr	r3, [pc, #356]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	781a      	ldrb	r2, [r3, #0]
 800900c:	4b56      	ldr	r3, [pc, #344]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 800900e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	785a      	ldrb	r2, [r3, #1]
 8009016:	4b54      	ldr	r3, [pc, #336]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 8009018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	789a      	ldrb	r2, [r3, #2]
 8009020:	4b51      	ldr	r3, [pc, #324]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 8009022:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	78db      	ldrb	r3, [r3, #3]
 800902a:	2b02      	cmp	r3, #2
 800902c:	d010      	beq.n	8009050 <RadioSetTxGenericConfig+0x348>
 800902e:	2b02      	cmp	r3, #2
 8009030:	dc20      	bgt.n	8009074 <RadioSetTxGenericConfig+0x36c>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d002      	beq.n	800903c <RadioSetTxGenericConfig+0x334>
 8009036:	2b01      	cmp	r3, #1
 8009038:	d005      	beq.n	8009046 <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 800903a:	e01b      	b.n	8009074 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800903c:	4b4a      	ldr	r3, [pc, #296]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 800903e:	2200      	movs	r2, #0
 8009040:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009044:	e017      	b.n	8009076 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009046:	4b48      	ldr	r3, [pc, #288]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 8009048:	2201      	movs	r2, #1
 800904a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800904e:	e012      	b.n	8009076 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	2b0b      	cmp	r3, #11
 8009056:	d003      	beq.n	8009060 <RadioSetTxGenericConfig+0x358>
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	2b0c      	cmp	r3, #12
 800905e:	d104      	bne.n	800906a <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009060:	4b41      	ldr	r3, [pc, #260]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 8009062:	2201      	movs	r2, #1
 8009064:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009068:	e005      	b.n	8009076 <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800906a:	4b3f      	ldr	r3, [pc, #252]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009072:	e000      	b.n	8009076 <RadioSetTxGenericConfig+0x36e>
            break;
 8009074:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009076:	4b3c      	ldr	r3, [pc, #240]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 8009078:	2201      	movs	r2, #1
 800907a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	889a      	ldrh	r2, [r3, #4]
 8009080:	4b39      	ldr	r3, [pc, #228]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 8009082:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	799a      	ldrb	r2, [r3, #6]
 8009088:	4b37      	ldr	r3, [pc, #220]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 800908a:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	79da      	ldrb	r2, [r3, #7]
 8009090:	4b35      	ldr	r3, [pc, #212]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 8009092:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	7a1a      	ldrb	r2, [r3, #8]
 800909a:	4b33      	ldr	r3, [pc, #204]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 800909c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 80090a0:	f7fe ff91 	bl	8007fc6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80090a4:	2001      	movs	r0, #1
 80090a6:	f7fe f93b 	bl	8007320 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80090aa:	4830      	ldr	r0, [pc, #192]	; (800916c <RadioSetTxGenericConfig+0x464>)
 80090ac:	f000 fd54 	bl	8009b58 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80090b0:	482f      	ldr	r0, [pc, #188]	; (8009170 <RadioSetTxGenericConfig+0x468>)
 80090b2:	f000 fe23 	bl	8009cfc <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80090b6:	4b2c      	ldr	r3, [pc, #176]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 80090b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090bc:	2b06      	cmp	r3, #6
 80090be:	d10d      	bne.n	80090dc <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80090c0:	f640 0089 	movw	r0, #2185	; 0x889
 80090c4:	f000 ff76 	bl	8009fb4 <SUBGRF_ReadRegister>
 80090c8:	4603      	mov	r3, r0
 80090ca:	f023 0304 	bic.w	r3, r3, #4
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	4619      	mov	r1, r3
 80090d2:	f640 0089 	movw	r0, #2185	; 0x889
 80090d6:	f000 ff59 	bl	8009f8c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 80090da:	e02d      	b.n	8009138 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80090dc:	f640 0089 	movw	r0, #2185	; 0x889
 80090e0:	f000 ff68 	bl	8009fb4 <SUBGRF_ReadRegister>
 80090e4:	4603      	mov	r3, r0
 80090e6:	f043 0304 	orr.w	r3, r3, #4
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	4619      	mov	r1, r3
 80090ee:	f640 0089 	movw	r0, #2185	; 0x889
 80090f2:	f000 ff4b 	bl	8009f8c <SUBGRF_WriteRegister>
        break;
 80090f6:	e01f      	b.n	8009138 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d004      	beq.n	800910a <RadioSetTxGenericConfig+0x402>
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009108:	d902      	bls.n	8009110 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800910a:	f04f 33ff 	mov.w	r3, #4294967295
 800910e:	e027      	b.n	8009160 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8009110:	2003      	movs	r0, #3
 8009112:	f7fe f905 	bl	8007320 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009116:	4b14      	ldr	r3, [pc, #80]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 8009118:	2202      	movs	r2, #2
 800911a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a11      	ldr	r2, [pc, #68]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 8009124:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009126:	4b10      	ldr	r3, [pc, #64]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 8009128:	2216      	movs	r2, #22
 800912a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800912e:	480f      	ldr	r0, [pc, #60]	; (800916c <RadioSetTxGenericConfig+0x464>)
 8009130:	f000 fd12 	bl	8009b58 <SUBGRF_SetModulationParams>
        break;
 8009134:	e000      	b.n	8009138 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8009136:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009138:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800913c:	4618      	mov	r0, r3
 800913e:	f001 f841 	bl	800a1c4 <SUBGRF_SetRfTxPower>
 8009142:	4603      	mov	r3, r0
 8009144:	461a      	mov	r2, r3
 8009146:	4b08      	ldr	r3, [pc, #32]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 8009148:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800914c:	4b06      	ldr	r3, [pc, #24]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 800914e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009152:	4618      	mov	r0, r3
 8009154:	f001 fa05 	bl	800a562 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009158:	4a03      	ldr	r2, [pc, #12]	; (8009168 <RadioSetTxGenericConfig+0x460>)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6053      	str	r3, [r2, #4]
    return 0;
 800915e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009160:	4618      	mov	r0, r3
 8009162:	3738      	adds	r7, #56	; 0x38
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	20000284 	.word	0x20000284
 800916c:	200002bc 	.word	0x200002bc
 8009170:	20000292 	.word	0x20000292

08009174 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d002      	beq.n	8009188 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8009182:	4a1a      	ldr	r2, [pc, #104]	; (80091ec <SUBGRF_Init+0x78>)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8009188:	f7f7 fc00 	bl	800098c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800918c:	2002      	movs	r0, #2
 800918e:	f001 f8e5 	bl	800a35c <Radio_SMPS_Set>

    ImageCalibrated = false;
 8009192:	4b17      	ldr	r3, [pc, #92]	; (80091f0 <SUBGRF_Init+0x7c>)
 8009194:	2200      	movs	r2, #0
 8009196:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8009198:	2000      	movs	r0, #0
 800919a:	f000 f977 	bl	800948c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800919e:	f001 fd03 	bl	800aba8 <RBI_IsTCXO>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d10e      	bne.n	80091c6 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80091a8:	2140      	movs	r1, #64	; 0x40
 80091aa:	2001      	movs	r0, #1
 80091ac:	f000 fb78 	bl	80098a0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80091b0:	2100      	movs	r1, #0
 80091b2:	f640 1011 	movw	r0, #2321	; 0x911
 80091b6:	f000 fee9 	bl	8009f8c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80091ba:	237f      	movs	r3, #127	; 0x7f
 80091bc:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80091be:	7b38      	ldrb	r0, [r7, #12]
 80091c0:	f000 fa85 	bl	80096ce <SUBGRF_Calibrate>
 80091c4:	e009      	b.n	80091da <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80091c6:	2120      	movs	r1, #32
 80091c8:	f640 1011 	movw	r0, #2321	; 0x911
 80091cc:	f000 fede 	bl	8009f8c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80091d0:	2120      	movs	r1, #32
 80091d2:	f640 1012 	movw	r0, #2322	; 0x912
 80091d6:	f000 fed9 	bl	8009f8c <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 80091da:	f001 fcc9 	bl	800ab70 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80091de:	4b05      	ldr	r3, [pc, #20]	; (80091f4 <SUBGRF_Init+0x80>)
 80091e0:	2201      	movs	r2, #1
 80091e2:	701a      	strb	r2, [r3, #0]
}
 80091e4:	bf00      	nop
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	2000031c 	.word	0x2000031c
 80091f0:	20000318 	.word	0x20000318
 80091f4:	20000310 	.word	0x20000310

080091f8 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80091f8:	b480      	push	{r7}
 80091fa:	af00      	add	r7, sp, #0
    return OperatingMode;
 80091fc:	4b02      	ldr	r3, [pc, #8]	; (8009208 <SUBGRF_GetOperatingMode+0x10>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
}
 8009200:	4618      	mov	r0, r3
 8009202:	46bd      	mov	sp, r7
 8009204:	bc80      	pop	{r7}
 8009206:	4770      	bx	lr
 8009208:	20000310 	.word	0x20000310

0800920c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	460b      	mov	r3, r1
 8009216:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009218:	78fb      	ldrb	r3, [r7, #3]
 800921a:	461a      	mov	r2, r3
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	2000      	movs	r0, #0
 8009220:	f000 ff20 	bl	800a064 <SUBGRF_WriteBuffer>
}
 8009224:	bf00      	nop
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b086      	sub	sp, #24
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	4613      	mov	r3, r2
 8009238:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800923e:	f107 0317 	add.w	r3, r7, #23
 8009242:	4619      	mov	r1, r3
 8009244:	68b8      	ldr	r0, [r7, #8]
 8009246:	f000 fe23 	bl	8009e90 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	79fa      	ldrb	r2, [r7, #7]
 8009250:	429a      	cmp	r2, r3
 8009252:	d201      	bcs.n	8009258 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009254:	2301      	movs	r3, #1
 8009256:	e007      	b.n	8009268 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009258:	7df8      	ldrb	r0, [r7, #23]
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	68f9      	ldr	r1, [r7, #12]
 8009262:	f000 ff21 	bl	800a0a8 <SUBGRF_ReadBuffer>

    return 0;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3718      	adds	r7, #24
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	460b      	mov	r3, r1
 800927a:	607a      	str	r2, [r7, #4]
 800927c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800927e:	7afb      	ldrb	r3, [r7, #11]
 8009280:	4619      	mov	r1, r3
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f7ff ffc2 	bl	800920c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f91b 	bl	80094c4 <SUBGRF_SetTx>
}
 800928e:	bf00      	nop
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b082      	sub	sp, #8
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800929e:	2208      	movs	r2, #8
 80092a0:	6879      	ldr	r1, [r7, #4]
 80092a2:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80092a6:	f000 fe99 	bl	8009fdc <SUBGRF_WriteRegisters>
    return 0;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	4603      	mov	r3, r0
 80092bc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80092be:	88fb      	ldrh	r3, [r7, #6]
 80092c0:	0a1b      	lsrs	r3, r3, #8
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80092c8:	88fb      	ldrh	r3, [r7, #6]
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80092ce:	f000 fb6b 	bl	80099a8 <SUBGRF_GetPacketType>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d108      	bne.n	80092ea <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80092d8:	f107 030c 	add.w	r3, r7, #12
 80092dc:	2202      	movs	r2, #2
 80092de:	4619      	mov	r1, r3
 80092e0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80092e4:	f000 fe7a 	bl	8009fdc <SUBGRF_WriteRegisters>
            break;
 80092e8:	e000      	b.n	80092ec <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80092ea:	bf00      	nop
    }
}
 80092ec:	bf00      	nop
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80092fe:	88fb      	ldrh	r3, [r7, #6]
 8009300:	0a1b      	lsrs	r3, r3, #8
 8009302:	b29b      	uxth	r3, r3
 8009304:	b2db      	uxtb	r3, r3
 8009306:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8009308:	88fb      	ldrh	r3, [r7, #6]
 800930a:	b2db      	uxtb	r3, r3
 800930c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800930e:	f000 fb4b 	bl	80099a8 <SUBGRF_GetPacketType>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d108      	bne.n	800932a <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8009318:	f107 030c 	add.w	r3, r7, #12
 800931c:	2202      	movs	r2, #2
 800931e:	4619      	mov	r1, r3
 8009320:	f240 60be 	movw	r0, #1726	; 0x6be
 8009324:	f000 fe5a 	bl	8009fdc <SUBGRF_WriteRegisters>
            break;
 8009328:	e000      	b.n	800932c <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800932a:	bf00      	nop
    }
}
 800932c:	bf00      	nop
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	4603      	mov	r3, r0
 800933c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8009342:	f000 fb31 	bl	80099a8 <SUBGRF_GetPacketType>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d121      	bne.n	8009390 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800934c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009350:	f000 fe30 	bl	8009fb4 <SUBGRF_ReadRegister>
 8009354:	4603      	mov	r3, r0
 8009356:	f023 0301 	bic.w	r3, r3, #1
 800935a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800935c:	88fb      	ldrh	r3, [r7, #6]
 800935e:	0a1b      	lsrs	r3, r3, #8
 8009360:	b29b      	uxth	r3, r3
 8009362:	b25b      	sxtb	r3, r3
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	b25a      	sxtb	r2, r3
 800936a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800936e:	4313      	orrs	r3, r2
 8009370:	b25b      	sxtb	r3, r3
 8009372:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8009374:	7bfb      	ldrb	r3, [r7, #15]
 8009376:	4619      	mov	r1, r3
 8009378:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800937c:	f000 fe06 	bl	8009f8c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8009380:	88fb      	ldrh	r3, [r7, #6]
 8009382:	b2db      	uxtb	r3, r3
 8009384:	4619      	mov	r1, r3
 8009386:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800938a:	f000 fdff 	bl	8009f8c <SUBGRF_WriteRegister>
            break;
 800938e:	e000      	b.n	8009392 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8009390:	bf00      	nop
    }
}
 8009392:	bf00      	nop
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b082      	sub	sp, #8
 800939e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80093a4:	2300      	movs	r3, #0
 80093a6:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80093a8:	2300      	movs	r3, #0
 80093aa:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80093ac:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80093b0:	f000 fe00 	bl	8009fb4 <SUBGRF_ReadRegister>
 80093b4:	4603      	mov	r3, r0
 80093b6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	f023 0301 	bic.w	r3, r3, #1
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	4619      	mov	r1, r3
 80093c2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80093c6:	f000 fde1 	bl	8009f8c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80093ca:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80093ce:	f000 fdf1 	bl	8009fb4 <SUBGRF_ReadRegister>
 80093d2:	4603      	mov	r3, r0
 80093d4:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80093d6:	79bb      	ldrb	r3, [r7, #6]
 80093d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	4619      	mov	r1, r3
 80093e0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80093e4:	f000 fdd2 	bl	8009f8c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80093e8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80093ec:	f000 f88a 	bl	8009504 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80093f0:	463b      	mov	r3, r7
 80093f2:	2204      	movs	r2, #4
 80093f4:	4619      	mov	r1, r3
 80093f6:	f640 0019 	movw	r0, #2073	; 0x819
 80093fa:	f000 fe11 	bl	800a020 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80093fe:	2000      	movs	r0, #0
 8009400:	f000 f844 	bl	800948c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009404:	79fb      	ldrb	r3, [r7, #7]
 8009406:	4619      	mov	r1, r3
 8009408:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800940c:	f000 fdbe 	bl	8009f8c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8009410:	79bb      	ldrb	r3, [r7, #6]
 8009412:	4619      	mov	r1, r3
 8009414:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009418:	f000 fdb8 	bl	8009f8c <SUBGRF_WriteRegister>

    return number;
 800941c:	683b      	ldr	r3, [r7, #0]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
	...

08009428 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8009430:	2000      	movs	r0, #0
 8009432:	f001 fba4 	bl	800ab7e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009436:	2002      	movs	r0, #2
 8009438:	f000 ff90 	bl	800a35c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800943c:	793b      	ldrb	r3, [r7, #4]
 800943e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009442:	b2db      	uxtb	r3, r3
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009448:	793b      	ldrb	r3, [r7, #4]
 800944a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800944e:	b2db      	uxtb	r3, r3
 8009450:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009452:	b25b      	sxtb	r3, r3
 8009454:	4313      	orrs	r3, r2
 8009456:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8009458:	793b      	ldrb	r3, [r7, #4]
 800945a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800945e:	b2db      	uxtb	r3, r3
 8009460:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009462:	4313      	orrs	r3, r2
 8009464:	b25b      	sxtb	r3, r3
 8009466:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009468:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800946a:	f107 030f 	add.w	r3, r7, #15
 800946e:	2201      	movs	r2, #1
 8009470:	4619      	mov	r1, r3
 8009472:	2084      	movs	r0, #132	; 0x84
 8009474:	f000 fe3a 	bl	800a0ec <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8009478:	4b03      	ldr	r3, [pc, #12]	; (8009488 <SUBGRF_SetSleep+0x60>)
 800947a:	2200      	movs	r2, #0
 800947c:	701a      	strb	r2, [r3, #0]
}
 800947e:	bf00      	nop
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20000310 	.word	0x20000310

0800948c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	4603      	mov	r3, r0
 8009494:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8009496:	1dfb      	adds	r3, r7, #7
 8009498:	2201      	movs	r2, #1
 800949a:	4619      	mov	r1, r3
 800949c:	2080      	movs	r0, #128	; 0x80
 800949e:	f000 fe25 	bl	800a0ec <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80094a2:	79fb      	ldrb	r3, [r7, #7]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d103      	bne.n	80094b0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80094a8:	4b05      	ldr	r3, [pc, #20]	; (80094c0 <SUBGRF_SetStandby+0x34>)
 80094aa:	2201      	movs	r2, #1
 80094ac:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80094ae:	e002      	b.n	80094b6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80094b0:	4b03      	ldr	r3, [pc, #12]	; (80094c0 <SUBGRF_SetStandby+0x34>)
 80094b2:	2202      	movs	r2, #2
 80094b4:	701a      	strb	r2, [r3, #0]
}
 80094b6:	bf00      	nop
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	20000310 	.word	0x20000310

080094c4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80094cc:	4b0c      	ldr	r3, [pc, #48]	; (8009500 <SUBGRF_SetTx+0x3c>)
 80094ce:	2204      	movs	r2, #4
 80094d0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	0c1b      	lsrs	r3, r3, #16
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	0a1b      	lsrs	r3, r3, #8
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80094e8:	f107 030c 	add.w	r3, r7, #12
 80094ec:	2203      	movs	r2, #3
 80094ee:	4619      	mov	r1, r3
 80094f0:	2083      	movs	r0, #131	; 0x83
 80094f2:	f000 fdfb 	bl	800a0ec <SUBGRF_WriteCommand>
}
 80094f6:	bf00      	nop
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	20000310 	.word	0x20000310

08009504 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800950c:	4b0c      	ldr	r3, [pc, #48]	; (8009540 <SUBGRF_SetRx+0x3c>)
 800950e:	2205      	movs	r2, #5
 8009510:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	0c1b      	lsrs	r3, r3, #16
 8009516:	b2db      	uxtb	r3, r3
 8009518:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	0a1b      	lsrs	r3, r3, #8
 800951e:	b2db      	uxtb	r3, r3
 8009520:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	b2db      	uxtb	r3, r3
 8009526:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009528:	f107 030c 	add.w	r3, r7, #12
 800952c:	2203      	movs	r2, #3
 800952e:	4619      	mov	r1, r3
 8009530:	2082      	movs	r0, #130	; 0x82
 8009532:	f000 fddb 	bl	800a0ec <SUBGRF_WriteCommand>
}
 8009536:	bf00      	nop
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20000310 	.word	0x20000310

08009544 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800954c:	4b0e      	ldr	r3, [pc, #56]	; (8009588 <SUBGRF_SetRxBoosted+0x44>)
 800954e:	2205      	movs	r2, #5
 8009550:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8009552:	2197      	movs	r1, #151	; 0x97
 8009554:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8009558:	f000 fd18 	bl	8009f8c <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	0c1b      	lsrs	r3, r3, #16
 8009560:	b2db      	uxtb	r3, r3
 8009562:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	0a1b      	lsrs	r3, r3, #8
 8009568:	b2db      	uxtb	r3, r3
 800956a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	b2db      	uxtb	r3, r3
 8009570:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009572:	f107 030c 	add.w	r3, r7, #12
 8009576:	2203      	movs	r2, #3
 8009578:	4619      	mov	r1, r3
 800957a:	2082      	movs	r0, #130	; 0x82
 800957c:	f000 fdb6 	bl	800a0ec <SUBGRF_WriteCommand>
}
 8009580:	bf00      	nop
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20000310 	.word	0x20000310

0800958c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	0c1b      	lsrs	r3, r3, #16
 800959a:	b2db      	uxtb	r3, r3
 800959c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	0a1b      	lsrs	r3, r3, #8
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	0c1b      	lsrs	r3, r3, #16
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	0a1b      	lsrs	r3, r3, #8
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80095c2:	f107 0308 	add.w	r3, r7, #8
 80095c6:	2206      	movs	r2, #6
 80095c8:	4619      	mov	r1, r3
 80095ca:	2094      	movs	r0, #148	; 0x94
 80095cc:	f000 fd8e 	bl	800a0ec <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80095d0:	4b03      	ldr	r3, [pc, #12]	; (80095e0 <SUBGRF_SetRxDutyCycle+0x54>)
 80095d2:	2206      	movs	r2, #6
 80095d4:	701a      	strb	r2, [r3, #0]
}
 80095d6:	bf00      	nop
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20000310 	.word	0x20000310

080095e4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80095e8:	2200      	movs	r2, #0
 80095ea:	2100      	movs	r1, #0
 80095ec:	20c5      	movs	r0, #197	; 0xc5
 80095ee:	f000 fd7d 	bl	800a0ec <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80095f2:	4b02      	ldr	r3, [pc, #8]	; (80095fc <SUBGRF_SetCad+0x18>)
 80095f4:	2207      	movs	r2, #7
 80095f6:	701a      	strb	r2, [r3, #0]
}
 80095f8:	bf00      	nop
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	20000310 	.word	0x20000310

08009600 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8009604:	2200      	movs	r2, #0
 8009606:	2100      	movs	r1, #0
 8009608:	20d1      	movs	r0, #209	; 0xd1
 800960a:	f000 fd6f 	bl	800a0ec <SUBGRF_WriteCommand>
}
 800960e:	bf00      	nop
 8009610:	bd80      	pop	{r7, pc}

08009612 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8009612:	b580      	push	{r7, lr}
 8009614:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8009616:	2200      	movs	r2, #0
 8009618:	2100      	movs	r1, #0
 800961a:	20d2      	movs	r0, #210	; 0xd2
 800961c:	f000 fd66 	bl	800a0ec <SUBGRF_WriteCommand>
}
 8009620:	bf00      	nop
 8009622:	bd80      	pop	{r7, pc}

08009624 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	4603      	mov	r3, r0
 800962c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800962e:	1dfb      	adds	r3, r7, #7
 8009630:	2201      	movs	r2, #1
 8009632:	4619      	mov	r1, r3
 8009634:	209f      	movs	r0, #159	; 0x9f
 8009636:	f000 fd59 	bl	800a0ec <SUBGRF_WriteCommand>
}
 800963a:	bf00      	nop
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b084      	sub	sp, #16
 8009646:	af00      	add	r7, sp, #0
 8009648:	4603      	mov	r3, r0
 800964a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800964c:	1dfb      	adds	r3, r7, #7
 800964e:	2201      	movs	r2, #1
 8009650:	4619      	mov	r1, r3
 8009652:	20a0      	movs	r0, #160	; 0xa0
 8009654:	f000 fd4a 	bl	800a0ec <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8009658:	79fb      	ldrb	r3, [r7, #7]
 800965a:	2b3f      	cmp	r3, #63	; 0x3f
 800965c:	d91c      	bls.n	8009698 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800965e:	79fb      	ldrb	r3, [r7, #7]
 8009660:	085b      	lsrs	r3, r3, #1
 8009662:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8009664:	2300      	movs	r3, #0
 8009666:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8009668:	2300      	movs	r3, #0
 800966a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800966c:	e005      	b.n	800967a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	089b      	lsrs	r3, r3, #2
 8009672:	73fb      	strb	r3, [r7, #15]
            exp++;
 8009674:	7bbb      	ldrb	r3, [r7, #14]
 8009676:	3301      	adds	r3, #1
 8009678:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800967a:	7bfb      	ldrb	r3, [r7, #15]
 800967c:	2b1f      	cmp	r3, #31
 800967e:	d8f6      	bhi.n	800966e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8009680:	7bfb      	ldrb	r3, [r7, #15]
 8009682:	00db      	lsls	r3, r3, #3
 8009684:	b2da      	uxtb	r2, r3
 8009686:	7bbb      	ldrb	r3, [r7, #14]
 8009688:	4413      	add	r3, r2
 800968a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800968c:	7b7b      	ldrb	r3, [r7, #13]
 800968e:	4619      	mov	r1, r3
 8009690:	f240 7006 	movw	r0, #1798	; 0x706
 8009694:	f000 fc7a 	bl	8009f8c <SUBGRF_WriteRegister>
    }
}
 8009698:	bf00      	nop
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80096a6:	f001 fa86 	bl	800abb6 <RBI_IsDCDC>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d102      	bne.n	80096b6 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80096b0:	2301      	movs	r3, #1
 80096b2:	71fb      	strb	r3, [r7, #7]
 80096b4:	e001      	b.n	80096ba <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80096b6:	2300      	movs	r3, #0
 80096b8:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80096ba:	1dfb      	adds	r3, r7, #7
 80096bc:	2201      	movs	r2, #1
 80096be:	4619      	mov	r1, r3
 80096c0:	2096      	movs	r0, #150	; 0x96
 80096c2:	f000 fd13 	bl	800a0ec <SUBGRF_WriteCommand>
}
 80096c6:	bf00      	nop
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b084      	sub	sp, #16
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80096d6:	793b      	ldrb	r3, [r7, #4]
 80096d8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	019b      	lsls	r3, r3, #6
 80096e0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80096e2:	793b      	ldrb	r3, [r7, #4]
 80096e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80096ec:	b25b      	sxtb	r3, r3
 80096ee:	4313      	orrs	r3, r2
 80096f0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80096f2:	793b      	ldrb	r3, [r7, #4]
 80096f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80096fc:	b25b      	sxtb	r3, r3
 80096fe:	4313      	orrs	r3, r2
 8009700:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009702:	793b      	ldrb	r3, [r7, #4]
 8009704:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009708:	b2db      	uxtb	r3, r3
 800970a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800970c:	b25b      	sxtb	r3, r3
 800970e:	4313      	orrs	r3, r2
 8009710:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009712:	793b      	ldrb	r3, [r7, #4]
 8009714:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009718:	b2db      	uxtb	r3, r3
 800971a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800971c:	b25b      	sxtb	r3, r3
 800971e:	4313      	orrs	r3, r2
 8009720:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009722:	793b      	ldrb	r3, [r7, #4]
 8009724:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009728:	b2db      	uxtb	r3, r3
 800972a:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800972c:	b25b      	sxtb	r3, r3
 800972e:	4313      	orrs	r3, r2
 8009730:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8009732:	793b      	ldrb	r3, [r7, #4]
 8009734:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009738:	b2db      	uxtb	r3, r3
 800973a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800973c:	4313      	orrs	r3, r2
 800973e:	b25b      	sxtb	r3, r3
 8009740:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009742:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8009744:	f107 030f 	add.w	r3, r7, #15
 8009748:	2201      	movs	r2, #1
 800974a:	4619      	mov	r1, r3
 800974c:	2089      	movs	r0, #137	; 0x89
 800974e:	f000 fccd 	bl	800a0ec <SUBGRF_WriteCommand>
}
 8009752:	bf00      	nop
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
	...

0800975c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a1b      	ldr	r2, [pc, #108]	; (80097d4 <SUBGRF_CalibrateImage+0x78>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d904      	bls.n	8009776 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800976c:	23e1      	movs	r3, #225	; 0xe1
 800976e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8009770:	23e9      	movs	r3, #233	; 0xe9
 8009772:	737b      	strb	r3, [r7, #13]
 8009774:	e022      	b.n	80097bc <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a17      	ldr	r2, [pc, #92]	; (80097d8 <SUBGRF_CalibrateImage+0x7c>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d904      	bls.n	8009788 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800977e:	23d7      	movs	r3, #215	; 0xd7
 8009780:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8009782:	23db      	movs	r3, #219	; 0xdb
 8009784:	737b      	strb	r3, [r7, #13]
 8009786:	e019      	b.n	80097bc <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a14      	ldr	r2, [pc, #80]	; (80097dc <SUBGRF_CalibrateImage+0x80>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d904      	bls.n	800979a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8009790:	23c1      	movs	r3, #193	; 0xc1
 8009792:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8009794:	23c5      	movs	r3, #197	; 0xc5
 8009796:	737b      	strb	r3, [r7, #13]
 8009798:	e010      	b.n	80097bc <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a10      	ldr	r2, [pc, #64]	; (80097e0 <SUBGRF_CalibrateImage+0x84>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d904      	bls.n	80097ac <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80097a2:	2375      	movs	r3, #117	; 0x75
 80097a4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80097a6:	2381      	movs	r3, #129	; 0x81
 80097a8:	737b      	strb	r3, [r7, #13]
 80097aa:	e007      	b.n	80097bc <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a0d      	ldr	r2, [pc, #52]	; (80097e4 <SUBGRF_CalibrateImage+0x88>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d903      	bls.n	80097bc <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80097b4:	236b      	movs	r3, #107	; 0x6b
 80097b6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80097b8:	236f      	movs	r3, #111	; 0x6f
 80097ba:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80097bc:	f107 030c 	add.w	r3, r7, #12
 80097c0:	2202      	movs	r2, #2
 80097c2:	4619      	mov	r1, r3
 80097c4:	2098      	movs	r0, #152	; 0x98
 80097c6:	f000 fc91 	bl	800a0ec <SUBGRF_WriteCommand>
}
 80097ca:	bf00      	nop
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	35a4e900 	.word	0x35a4e900
 80097d8:	32a9f880 	.word	0x32a9f880
 80097dc:	2de54480 	.word	0x2de54480
 80097e0:	1b6b0b00 	.word	0x1b6b0b00
 80097e4:	1954fc40 	.word	0x1954fc40

080097e8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80097e8:	b590      	push	{r4, r7, lr}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	4604      	mov	r4, r0
 80097f0:	4608      	mov	r0, r1
 80097f2:	4611      	mov	r1, r2
 80097f4:	461a      	mov	r2, r3
 80097f6:	4623      	mov	r3, r4
 80097f8:	71fb      	strb	r3, [r7, #7]
 80097fa:	4603      	mov	r3, r0
 80097fc:	71bb      	strb	r3, [r7, #6]
 80097fe:	460b      	mov	r3, r1
 8009800:	717b      	strb	r3, [r7, #5]
 8009802:	4613      	mov	r3, r2
 8009804:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8009806:	79fb      	ldrb	r3, [r7, #7]
 8009808:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800980a:	79bb      	ldrb	r3, [r7, #6]
 800980c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800980e:	797b      	ldrb	r3, [r7, #5]
 8009810:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8009812:	793b      	ldrb	r3, [r7, #4]
 8009814:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8009816:	f107 030c 	add.w	r3, r7, #12
 800981a:	2204      	movs	r2, #4
 800981c:	4619      	mov	r1, r3
 800981e:	2095      	movs	r0, #149	; 0x95
 8009820:	f000 fc64 	bl	800a0ec <SUBGRF_WriteCommand>
}
 8009824:	bf00      	nop
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	bd90      	pop	{r4, r7, pc}

0800982c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800982c:	b590      	push	{r4, r7, lr}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	4611      	mov	r1, r2
 8009838:	461a      	mov	r2, r3
 800983a:	4623      	mov	r3, r4
 800983c:	80fb      	strh	r3, [r7, #6]
 800983e:	4603      	mov	r3, r0
 8009840:	80bb      	strh	r3, [r7, #4]
 8009842:	460b      	mov	r3, r1
 8009844:	807b      	strh	r3, [r7, #2]
 8009846:	4613      	mov	r3, r2
 8009848:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800984a:	88fb      	ldrh	r3, [r7, #6]
 800984c:	0a1b      	lsrs	r3, r3, #8
 800984e:	b29b      	uxth	r3, r3
 8009850:	b2db      	uxtb	r3, r3
 8009852:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8009854:	88fb      	ldrh	r3, [r7, #6]
 8009856:	b2db      	uxtb	r3, r3
 8009858:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800985a:	88bb      	ldrh	r3, [r7, #4]
 800985c:	0a1b      	lsrs	r3, r3, #8
 800985e:	b29b      	uxth	r3, r3
 8009860:	b2db      	uxtb	r3, r3
 8009862:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8009864:	88bb      	ldrh	r3, [r7, #4]
 8009866:	b2db      	uxtb	r3, r3
 8009868:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800986a:	887b      	ldrh	r3, [r7, #2]
 800986c:	0a1b      	lsrs	r3, r3, #8
 800986e:	b29b      	uxth	r3, r3
 8009870:	b2db      	uxtb	r3, r3
 8009872:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8009874:	887b      	ldrh	r3, [r7, #2]
 8009876:	b2db      	uxtb	r3, r3
 8009878:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800987a:	883b      	ldrh	r3, [r7, #0]
 800987c:	0a1b      	lsrs	r3, r3, #8
 800987e:	b29b      	uxth	r3, r3
 8009880:	b2db      	uxtb	r3, r3
 8009882:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8009884:	883b      	ldrh	r3, [r7, #0]
 8009886:	b2db      	uxtb	r3, r3
 8009888:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800988a:	f107 0308 	add.w	r3, r7, #8
 800988e:	2208      	movs	r2, #8
 8009890:	4619      	mov	r1, r3
 8009892:	2008      	movs	r0, #8
 8009894:	f000 fc2a 	bl	800a0ec <SUBGRF_WriteCommand>
}
 8009898:	bf00      	nop
 800989a:	3714      	adds	r7, #20
 800989c:	46bd      	mov	sp, r7
 800989e:	bd90      	pop	{r4, r7, pc}

080098a0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	4603      	mov	r3, r0
 80098a8:	6039      	str	r1, [r7, #0]
 80098aa:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80098ac:	79fb      	ldrb	r3, [r7, #7]
 80098ae:	f003 0307 	and.w	r3, r3, #7
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	0c1b      	lsrs	r3, r3, #16
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	0a1b      	lsrs	r3, r3, #8
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80098cc:	f107 030c 	add.w	r3, r7, #12
 80098d0:	2204      	movs	r2, #4
 80098d2:	4619      	mov	r1, r3
 80098d4:	2097      	movs	r0, #151	; 0x97
 80098d6:	f000 fc09 	bl	800a0ec <SUBGRF_WriteCommand>
}
 80098da:	bf00      	nop
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
	...

080098e4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80098e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80098e8:	b084      	sub	sp, #16
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80098f2:	4b1d      	ldr	r3, [pc, #116]	; (8009968 <SUBGRF_SetRfFrequency+0x84>)
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	f083 0301 	eor.w	r3, r3, #1
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d005      	beq.n	800990c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7ff ff2b 	bl	800975c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8009906:	4b18      	ldr	r3, [pc, #96]	; (8009968 <SUBGRF_SetRfFrequency+0x84>)
 8009908:	2201      	movs	r2, #1
 800990a:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	461c      	mov	r4, r3
 8009912:	4615      	mov	r5, r2
 8009914:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009918:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800991c:	4a13      	ldr	r2, [pc, #76]	; (800996c <SUBGRF_SetRfFrequency+0x88>)
 800991e:	f04f 0300 	mov.w	r3, #0
 8009922:	4640      	mov	r0, r8
 8009924:	4649      	mov	r1, r9
 8009926:	f7f6 fc2f 	bl	8000188 <__aeabi_uldivmod>
 800992a:	4602      	mov	r2, r0
 800992c:	460b      	mov	r3, r1
 800992e:	4613      	mov	r3, r2
 8009930:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	0e1b      	lsrs	r3, r3, #24
 8009936:	b2db      	uxtb	r3, r3
 8009938:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	0c1b      	lsrs	r3, r3, #16
 800993e:	b2db      	uxtb	r3, r3
 8009940:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	0a1b      	lsrs	r3, r3, #8
 8009946:	b2db      	uxtb	r3, r3
 8009948:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	b2db      	uxtb	r3, r3
 800994e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8009950:	f107 0308 	add.w	r3, r7, #8
 8009954:	2204      	movs	r2, #4
 8009956:	4619      	mov	r1, r3
 8009958:	2086      	movs	r0, #134	; 0x86
 800995a:	f000 fbc7 	bl	800a0ec <SUBGRF_WriteCommand>
}
 800995e:	bf00      	nop
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009968:	20000318 	.word	0x20000318
 800996c:	01e84800 	.word	0x01e84800

08009970 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	4603      	mov	r3, r0
 8009978:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800997a:	79fa      	ldrb	r2, [r7, #7]
 800997c:	4b09      	ldr	r3, [pc, #36]	; (80099a4 <SUBGRF_SetPacketType+0x34>)
 800997e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8009980:	79fb      	ldrb	r3, [r7, #7]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d104      	bne.n	8009990 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8009986:	2100      	movs	r1, #0
 8009988:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800998c:	f000 fafe 	bl	8009f8c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8009990:	1dfb      	adds	r3, r7, #7
 8009992:	2201      	movs	r2, #1
 8009994:	4619      	mov	r1, r3
 8009996:	208a      	movs	r0, #138	; 0x8a
 8009998:	f000 fba8 	bl	800a0ec <SUBGRF_WriteCommand>
}
 800999c:	bf00      	nop
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	20000311 	.word	0x20000311

080099a8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80099a8:	b480      	push	{r7}
 80099aa:	af00      	add	r7, sp, #0
    return PacketType;
 80099ac:	4b02      	ldr	r3, [pc, #8]	; (80099b8 <SUBGRF_GetPacketType+0x10>)
 80099ae:	781b      	ldrb	r3, [r3, #0]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bc80      	pop	{r7}
 80099b6:	4770      	bx	lr
 80099b8:	20000311 	.word	0x20000311

080099bc <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	71fb      	strb	r3, [r7, #7]
 80099c6:	460b      	mov	r3, r1
 80099c8:	71bb      	strb	r3, [r7, #6]
 80099ca:	4613      	mov	r3, r2
 80099cc:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80099ce:	79fb      	ldrb	r3, [r7, #7]
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d149      	bne.n	8009a68 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80099d4:	2000      	movs	r0, #0
 80099d6:	f001 f8f5 	bl	800abc4 <RBI_GetRFOMaxPowerConfig>
 80099da:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80099dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	da01      	bge.n	80099ea <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2b0e      	cmp	r3, #14
 80099ee:	d10e      	bne.n	8009a0e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80099f0:	2301      	movs	r3, #1
 80099f2:	2201      	movs	r2, #1
 80099f4:	2100      	movs	r1, #0
 80099f6:	2004      	movs	r0, #4
 80099f8:	f7ff fef6 	bl	80097e8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80099fc:	79ba      	ldrb	r2, [r7, #6]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	330e      	adds	r3, #14
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	71bb      	strb	r3, [r7, #6]
 8009a0c:	e01f      	b.n	8009a4e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2b0a      	cmp	r3, #10
 8009a12:	d10e      	bne.n	8009a32 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8009a14:	2301      	movs	r3, #1
 8009a16:	2201      	movs	r2, #1
 8009a18:	2100      	movs	r1, #0
 8009a1a:	2001      	movs	r0, #1
 8009a1c:	f7ff fee4 	bl	80097e8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8009a20:	79ba      	ldrb	r2, [r7, #6]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	330d      	adds	r3, #13
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	71bb      	strb	r3, [r7, #6]
 8009a30:	e00d      	b.n	8009a4e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 8009a32:	2301      	movs	r3, #1
 8009a34:	2201      	movs	r2, #1
 8009a36:	2100      	movs	r1, #0
 8009a38:	2006      	movs	r0, #6
 8009a3a:	f7ff fed5 	bl	80097e8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009a3e:	79ba      	ldrb	r2, [r7, #6]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	330e      	adds	r3, #14
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8009a4e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009a52:	f113 0f11 	cmn.w	r3, #17
 8009a56:	da01      	bge.n	8009a5c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8009a58:	23ef      	movs	r3, #239	; 0xef
 8009a5a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8009a5c:	2118      	movs	r1, #24
 8009a5e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009a62:	f000 fa93 	bl	8009f8c <SUBGRF_WriteRegister>
 8009a66:	e067      	b.n	8009b38 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8009a68:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009a6c:	f000 faa2 	bl	8009fb4 <SUBGRF_ReadRegister>
 8009a70:	4603      	mov	r3, r0
 8009a72:	f043 031e 	orr.w	r3, r3, #30
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	4619      	mov	r1, r3
 8009a7a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009a7e:	f000 fa85 	bl	8009f8c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8009a82:	2001      	movs	r0, #1
 8009a84:	f001 f89e 	bl	800abc4 <RBI_GetRFOMaxPowerConfig>
 8009a88:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8009a8a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	da01      	bge.n	8009a98 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2b14      	cmp	r3, #20
 8009a9c:	d10e      	bne.n	8009abc <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2105      	movs	r1, #5
 8009aa4:	2003      	movs	r0, #3
 8009aa6:	f7ff fe9f 	bl	80097e8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009aaa:	79ba      	ldrb	r2, [r7, #6]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	3316      	adds	r3, #22
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	71bb      	strb	r3, [r7, #6]
 8009aba:	e031      	b.n	8009b20 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2b11      	cmp	r3, #17
 8009ac0:	d10e      	bne.n	8009ae0 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	2103      	movs	r1, #3
 8009ac8:	2002      	movs	r0, #2
 8009aca:	f7ff fe8d 	bl	80097e8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009ace:	79ba      	ldrb	r2, [r7, #6]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	3316      	adds	r3, #22
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	71bb      	strb	r3, [r7, #6]
 8009ade:	e01f      	b.n	8009b20 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2b0e      	cmp	r3, #14
 8009ae4:	d10e      	bne.n	8009b04 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	2200      	movs	r2, #0
 8009aea:	2102      	movs	r1, #2
 8009aec:	2002      	movs	r0, #2
 8009aee:	f7ff fe7b 	bl	80097e8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009af2:	79ba      	ldrb	r2, [r7, #6]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	330e      	adds	r3, #14
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	71bb      	strb	r3, [r7, #6]
 8009b02:	e00d      	b.n	8009b20 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009b04:	2301      	movs	r3, #1
 8009b06:	2200      	movs	r2, #0
 8009b08:	2107      	movs	r1, #7
 8009b0a:	2004      	movs	r0, #4
 8009b0c:	f7ff fe6c 	bl	80097e8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009b10:	79ba      	ldrb	r2, [r7, #6]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	3316      	adds	r3, #22
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8009b20:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009b24:	f113 0f09 	cmn.w	r3, #9
 8009b28:	da01      	bge.n	8009b2e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8009b2a:	23f7      	movs	r3, #247	; 0xf7
 8009b2c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8009b2e:	2138      	movs	r1, #56	; 0x38
 8009b30:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009b34:	f000 fa2a 	bl	8009f8c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009b38:	79bb      	ldrb	r3, [r7, #6]
 8009b3a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009b3c:	797b      	ldrb	r3, [r7, #5]
 8009b3e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009b40:	f107 0308 	add.w	r3, r7, #8
 8009b44:	2202      	movs	r2, #2
 8009b46:	4619      	mov	r1, r3
 8009b48:	208e      	movs	r0, #142	; 0x8e
 8009b4a:	f000 facf 	bl	800a0ec <SUBGRF_WriteCommand>
}
 8009b4e:	bf00      	nop
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
	...

08009b58 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009b58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009b5c:	b086      	sub	sp, #24
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009b66:	4a61      	ldr	r2, [pc, #388]	; (8009cec <SUBGRF_SetModulationParams+0x194>)
 8009b68:	f107 0308 	add.w	r3, r7, #8
 8009b6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b70:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	781a      	ldrb	r2, [r3, #0]
 8009b78:	4b5d      	ldr	r3, [pc, #372]	; (8009cf0 <SUBGRF_SetModulationParams+0x198>)
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d004      	beq.n	8009b8a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7ff fef3 	bl	8009970 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	2b03      	cmp	r3, #3
 8009b90:	f200 80a5 	bhi.w	8009cde <SUBGRF_SetModulationParams+0x186>
 8009b94:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <SUBGRF_SetModulationParams+0x44>)
 8009b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9a:	bf00      	nop
 8009b9c:	08009bad 	.word	0x08009bad
 8009ba0:	08009c6d 	.word	0x08009c6d
 8009ba4:	08009c2f 	.word	0x08009c2f
 8009ba8:	08009c9b 	.word	0x08009c9b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8009bac:	2308      	movs	r3, #8
 8009bae:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	4a4f      	ldr	r2, [pc, #316]	; (8009cf4 <SUBGRF_SetModulationParams+0x19c>)
 8009bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bba:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	0c1b      	lsrs	r3, r3, #16
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	0a1b      	lsrs	r3, r3, #8
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	7b1b      	ldrb	r3, [r3, #12]
 8009bd6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	7b5b      	ldrb	r3, [r3, #13]
 8009bdc:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	2200      	movs	r2, #0
 8009be4:	461c      	mov	r4, r3
 8009be6:	4615      	mov	r5, r2
 8009be8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009bec:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009bf0:	4a41      	ldr	r2, [pc, #260]	; (8009cf8 <SUBGRF_SetModulationParams+0x1a0>)
 8009bf2:	f04f 0300 	mov.w	r3, #0
 8009bf6:	4640      	mov	r0, r8
 8009bf8:	4649      	mov	r1, r9
 8009bfa:	f7f6 fac5 	bl	8000188 <__aeabi_uldivmod>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	4613      	mov	r3, r2
 8009c04:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	0c1b      	lsrs	r3, r3, #16
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	0a1b      	lsrs	r3, r3, #8
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009c1c:	7cfb      	ldrb	r3, [r7, #19]
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	f107 0308 	add.w	r3, r7, #8
 8009c24:	4619      	mov	r1, r3
 8009c26:	208b      	movs	r0, #139	; 0x8b
 8009c28:	f000 fa60 	bl	800a0ec <SUBGRF_WriteCommand>
        break;
 8009c2c:	e058      	b.n	8009ce0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8009c2e:	2304      	movs	r3, #4
 8009c30:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	4a2f      	ldr	r2, [pc, #188]	; (8009cf4 <SUBGRF_SetModulationParams+0x19c>)
 8009c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c3c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	0c1b      	lsrs	r3, r3, #16
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	0a1b      	lsrs	r3, r3, #8
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	7d1b      	ldrb	r3, [r3, #20]
 8009c58:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009c5a:	7cfb      	ldrb	r3, [r7, #19]
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	f107 0308 	add.w	r3, r7, #8
 8009c62:	4619      	mov	r1, r3
 8009c64:	208b      	movs	r0, #139	; 0x8b
 8009c66:	f000 fa41 	bl	800a0ec <SUBGRF_WriteCommand>
        break;
 8009c6a:	e039      	b.n	8009ce0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8009c6c:	2304      	movs	r3, #4
 8009c6e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	7e1b      	ldrb	r3, [r3, #24]
 8009c74:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	7e5b      	ldrb	r3, [r3, #25]
 8009c7a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	7e9b      	ldrb	r3, [r3, #26]
 8009c80:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	7edb      	ldrb	r3, [r3, #27]
 8009c86:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009c88:	7cfb      	ldrb	r3, [r7, #19]
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	f107 0308 	add.w	r3, r7, #8
 8009c90:	4619      	mov	r1, r3
 8009c92:	208b      	movs	r0, #139	; 0x8b
 8009c94:	f000 fa2a 	bl	800a0ec <SUBGRF_WriteCommand>

        break;
 8009c98:	e022      	b.n	8009ce0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8009c9a:	2305      	movs	r3, #5
 8009c9c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	4a14      	ldr	r2, [pc, #80]	; (8009cf4 <SUBGRF_SetModulationParams+0x19c>)
 8009ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ca8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	0c1b      	lsrs	r3, r3, #16
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	0a1b      	lsrs	r3, r3, #8
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	7b1b      	ldrb	r3, [r3, #12]
 8009cc4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	7b5b      	ldrb	r3, [r3, #13]
 8009cca:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009ccc:	7cfb      	ldrb	r3, [r7, #19]
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	f107 0308 	add.w	r3, r7, #8
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	208b      	movs	r0, #139	; 0x8b
 8009cd8:	f000 fa08 	bl	800a0ec <SUBGRF_WriteCommand>
        break;
 8009cdc:	e000      	b.n	8009ce0 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8009cde:	bf00      	nop
    }
}
 8009ce0:	bf00      	nop
 8009ce2:	3718      	adds	r7, #24
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009cea:	bf00      	nop
 8009cec:	0800c218 	.word	0x0800c218
 8009cf0:	20000311 	.word	0x20000311
 8009cf4:	3d090000 	.word	0x3d090000
 8009cf8:	01e84800 	.word	0x01e84800

08009cfc <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009d04:	2300      	movs	r3, #0
 8009d06:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009d08:	4a48      	ldr	r2, [pc, #288]	; (8009e2c <SUBGRF_SetPacketParams+0x130>)
 8009d0a:	f107 030c 	add.w	r3, r7, #12
 8009d0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009d10:	c303      	stmia	r3!, {r0, r1}
 8009d12:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	781a      	ldrb	r2, [r3, #0]
 8009d18:	4b45      	ldr	r3, [pc, #276]	; (8009e30 <SUBGRF_SetPacketParams+0x134>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d004      	beq.n	8009d2a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7ff fe23 	bl	8009970 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	2b03      	cmp	r3, #3
 8009d30:	d878      	bhi.n	8009e24 <SUBGRF_SetPacketParams+0x128>
 8009d32:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <SUBGRF_SetPacketParams+0x3c>)
 8009d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d38:	08009d49 	.word	0x08009d49
 8009d3c:	08009dd9 	.word	0x08009dd9
 8009d40:	08009dcd 	.word	0x08009dcd
 8009d44:	08009d49 	.word	0x08009d49
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	7a5b      	ldrb	r3, [r3, #9]
 8009d4c:	2bf1      	cmp	r3, #241	; 0xf1
 8009d4e:	d10a      	bne.n	8009d66 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009d50:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009d54:	f7ff faae 	bl	80092b4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8009d58:	f248 0005 	movw	r0, #32773	; 0x8005
 8009d5c:	f7ff faca 	bl	80092f4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8009d60:	2302      	movs	r3, #2
 8009d62:	75bb      	strb	r3, [r7, #22]
 8009d64:	e011      	b.n	8009d8a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	7a5b      	ldrb	r3, [r3, #9]
 8009d6a:	2bf2      	cmp	r3, #242	; 0xf2
 8009d6c:	d10a      	bne.n	8009d84 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8009d6e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8009d72:	f7ff fa9f 	bl	80092b4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8009d76:	f241 0021 	movw	r0, #4129	; 0x1021
 8009d7a:	f7ff fabb 	bl	80092f4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8009d7e:	2306      	movs	r3, #6
 8009d80:	75bb      	strb	r3, [r7, #22]
 8009d82:	e002      	b.n	8009d8a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	7a5b      	ldrb	r3, [r3, #9]
 8009d88:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8009d8a:	2309      	movs	r3, #9
 8009d8c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	885b      	ldrh	r3, [r3, #2]
 8009d92:	0a1b      	lsrs	r3, r3, #8
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	885b      	ldrh	r3, [r3, #2]
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	791b      	ldrb	r3, [r3, #4]
 8009da6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	795b      	ldrb	r3, [r3, #5]
 8009dac:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	799b      	ldrb	r3, [r3, #6]
 8009db2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	79db      	ldrb	r3, [r3, #7]
 8009db8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	7a1b      	ldrb	r3, [r3, #8]
 8009dbe:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8009dc0:	7dbb      	ldrb	r3, [r7, #22]
 8009dc2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	7a9b      	ldrb	r3, [r3, #10]
 8009dc8:	753b      	strb	r3, [r7, #20]
        break;
 8009dca:	e022      	b.n	8009e12 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	7b1b      	ldrb	r3, [r3, #12]
 8009dd4:	733b      	strb	r3, [r7, #12]
        break;
 8009dd6:	e01c      	b.n	8009e12 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8009dd8:	2306      	movs	r3, #6
 8009dda:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	89db      	ldrh	r3, [r3, #14]
 8009de0:	0a1b      	lsrs	r3, r3, #8
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	89db      	ldrh	r3, [r3, #14]
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	7c1a      	ldrb	r2, [r3, #16]
 8009df4:	4b0f      	ldr	r3, [pc, #60]	; (8009e34 <SUBGRF_SetPacketParams+0x138>)
 8009df6:	4611      	mov	r1, r2
 8009df8:	7019      	strb	r1, [r3, #0]
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	7c5b      	ldrb	r3, [r3, #17]
 8009e02:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	7c9b      	ldrb	r3, [r3, #18]
 8009e08:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	7cdb      	ldrb	r3, [r3, #19]
 8009e0e:	747b      	strb	r3, [r7, #17]
        break;
 8009e10:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8009e12:	7dfb      	ldrb	r3, [r7, #23]
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	f107 030c 	add.w	r3, r7, #12
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	208c      	movs	r0, #140	; 0x8c
 8009e1e:	f000 f965 	bl	800a0ec <SUBGRF_WriteCommand>
 8009e22:	e000      	b.n	8009e26 <SUBGRF_SetPacketParams+0x12a>
        return;
 8009e24:	bf00      	nop
}
 8009e26:	3718      	adds	r7, #24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	0800c220 	.word	0x0800c220
 8009e30:	20000311 	.word	0x20000311
 8009e34:	20000312 	.word	0x20000312

08009e38 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	4603      	mov	r3, r0
 8009e40:	460a      	mov	r2, r1
 8009e42:	71fb      	strb	r3, [r7, #7]
 8009e44:	4613      	mov	r3, r2
 8009e46:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8009e48:	79fb      	ldrb	r3, [r7, #7]
 8009e4a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009e4c:	79bb      	ldrb	r3, [r7, #6]
 8009e4e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8009e50:	f107 030c 	add.w	r3, r7, #12
 8009e54:	2202      	movs	r2, #2
 8009e56:	4619      	mov	r1, r3
 8009e58:	208f      	movs	r0, #143	; 0x8f
 8009e5a:	f000 f947 	bl	800a0ec <SUBGRF_WriteCommand>
}
 8009e5e:	bf00      	nop
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b082      	sub	sp, #8
 8009e6a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8009e70:	1d3b      	adds	r3, r7, #4
 8009e72:	2201      	movs	r2, #1
 8009e74:	4619      	mov	r1, r3
 8009e76:	2015      	movs	r0, #21
 8009e78:	f000 f95a 	bl	800a130 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8009e7c:	793b      	ldrb	r3, [r7, #4]
 8009e7e:	425b      	negs	r3, r3
 8009e80:	105b      	asrs	r3, r3, #1
 8009e82:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8009e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8009e9a:	f107 030c 	add.w	r3, r7, #12
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	2013      	movs	r0, #19
 8009ea4:	f000 f944 	bl	800a130 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8009ea8:	f7ff fd7e 	bl	80099a8 <SUBGRF_GetPacketType>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d10d      	bne.n	8009ece <SUBGRF_GetRxBufferStatus+0x3e>
 8009eb2:	4b0c      	ldr	r3, [pc, #48]	; (8009ee4 <SUBGRF_GetRxBufferStatus+0x54>)
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d108      	bne.n	8009ece <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8009ebc:	f240 7002 	movw	r0, #1794	; 0x702
 8009ec0:	f000 f878 	bl	8009fb4 <SUBGRF_ReadRegister>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	701a      	strb	r2, [r3, #0]
 8009ecc:	e002      	b.n	8009ed4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8009ece:	7b3a      	ldrb	r2, [r7, #12]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8009ed4:	7b7a      	ldrb	r2, [r7, #13]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	701a      	strb	r2, [r3, #0]
}
 8009eda:	bf00      	nop
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20000312 	.word	0x20000312

08009ee8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8009ef0:	f107 030c 	add.w	r3, r7, #12
 8009ef4:	2203      	movs	r2, #3
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	2014      	movs	r0, #20
 8009efa:	f000 f919 	bl	800a130 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8009efe:	f7ff fd53 	bl	80099a8 <SUBGRF_GetPacketType>
 8009f02:	4603      	mov	r3, r0
 8009f04:	461a      	mov	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d002      	beq.n	8009f18 <SUBGRF_GetPacketStatus+0x30>
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d013      	beq.n	8009f3e <SUBGRF_GetPacketStatus+0x56>
 8009f16:	e02a      	b.n	8009f6e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8009f18:	7b3a      	ldrb	r2, [r7, #12]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8009f1e:	7b7b      	ldrb	r3, [r7, #13]
 8009f20:	425b      	negs	r3, r3
 8009f22:	105b      	asrs	r3, r3, #1
 8009f24:	b25a      	sxtb	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
 8009f2c:	425b      	negs	r3, r3
 8009f2e:	105b      	asrs	r3, r3, #1
 8009f30:	b25a      	sxtb	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	609a      	str	r2, [r3, #8]
            break;
 8009f3c:	e020      	b.n	8009f80 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8009f3e:	7b3b      	ldrb	r3, [r7, #12]
 8009f40:	425b      	negs	r3, r3
 8009f42:	105b      	asrs	r3, r3, #1
 8009f44:	b25a      	sxtb	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8009f4a:	7b7b      	ldrb	r3, [r7, #13]
 8009f4c:	b25b      	sxtb	r3, r3
 8009f4e:	3302      	adds	r3, #2
 8009f50:	109b      	asrs	r3, r3, #2
 8009f52:	b25a      	sxtb	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8009f58:	7bbb      	ldrb	r3, [r7, #14]
 8009f5a:	425b      	negs	r3, r3
 8009f5c:	105b      	asrs	r3, r3, #1
 8009f5e:	b25a      	sxtb	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8009f64:	4b08      	ldr	r3, [pc, #32]	; (8009f88 <SUBGRF_GetPacketStatus+0xa0>)
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	611a      	str	r2, [r3, #16]
            break;
 8009f6c:	e008      	b.n	8009f80 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8009f6e:	2214      	movs	r2, #20
 8009f70:	2100      	movs	r1, #0
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fef9 	bl	800ad6a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	220f      	movs	r2, #15
 8009f7c:	701a      	strb	r2, [r3, #0]
            break;
 8009f7e:	bf00      	nop
    }
}
 8009f80:	bf00      	nop
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	20000314 	.word	0x20000314

08009f8c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	4603      	mov	r3, r0
 8009f94:	460a      	mov	r2, r1
 8009f96:	80fb      	strh	r3, [r7, #6]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8009f9c:	1d7a      	adds	r2, r7, #5
 8009f9e:	88f9      	ldrh	r1, [r7, #6]
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	4803      	ldr	r0, [pc, #12]	; (8009fb0 <SUBGRF_WriteRegister+0x24>)
 8009fa4:	f7fa fc00 	bl	80047a8 <HAL_SUBGHZ_WriteRegisters>
}
 8009fa8:	bf00      	nop
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	20000070 	.word	0x20000070

08009fb4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	4603      	mov	r3, r0
 8009fbc:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8009fbe:	f107 020f 	add.w	r2, r7, #15
 8009fc2:	88f9      	ldrh	r1, [r7, #6]
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	4804      	ldr	r0, [pc, #16]	; (8009fd8 <SUBGRF_ReadRegister+0x24>)
 8009fc8:	f7fa fc4d 	bl	8004866 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20000070 	.word	0x20000070

08009fdc <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	6039      	str	r1, [r7, #0]
 8009fe6:	80fb      	strh	r3, [r7, #6]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fec:	f3ef 8310 	mrs	r3, PRIMASK
 8009ff0:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009ff4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ff6:	b672      	cpsid	i
}
 8009ff8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8009ffa:	88bb      	ldrh	r3, [r7, #4]
 8009ffc:	88f9      	ldrh	r1, [r7, #6]
 8009ffe:	683a      	ldr	r2, [r7, #0]
 800a000:	4806      	ldr	r0, [pc, #24]	; (800a01c <SUBGRF_WriteRegisters+0x40>)
 800a002:	f7fa fbd1 	bl	80047a8 <HAL_SUBGHZ_WriteRegisters>
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	f383 8810 	msr	PRIMASK, r3
}
 800a010:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a012:	bf00      	nop
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	20000070 	.word	0x20000070

0800a020 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	6039      	str	r1, [r7, #0]
 800a02a:	80fb      	strh	r3, [r7, #6]
 800a02c:	4613      	mov	r3, r2
 800a02e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a030:	f3ef 8310 	mrs	r3, PRIMASK
 800a034:	60fb      	str	r3, [r7, #12]
  return(result);
 800a036:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a038:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a03a:	b672      	cpsid	i
}
 800a03c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800a03e:	88bb      	ldrh	r3, [r7, #4]
 800a040:	88f9      	ldrh	r1, [r7, #6]
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	4806      	ldr	r0, [pc, #24]	; (800a060 <SUBGRF_ReadRegisters+0x40>)
 800a046:	f7fa fc0e 	bl	8004866 <HAL_SUBGHZ_ReadRegisters>
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	f383 8810 	msr	PRIMASK, r3
}
 800a054:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a056:	bf00      	nop
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	20000070 	.word	0x20000070

0800a064 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	4603      	mov	r3, r0
 800a06c:	6039      	str	r1, [r7, #0]
 800a06e:	71fb      	strb	r3, [r7, #7]
 800a070:	4613      	mov	r3, r2
 800a072:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a074:	f3ef 8310 	mrs	r3, PRIMASK
 800a078:	60fb      	str	r3, [r7, #12]
  return(result);
 800a07a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a07c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a07e:	b672      	cpsid	i
}
 800a080:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800a082:	79bb      	ldrb	r3, [r7, #6]
 800a084:	b29b      	uxth	r3, r3
 800a086:	79f9      	ldrb	r1, [r7, #7]
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	4806      	ldr	r0, [pc, #24]	; (800a0a4 <SUBGRF_WriteBuffer+0x40>)
 800a08c:	f7fa fcff 	bl	8004a8e <HAL_SUBGHZ_WriteBuffer>
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	f383 8810 	msr	PRIMASK, r3
}
 800a09a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a09c:	bf00      	nop
 800a09e:	3718      	adds	r7, #24
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	20000070 	.word	0x20000070

0800a0a8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	6039      	str	r1, [r7, #0]
 800a0b2:	71fb      	strb	r3, [r7, #7]
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a0bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a0c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0c2:	b672      	cpsid	i
}
 800a0c4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800a0c6:	79bb      	ldrb	r3, [r7, #6]
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	79f9      	ldrb	r1, [r7, #7]
 800a0cc:	683a      	ldr	r2, [r7, #0]
 800a0ce:	4806      	ldr	r0, [pc, #24]	; (800a0e8 <SUBGRF_ReadBuffer+0x40>)
 800a0d0:	f7fa fd30 	bl	8004b34 <HAL_SUBGHZ_ReadBuffer>
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	f383 8810 	msr	PRIMASK, r3
}
 800a0de:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a0e0:	bf00      	nop
 800a0e2:	3718      	adds	r7, #24
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	20000070 	.word	0x20000070

0800a0ec <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	6039      	str	r1, [r7, #0]
 800a0f6:	71fb      	strb	r3, [r7, #7]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0fc:	f3ef 8310 	mrs	r3, PRIMASK
 800a100:	60fb      	str	r3, [r7, #12]
  return(result);
 800a102:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a104:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a106:	b672      	cpsid	i
}
 800a108:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800a10a:	88bb      	ldrh	r3, [r7, #4]
 800a10c:	79f9      	ldrb	r1, [r7, #7]
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	4806      	ldr	r0, [pc, #24]	; (800a12c <SUBGRF_WriteCommand+0x40>)
 800a112:	f7fa fc09 	bl	8004928 <HAL_SUBGHZ_ExecSetCmd>
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	f383 8810 	msr	PRIMASK, r3
}
 800a120:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a122:	bf00      	nop
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20000070 	.word	0x20000070

0800a130 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	4603      	mov	r3, r0
 800a138:	6039      	str	r1, [r7, #0]
 800a13a:	71fb      	strb	r3, [r7, #7]
 800a13c:	4613      	mov	r3, r2
 800a13e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a140:	f3ef 8310 	mrs	r3, PRIMASK
 800a144:	60fb      	str	r3, [r7, #12]
  return(result);
 800a146:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a148:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a14a:	b672      	cpsid	i
}
 800a14c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800a14e:	88bb      	ldrh	r3, [r7, #4]
 800a150:	79f9      	ldrb	r1, [r7, #7]
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	4806      	ldr	r0, [pc, #24]	; (800a170 <SUBGRF_ReadCommand+0x40>)
 800a156:	f7fa fc46 	bl	80049e6 <HAL_SUBGHZ_ExecGetCmd>
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	f383 8810 	msr	PRIMASK, r3
}
 800a164:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a166:	bf00      	nop
 800a168:	3718      	adds	r7, #24
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	20000070 	.word	0x20000070

0800a174 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	4603      	mov	r3, r0
 800a17c:	460a      	mov	r2, r1
 800a17e:	71fb      	strb	r3, [r7, #7]
 800a180:	4613      	mov	r3, r2
 800a182:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800a184:	2301      	movs	r3, #1
 800a186:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800a188:	79bb      	ldrb	r3, [r7, #6]
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d10d      	bne.n	800a1aa <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800a18e:	79fb      	ldrb	r3, [r7, #7]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d104      	bne.n	800a19e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800a194:	2302      	movs	r3, #2
 800a196:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800a198:	2004      	movs	r0, #4
 800a19a:	f000 f8df 	bl	800a35c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800a19e:	79fb      	ldrb	r3, [r7, #7]
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d107      	bne.n	800a1b4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	73fb      	strb	r3, [r7, #15]
 800a1a8:	e004      	b.n	800a1b4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800a1aa:	79bb      	ldrb	r3, [r7, #6]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d101      	bne.n	800a1b4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800a1b4:	7bfb      	ldrb	r3, [r7, #15]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 fce1 	bl	800ab7e <RBI_ConfigRFSwitch>
}
 800a1bc:	bf00      	nop
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800a1d2:	f000 fce2 	bl	800ab9a <RBI_GetTxConfig>
 800a1d6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d016      	beq.n	800a20c <SUBGRF_SetRfTxPower+0x48>
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	dc16      	bgt.n	800a212 <SUBGRF_SetRfTxPower+0x4e>
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <SUBGRF_SetRfTxPower+0x2e>
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d00a      	beq.n	800a206 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800a1f0:	e00f      	b.n	800a212 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800a1f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1f6:	2b0f      	cmp	r3, #15
 800a1f8:	dd02      	ble.n	800a200 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	73fb      	strb	r3, [r7, #15]
            break;
 800a1fe:	e009      	b.n	800a214 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800a200:	2301      	movs	r3, #1
 800a202:	73fb      	strb	r3, [r7, #15]
            break;
 800a204:	e006      	b.n	800a214 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800a206:	2301      	movs	r3, #1
 800a208:	73fb      	strb	r3, [r7, #15]
            break;
 800a20a:	e003      	b.n	800a214 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800a20c:	2302      	movs	r3, #2
 800a20e:	73fb      	strb	r3, [r7, #15]
            break;
 800a210:	e000      	b.n	800a214 <SUBGRF_SetRfTxPower+0x50>
            break;
 800a212:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800a214:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a218:	7bfb      	ldrb	r3, [r7, #15]
 800a21a:	2202      	movs	r2, #2
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7ff fbcd 	bl	80099bc <SUBGRF_SetTxParams>

    return paSelect;
 800a222:	7bfb      	ldrb	r3, [r7, #15]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800a22c:	b480      	push	{r7}
 800a22e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800a230:	2301      	movs	r3, #1
}
 800a232:	4618      	mov	r0, r3
 800a234:	46bd      	mov	sp, r7
 800a236:	bc80      	pop	{r7}
 800a238:	4770      	bx	lr
	...

0800a23c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800a244:	4b03      	ldr	r3, [pc, #12]	; (800a254 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2001      	movs	r0, #1
 800a24a:	4798      	blx	r3
}
 800a24c:	bf00      	nop
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	2000031c 	.word	0x2000031c

0800a258 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800a260:	4b03      	ldr	r3, [pc, #12]	; (800a270 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2002      	movs	r0, #2
 800a266:	4798      	blx	r3
}
 800a268:	bf00      	nop
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	2000031c 	.word	0x2000031c

0800a274 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800a27c:	4b03      	ldr	r3, [pc, #12]	; (800a28c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2040      	movs	r0, #64	; 0x40
 800a282:	4798      	blx	r3
}
 800a284:	bf00      	nop
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	2000031c 	.word	0x2000031c

0800a290 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	460b      	mov	r3, r1
 800a29a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800a29c:	78fb      	ldrb	r3, [r7, #3]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d002      	beq.n	800a2a8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d005      	beq.n	800a2b2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800a2a6:	e00a      	b.n	800a2be <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800a2a8:	4b07      	ldr	r3, [pc, #28]	; (800a2c8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2080      	movs	r0, #128	; 0x80
 800a2ae:	4798      	blx	r3
            break;
 800a2b0:	e005      	b.n	800a2be <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800a2b2:	4b05      	ldr	r3, [pc, #20]	; (800a2c8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a2ba:	4798      	blx	r3
            break;
 800a2bc:	bf00      	nop
    }
}
 800a2be:	bf00      	nop
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	2000031c 	.word	0x2000031c

0800a2cc <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800a2d4:	4b04      	ldr	r3, [pc, #16]	; (800a2e8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a2dc:	4798      	blx	r3
}
 800a2de:	bf00      	nop
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	2000031c 	.word	0x2000031c

0800a2ec <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800a2f4:	4b03      	ldr	r3, [pc, #12]	; (800a304 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2020      	movs	r0, #32
 800a2fa:	4798      	blx	r3
}
 800a2fc:	bf00      	nop
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	2000031c 	.word	0x2000031c

0800a308 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800a310:	4b03      	ldr	r3, [pc, #12]	; (800a320 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2004      	movs	r0, #4
 800a316:	4798      	blx	r3
}
 800a318:	bf00      	nop
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	2000031c 	.word	0x2000031c

0800a324 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800a32c:	4b03      	ldr	r3, [pc, #12]	; (800a33c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2008      	movs	r0, #8
 800a332:	4798      	blx	r3
}
 800a334:	bf00      	nop
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	2000031c 	.word	0x2000031c

0800a340 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800a348:	4b03      	ldr	r3, [pc, #12]	; (800a358 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2010      	movs	r0, #16
 800a34e:	4798      	blx	r3
}
 800a350:	bf00      	nop
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	2000031c 	.word	0x2000031c

0800a35c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	4603      	mov	r3, r0
 800a364:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800a366:	f000 fc26 	bl	800abb6 <RBI_IsDCDC>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d112      	bne.n	800a396 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800a370:	f640 1023 	movw	r0, #2339	; 0x923
 800a374:	f7ff fe1e 	bl	8009fb4 <SUBGRF_ReadRegister>
 800a378:	4603      	mov	r3, r0
 800a37a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
 800a37e:	f023 0306 	bic.w	r3, r3, #6
 800a382:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800a384:	7bfa      	ldrb	r2, [r7, #15]
 800a386:	79fb      	ldrb	r3, [r7, #7]
 800a388:	4313      	orrs	r3, r2
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	4619      	mov	r1, r3
 800a38e:	f640 1023 	movw	r0, #2339	; 0x923
 800a392:	f7ff fdfb 	bl	8009f8c <SUBGRF_WriteRegister>
  }
}
 800a396:	bf00      	nop
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
	...

0800a3a0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800a3ae:	231f      	movs	r3, #31
 800a3b0:	e016      	b.n	800a3e0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	73fb      	strb	r3, [r7, #15]
 800a3b6:	e00f      	b.n	800a3d8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ba:	4a0c      	ldr	r2, [pc, #48]	; (800a3ec <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a3bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d205      	bcs.n	800a3d2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800a3c6:	7bfb      	ldrb	r3, [r7, #15]
 800a3c8:	4a08      	ldr	r2, [pc, #32]	; (800a3ec <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a3ca:	00db      	lsls	r3, r3, #3
 800a3cc:	4413      	add	r3, r2
 800a3ce:	791b      	ldrb	r3, [r3, #4]
 800a3d0:	e006      	b.n	800a3e0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	73fb      	strb	r3, [r7, #15]
 800a3d8:	7bfb      	ldrb	r3, [r7, #15]
 800a3da:	2b15      	cmp	r3, #21
 800a3dc:	d9ec      	bls.n	800a3b8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800a3de:	e7fe      	b.n	800a3de <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3714      	adds	r7, #20
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bc80      	pop	{r7}
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	0800c5d4 	.word	0x0800c5d4

0800a3f0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b08a      	sub	sp, #40	; 0x28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800a3fa:	4b35      	ldr	r3, [pc, #212]	; (800a4d0 <SUBGRF_GetCFO+0xe0>)
 800a3fc:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800a3fe:	f640 0007 	movw	r0, #2055	; 0x807
 800a402:	f7ff fdd7 	bl	8009fb4 <SUBGRF_ReadRegister>
 800a406:	4603      	mov	r3, r0
 800a408:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800a40a:	7ffb      	ldrb	r3, [r7, #31]
 800a40c:	08db      	lsrs	r3, r3, #3
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	f003 0303 	and.w	r3, r3, #3
 800a414:	3328      	adds	r3, #40	; 0x28
 800a416:	443b      	add	r3, r7
 800a418:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a41c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800a41e:	7ffb      	ldrb	r3, [r7, #31]
 800a420:	f003 0307 	and.w	r3, r3, #7
 800a424:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 800a426:	7fba      	ldrb	r2, [r7, #30]
 800a428:	7f7b      	ldrb	r3, [r7, #29]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	fa02 f303 	lsl.w	r3, r2, r3
 800a430:	461a      	mov	r2, r3
 800a432:	4b28      	ldr	r3, [pc, #160]	; (800a4d4 <SUBGRF_GetCFO+0xe4>)
 800a434:	fbb3 f3f2 	udiv	r3, r3, r2
 800a438:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800a43a:	69ba      	ldr	r2, [r7, #24]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a442:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800a444:	2301      	movs	r3, #1
 800a446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800a44a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	fb02 f303 	mul.w	r3, r2, r3
 800a454:	2b07      	cmp	r3, #7
 800a456:	d802      	bhi.n	800a45e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800a458:	2302      	movs	r3, #2
 800a45a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800a45e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	fb02 f303 	mul.w	r3, r2, r3
 800a468:	2b03      	cmp	r3, #3
 800a46a:	d802      	bhi.n	800a472 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800a46c:	2304      	movs	r3, #4
 800a46e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800a472:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	fb02 f303 	mul.w	r3, r2, r3
 800a47c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800a47e:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800a482:	f7ff fd97 	bl	8009fb4 <SUBGRF_ReadRegister>
 800a486:	4603      	mov	r3, r0
 800a488:	021b      	lsls	r3, r3, #8
 800a48a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a48e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800a490:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800a494:	f7ff fd8e 	bl	8009fb4 <SUBGRF_ReadRegister>
 800a498:	4603      	mov	r3, r0
 800a49a:	461a      	mov	r2, r3
 800a49c:	6a3b      	ldr	r3, [r7, #32]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d005      	beq.n	800a4b8 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800a4b2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800a4b6:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	095b      	lsrs	r3, r3, #5
 800a4bc:	6a3a      	ldr	r2, [r7, #32]
 800a4be:	fb02 f303 	mul.w	r3, r2, r3
 800a4c2:	11da      	asrs	r2, r3, #7
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	601a      	str	r2, [r3, #0]
}
 800a4c8:	bf00      	nop
 800a4ca:	3728      	adds	r7, #40	; 0x28
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	0c0a0804 	.word	0x0c0a0804
 800a4d4:	01e84800 	.word	0x01e84800

0800a4d8 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b087      	sub	sp, #28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	4603      	mov	r3, r0
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 800a4ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ee:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800a4f0:	697b      	ldr	r3, [r7, #20]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	371c      	adds	r7, #28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bc80      	pop	{r7}
 800a4fa:	4770      	bx	lr

0800a4fc <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b087      	sub	sp, #28
 800a500:	af00      	add	r7, sp, #0
 800a502:	4603      	mov	r3, r0
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 800a50a:	2300      	movs	r3, #0
 800a50c:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 800a50e:	f04f 33ff 	mov.w	r3, #4294967295
 800a512:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800a514:	697b      	ldr	r3, [r7, #20]
}
 800a516:	4618      	mov	r0, r3
 800a518:	371c      	adds	r7, #28
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bc80      	pop	{r7}
 800a51e:	4770      	bx	lr

0800a520 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 800a52c:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800a530:	4618      	mov	r0, r3
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	bc80      	pop	{r7}
 800a538:	4770      	bx	lr

0800a53a <RFW_DeInit>:

void RFW_DeInit( void)
{
 800a53a:	b480      	push	{r7}
 800a53c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800a53e:	bf00      	nop
 800a540:	46bd      	mov	sp, r7
 800a542:	bc80      	pop	{r7}
 800a544:	4770      	bx	lr

0800a546 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 800a546:	b480      	push	{r7}
 800a548:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 800a54a:	2300      	movs	r3, #0
#endif
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	46bd      	mov	sp, r7
 800a550:	bc80      	pop	{r7}
 800a552:	4770      	bx	lr

0800a554 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 800a554:	b480      	push	{r7}
 800a556:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 800a558:	2300      	movs	r3, #0
#endif
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bc80      	pop	{r7}
 800a560:	4770      	bx	lr

0800a562 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 800a562:	b480      	push	{r7}
 800a564:	b083      	sub	sp, #12
 800a566:	af00      	add	r7, sp, #0
 800a568:	4603      	mov	r3, r0
 800a56a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	bc80      	pop	{r7}
 800a574:	4770      	bx	lr

0800a576 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 800a576:	b480      	push	{r7}
 800a578:	b087      	sub	sp, #28
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	60f8      	str	r0, [r7, #12]
 800a57e:	460b      	mov	r3, r1
 800a580:	607a      	str	r2, [r7, #4]
 800a582:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 800a584:	f04f 33ff 	mov.w	r3, #4294967295
 800a588:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 800a58a:	697b      	ldr	r3, [r7, #20]
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	371c      	adds	r7, #28
 800a590:	46bd      	mov	sp, r7
 800a592:	bc80      	pop	{r7}
 800a594:	4770      	bx	lr

0800a596 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800a596:	b480      	push	{r7}
 800a598:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800a59a:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bc80      	pop	{r7}
 800a5a4:	4770      	bx	lr

0800a5a6 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800a5aa:	bf00      	nop
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bc80      	pop	{r7}
 800a5b0:	4770      	bx	lr

0800a5b2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800a5b6:	bf00      	nop
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bc80      	pop	{r7}
 800a5bc:	4770      	bx	lr

0800a5be <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b083      	sub	sp, #12
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bc80      	pop	{r7}
 800a5d0:	4770      	bx	lr

0800a5d2 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800a5d6:	f7f6 fa11 	bl	80009fc <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800a5da:	f000 f80b 	bl	800a5f4 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800a5de:	bf00      	nop
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a5e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ea:	f000 feb5 	bl	800b358 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800a5ee:	bf00      	nop
 800a5f0:	bd80      	pop	{r7, pc}
	...

0800a5f4 <SubghzApp_Init>:
static void PingPong_Process(void);
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800a5f4:	b590      	push	{r4, r7, lr}
 800a5f6:	b08b      	sub	sp, #44	; 0x2c
 800a5f8:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

  APP_LOG(TS_OFF, VLEVEL_M, "\n\rPING PONG\n\r");
 800a5fa:	4b61      	ldr	r3, [pc, #388]	; (800a780 <SubghzApp_Init+0x18c>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	2100      	movs	r1, #0
 800a600:	2002      	movs	r0, #2
 800a602:	f001 fae5 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
  /* Get SubGHY_Phy APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a606:	2300      	movs	r3, #0
 800a608:	9302      	str	r3, [sp, #8]
 800a60a:	2302      	movs	r3, #2
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	2301      	movs	r3, #1
 800a610:	9300      	str	r3, [sp, #0]
 800a612:	4b5c      	ldr	r3, [pc, #368]	; (800a784 <SubghzApp_Init+0x190>)
 800a614:	2200      	movs	r2, #0
 800a616:	2100      	movs	r1, #0
 800a618:	2002      	movs	r0, #2
 800a61a:	f001 fad9 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a61e:	2300      	movs	r3, #0
 800a620:	9302      	str	r3, [sp, #8]
 800a622:	2302      	movs	r3, #2
 800a624:	9301      	str	r3, [sp, #4]
 800a626:	2301      	movs	r3, #1
 800a628:	9300      	str	r3, [sp, #0]
 800a62a:	4b57      	ldr	r3, [pc, #348]	; (800a788 <SubghzApp_Init+0x194>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	2100      	movs	r1, #0
 800a630:	2002      	movs	r0, #2
 800a632:	f001 facd 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Led Timers*/
  UTIL_TIMER_Create(&timerLed, LED_PERIOD_MS, UTIL_TIMER_ONESHOT, OnledEvent, NULL);
 800a636:	2300      	movs	r3, #0
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	4b54      	ldr	r3, [pc, #336]	; (800a78c <SubghzApp_Init+0x198>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	21c8      	movs	r1, #200	; 0xc8
 800a640:	4853      	ldr	r0, [pc, #332]	; (800a790 <SubghzApp_Init+0x19c>)
 800a642:	f001 f829 	bl	800b698 <UTIL_TIMER_Create>
  UTIL_TIMER_Start(&timerLed);
 800a646:	4852      	ldr	r0, [pc, #328]	; (800a790 <SubghzApp_Init+0x19c>)
 800a648:	f001 f85c 	bl	800b704 <UTIL_TIMER_Start>
  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800a64c:	4b51      	ldr	r3, [pc, #324]	; (800a794 <SubghzApp_Init+0x1a0>)
 800a64e:	4a52      	ldr	r2, [pc, #328]	; (800a798 <SubghzApp_Init+0x1a4>)
 800a650:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800a652:	4b50      	ldr	r3, [pc, #320]	; (800a794 <SubghzApp_Init+0x1a0>)
 800a654:	4a51      	ldr	r2, [pc, #324]	; (800a79c <SubghzApp_Init+0x1a8>)
 800a656:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800a658:	4b4e      	ldr	r3, [pc, #312]	; (800a794 <SubghzApp_Init+0x1a0>)
 800a65a:	4a51      	ldr	r2, [pc, #324]	; (800a7a0 <SubghzApp_Init+0x1ac>)
 800a65c:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800a65e:	4b4d      	ldr	r3, [pc, #308]	; (800a794 <SubghzApp_Init+0x1a0>)
 800a660:	4a50      	ldr	r2, [pc, #320]	; (800a7a4 <SubghzApp_Init+0x1b0>)
 800a662:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800a664:	4b4b      	ldr	r3, [pc, #300]	; (800a794 <SubghzApp_Init+0x1a0>)
 800a666:	4a50      	ldr	r2, [pc, #320]	; (800a7a8 <SubghzApp_Init+0x1b4>)
 800a668:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800a66a:	4b50      	ldr	r3, [pc, #320]	; (800a7ac <SubghzApp_Init+0x1b8>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4849      	ldr	r0, [pc, #292]	; (800a794 <SubghzApp_Init+0x1a0>)
 800a670:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /*calculate random delay for synchronization*/
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 800a672:	4b4e      	ldr	r3, [pc, #312]	; (800a7ac <SubghzApp_Init+0x1b8>)
 800a674:	695b      	ldr	r3, [r3, #20]
 800a676:	4798      	blx	r3
 800a678:	4603      	mov	r3, r0
 800a67a:	0d9b      	lsrs	r3, r3, #22
 800a67c:	461a      	mov	r2, r3
 800a67e:	4b4c      	ldr	r3, [pc, #304]	; (800a7b0 <SubghzApp_Init+0x1bc>)
 800a680:	601a      	str	r2, [r3, #0]

  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 800a682:	4b4a      	ldr	r3, [pc, #296]	; (800a7ac <SubghzApp_Init+0x1b8>)
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	484b      	ldr	r0, [pc, #300]	; (800a7b4 <SubghzApp_Init+0x1c0>)
 800a688:	4798      	blx	r3
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);

#elif ((USE_MODEM_LORA == 0) && (USE_MODEM_FSK == 1))
  APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 800a68a:	4b4b      	ldr	r3, [pc, #300]	; (800a7b8 <SubghzApp_Init+0x1c4>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	2100      	movs	r1, #0
 800a690:	2002      	movs	r0, #2
 800a692:	f001 fa9d 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "FSK_MODULATION\n\r");
 800a696:	4b49      	ldr	r3, [pc, #292]	; (800a7bc <SubghzApp_Init+0x1c8>)
 800a698:	2200      	movs	r2, #0
 800a69a:	2100      	movs	r1, #0
 800a69c:	2002      	movs	r0, #2
 800a69e:	f001 fa97 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "FSK_BW=%d Hz\n\r", FSK_BANDWIDTH);
 800a6a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	4b45      	ldr	r3, [pc, #276]	; (800a7c0 <SubghzApp_Init+0x1cc>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	2002      	movs	r0, #2
 800a6b0:	f001 fa8e 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "FSK_DR=%d bits/s\n\r", FSK_DATARATE);
 800a6b4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	4b42      	ldr	r3, [pc, #264]	; (800a7c4 <SubghzApp_Init+0x1d0>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	2100      	movs	r1, #0
 800a6c0:	2002      	movs	r0, #2
 800a6c2:	f001 fa85 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>

  Radio.SetTxConfig(MODEM_FSK, TX_OUTPUT_POWER, FSK_FDEV, 0,
 800a6c6:	4b39      	ldr	r3, [pc, #228]	; (800a7ac <SubghzApp_Init+0x1b8>)
 800a6c8:	69dc      	ldr	r4, [r3, #28]
 800a6ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a6ce:	9308      	str	r3, [sp, #32]
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	9307      	str	r3, [sp, #28]
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	9306      	str	r3, [sp, #24]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	9305      	str	r3, [sp, #20]
 800a6dc:	2301      	movs	r3, #1
 800a6de:	9304      	str	r3, [sp, #16]
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	9303      	str	r3, [sp, #12]
 800a6e4:	2305      	movs	r3, #5
 800a6e6:	9302      	str	r3, [sp, #8]
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	9301      	str	r3, [sp, #4]
 800a6ec:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800a6f8:	210e      	movs	r1, #14
 800a6fa:	2000      	movs	r0, #0
 800a6fc:	47a0      	blx	r4
                    FSK_DATARATE, 0,
                    FSK_PREAMBLE_LENGTH, FSK_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, 0, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_FSK, FSK_BANDWIDTH, FSK_DATARATE,
 800a6fe:	4b2b      	ldr	r3, [pc, #172]	; (800a7ac <SubghzApp_Init+0x1b8>)
 800a700:	699c      	ldr	r4, [r3, #24]
 800a702:	2301      	movs	r3, #1
 800a704:	9309      	str	r3, [sp, #36]	; 0x24
 800a706:	2300      	movs	r3, #0
 800a708:	9308      	str	r3, [sp, #32]
 800a70a:	2300      	movs	r3, #0
 800a70c:	9307      	str	r3, [sp, #28]
 800a70e:	2300      	movs	r3, #0
 800a710:	9306      	str	r3, [sp, #24]
 800a712:	2301      	movs	r3, #1
 800a714:	9305      	str	r3, [sp, #20]
 800a716:	2300      	movs	r3, #0
 800a718:	9304      	str	r3, [sp, #16]
 800a71a:	2300      	movs	r3, #0
 800a71c:	9303      	str	r3, [sp, #12]
 800a71e:	2300      	movs	r3, #0
 800a720:	9302      	str	r3, [sp, #8]
 800a722:	2305      	movs	r3, #5
 800a724:	9301      	str	r3, [sp, #4]
 800a726:	4b28      	ldr	r3, [pc, #160]	; (800a7c8 <SubghzApp_Init+0x1d4>)
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	2300      	movs	r3, #0
 800a72c:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a730:	f24c 3150 	movw	r1, #50000	; 0xc350
 800a734:	2000      	movs	r0, #0
 800a736:	47a0      	blx	r4
                    0, FSK_AFC_BANDWIDTH, FSK_PREAMBLE_LENGTH,
                    0, FSK_FIX_LENGTH_PAYLOAD_ON, 0, true,
                    0, 0, false, true);

  Radio.SetMaxPayloadLength(MODEM_FSK, MAX_APP_BUFFER_SIZE);
 800a738:	4b1c      	ldr	r3, [pc, #112]	; (800a7ac <SubghzApp_Init+0x1b8>)
 800a73a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a73c:	21ff      	movs	r1, #255	; 0xff
 800a73e:	2000      	movs	r0, #0
 800a740:	4798      	blx	r3
#else
#error "Please define a modulation in the subghz_phy_app.h file."
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */

  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800a742:	22ff      	movs	r2, #255	; 0xff
 800a744:	2100      	movs	r1, #0
 800a746:	4821      	ldr	r0, [pc, #132]	; (800a7cc <SubghzApp_Init+0x1d8>)
 800a748:	f001 fcec 	bl	800c124 <memset>

  APP_LOG(TS_ON, VLEVEL_L, "rand=%d\n\r", random_delay);
 800a74c:	4b18      	ldr	r3, [pc, #96]	; (800a7b0 <SubghzApp_Init+0x1bc>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	4b1f      	ldr	r3, [pc, #124]	; (800a7d0 <SubghzApp_Init+0x1dc>)
 800a754:	2201      	movs	r2, #1
 800a756:	2100      	movs	r1, #0
 800a758:	2001      	movs	r0, #1
 800a75a:	f001 fa39 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
  /*starts reception*/
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 800a75e:	4b13      	ldr	r3, [pc, #76]	; (800a7ac <SubghzApp_Init+0x1b8>)
 800a760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a762:	4a13      	ldr	r2, [pc, #76]	; (800a7b0 <SubghzApp_Init+0x1bc>)
 800a764:	6812      	ldr	r2, [r2, #0]
 800a766:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 800a76a:	4610      	mov	r0, r2
 800a76c:	4798      	blx	r3

  /*register task to to be run in while(1) after Radio IT*/
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, PingPong_Process);
 800a76e:	4a19      	ldr	r2, [pc, #100]	; (800a7d4 <SubghzApp_Init+0x1e0>)
 800a770:	2100      	movs	r1, #0
 800a772:	2001      	movs	r0, #1
 800a774:	f000 feec 	bl	800b550 <UTIL_SEQ_RegTask>
  /* USER CODE END SubghzApp_Init_2 */
}
 800a778:	bf00      	nop
 800a77a:	3704      	adds	r7, #4
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd90      	pop	{r4, r7, pc}
 800a780:	0800c22c 	.word	0x0800c22c
 800a784:	0800c23c 	.word	0x0800c23c
 800a788:	0800c260 	.word	0x0800c260
 800a78c:	0800ab3d 	.word	0x0800ab3d
 800a790:	20000544 	.word	0x20000544
 800a794:	20000320 	.word	0x20000320
 800a798:	0800a7d9 	.word	0x0800a7d9
 800a79c:	0800a805 	.word	0x0800a805
 800a7a0:	0800a919 	.word	0x0800a919
 800a7a4:	0800a945 	.word	0x0800a945
 800a7a8:	0800a971 	.word	0x0800a971
 800a7ac:	0800c54c 	.word	0x0800c54c
 800a7b0:	2000055c 	.word	0x2000055c
 800a7b4:	3689cac0 	.word	0x3689cac0
 800a7b8:	0800c284 	.word	0x0800c284
 800a7bc:	0800c298 	.word	0x0800c298
 800a7c0:	0800c2ac 	.word	0x0800c2ac
 800a7c4:	0800c2bc 	.word	0x0800c2bc
 800a7c8:	00014585 	.word	0x00014585
 800a7cc:	20000440 	.word	0x20000440
 800a7d0:	0800c2d0 	.word	0x0800c2d0
 800a7d4:	0800a99d 	.word	0x0800a99d

0800a7d8 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 800a7dc:	4b07      	ldr	r3, [pc, #28]	; (800a7fc <OnTxDone+0x24>)
 800a7de:	2201      	movs	r2, #1
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	2001      	movs	r0, #1
 800a7e4:	f001 f9f4 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = TX;
 800a7e8:	4b05      	ldr	r3, [pc, #20]	; (800a800 <OnTxDone+0x28>)
 800a7ea:	2203      	movs	r2, #3
 800a7ec:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	2001      	movs	r0, #1
 800a7f2:	f000 fecf 	bl	800b594 <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxDone */
}
 800a7f6:	bf00      	nop
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	0800c2dc 	.word	0x0800c2dc
 800a800:	2000033c 	.word	0x2000033c

0800a804 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b088      	sub	sp, #32
 800a808:	af02      	add	r7, sp, #8
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	4608      	mov	r0, r1
 800a80e:	4611      	mov	r1, r2
 800a810:	461a      	mov	r2, r3
 800a812:	4603      	mov	r3, r0
 800a814:	817b      	strh	r3, [r7, #10]
 800a816:	460b      	mov	r3, r1
 800a818:	813b      	strh	r3, [r7, #8]
 800a81a:	4613      	mov	r3, r2
 800a81c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 800a81e:	4b34      	ldr	r3, [pc, #208]	; (800a8f0 <OnRxDone+0xec>)
 800a820:	2201      	movs	r2, #1
 800a822:	2100      	movs	r1, #0
 800a824:	2001      	movs	r0, #1
 800a826:	f001 f9d3 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
  /* Record payload Signal to noise ratio in Lora*/
  SnrValue = LoraSnr_FskCfo;
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */
#if ((USE_MODEM_LORA == 0) && (USE_MODEM_FSK == 1))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, Cfo=%dkHz\n\r", rssi, LoraSnr_FskCfo);
 800a82a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a82e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800a832:	9201      	str	r2, [sp, #4]
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	4b2f      	ldr	r3, [pc, #188]	; (800a8f4 <OnRxDone+0xf0>)
 800a838:	2201      	movs	r2, #1
 800a83a:	2100      	movs	r1, #0
 800a83c:	2001      	movs	r0, #1
 800a83e:	f001 f9c7 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
  SnrValue = 0; /*not applicable in GFSK*/
 800a842:	4b2d      	ldr	r3, [pc, #180]	; (800a8f8 <OnRxDone+0xf4>)
 800a844:	2200      	movs	r2, #0
 800a846:	701a      	strb	r2, [r3, #0]
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */
  /* Update the State of the FSM*/
  State = RX;
 800a848:	4b2c      	ldr	r3, [pc, #176]	; (800a8fc <OnRxDone+0xf8>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	701a      	strb	r2, [r3, #0]
  /* Clear BufferRx*/
  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800a84e:	22ff      	movs	r2, #255	; 0xff
 800a850:	2100      	movs	r1, #0
 800a852:	482b      	ldr	r0, [pc, #172]	; (800a900 <OnRxDone+0xfc>)
 800a854:	f001 fc66 	bl	800c124 <memset>
  /* Record payload size*/
  RxBufferSize = size;
 800a858:	4a2a      	ldr	r2, [pc, #168]	; (800a904 <OnRxDone+0x100>)
 800a85a:	897b      	ldrh	r3, [r7, #10]
 800a85c:	8013      	strh	r3, [r2, #0]
  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 800a85e:	4b29      	ldr	r3, [pc, #164]	; (800a904 <OnRxDone+0x100>)
 800a860:	881b      	ldrh	r3, [r3, #0]
 800a862:	2bff      	cmp	r3, #255	; 0xff
 800a864:	d806      	bhi.n	800a874 <OnRxDone+0x70>
  {
    memcpy(BufferRx, payload, RxBufferSize);
 800a866:	4b27      	ldr	r3, [pc, #156]	; (800a904 <OnRxDone+0x100>)
 800a868:	881b      	ldrh	r3, [r3, #0]
 800a86a:	461a      	mov	r2, r3
 800a86c:	68f9      	ldr	r1, [r7, #12]
 800a86e:	4824      	ldr	r0, [pc, #144]	; (800a900 <OnRxDone+0xfc>)
 800a870:	f001 fc4a 	bl	800c108 <memcpy>
  }
  /* Record Received Signal Strength*/
  RssiValue = rssi;
 800a874:	893b      	ldrh	r3, [r7, #8]
 800a876:	b25a      	sxtb	r2, r3
 800a878:	4b23      	ldr	r3, [pc, #140]	; (800a908 <OnRxDone+0x104>)
 800a87a:	701a      	strb	r2, [r3, #0]
  /* Record payload content*/
  APP_LOG(TS_ON, VLEVEL_H, "payload. size=%d \n\r", size);
 800a87c:	897b      	ldrh	r3, [r7, #10]
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	4b22      	ldr	r3, [pc, #136]	; (800a90c <OnRxDone+0x108>)
 800a882:	2201      	movs	r2, #1
 800a884:	2100      	movs	r1, #0
 800a886:	2003      	movs	r0, #3
 800a888:	f001 f9a2 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
  for (int i = 0; i < PAYLOAD_LEN; i++)
 800a88c:	2300      	movs	r3, #0
 800a88e:	617b      	str	r3, [r7, #20]
 800a890:	e01d      	b.n	800a8ce <OnRxDone+0xca>
  {
    APP_LOG(TS_OFF, VLEVEL_H, "%02X", BufferRx[i]);
 800a892:	4a1b      	ldr	r2, [pc, #108]	; (800a900 <OnRxDone+0xfc>)
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	4413      	add	r3, r2
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	4b1c      	ldr	r3, [pc, #112]	; (800a910 <OnRxDone+0x10c>)
 800a89e:	2200      	movs	r2, #0
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	2003      	movs	r0, #3
 800a8a4:	f001 f994 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
    if (i % 16 == 15)
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	425a      	negs	r2, r3
 800a8ac:	f003 030f 	and.w	r3, r3, #15
 800a8b0:	f002 020f 	and.w	r2, r2, #15
 800a8b4:	bf58      	it	pl
 800a8b6:	4253      	negpl	r3, r2
 800a8b8:	2b0f      	cmp	r3, #15
 800a8ba:	d105      	bne.n	800a8c8 <OnRxDone+0xc4>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800a8bc:	4b15      	ldr	r3, [pc, #84]	; (800a914 <OnRxDone+0x110>)
 800a8be:	2200      	movs	r2, #0
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	2003      	movs	r0, #3
 800a8c4:	f001 f984 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
  for (int i = 0; i < PAYLOAD_LEN; i++)
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	617b      	str	r3, [r7, #20]
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	2b3f      	cmp	r3, #63	; 0x3f
 800a8d2:	ddde      	ble.n	800a892 <OnRxDone+0x8e>
    }
  }
  APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800a8d4:	4b0f      	ldr	r3, [pc, #60]	; (800a914 <OnRxDone+0x110>)
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	2100      	movs	r1, #0
 800a8da:	2003      	movs	r0, #3
 800a8dc:	f001 f978 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	2001      	movs	r0, #1
 800a8e4:	f000 fe56 	bl	800b594 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxDone */
}
 800a8e8:	bf00      	nop
 800a8ea:	3718      	adds	r7, #24
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	0800c2e8 	.word	0x0800c2e8
 800a8f4:	0800c2f4 	.word	0x0800c2f4
 800a8f8:	20000543 	.word	0x20000543
 800a8fc:	2000033c 	.word	0x2000033c
 800a900:	20000340 	.word	0x20000340
 800a904:	20000540 	.word	0x20000540
 800a908:	20000542 	.word	0x20000542
 800a90c:	0800c314 	.word	0x0800c314
 800a910:	0800c328 	.word	0x0800c328
 800a914:	0800c330 	.word	0x0800c330

0800a918 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  APP_LOG(TS_ON, VLEVEL_L, "OnTxTimeout\n\r");
 800a91c:	4b07      	ldr	r3, [pc, #28]	; (800a93c <OnTxTimeout+0x24>)
 800a91e:	2201      	movs	r2, #1
 800a920:	2100      	movs	r1, #0
 800a922:	2001      	movs	r0, #1
 800a924:	f001 f954 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = TX_TIMEOUT;
 800a928:	4b05      	ldr	r3, [pc, #20]	; (800a940 <OnTxTimeout+0x28>)
 800a92a:	2204      	movs	r2, #4
 800a92c:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a92e:	2100      	movs	r1, #0
 800a930:	2001      	movs	r0, #1
 800a932:	f000 fe2f 	bl	800b594 <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxTimeout */
}
 800a936:	bf00      	nop
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	0800c334 	.word	0x0800c334
 800a940:	2000033c 	.word	0x2000033c

0800a944 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxTimeout\n\r");
 800a948:	4b07      	ldr	r3, [pc, #28]	; (800a968 <OnRxTimeout+0x24>)
 800a94a:	2201      	movs	r2, #1
 800a94c:	2100      	movs	r1, #0
 800a94e:	2001      	movs	r0, #1
 800a950:	f001 f93e 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = RX_TIMEOUT;
 800a954:	4b05      	ldr	r3, [pc, #20]	; (800a96c <OnRxTimeout+0x28>)
 800a956:	2201      	movs	r2, #1
 800a958:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a95a:	2100      	movs	r1, #0
 800a95c:	2001      	movs	r0, #1
 800a95e:	f000 fe19 	bl	800b594 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxTimeout */
}
 800a962:	bf00      	nop
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	0800c344 	.word	0x0800c344
 800a96c:	2000033c 	.word	0x2000033c

0800a970 <OnRxError>:

static void OnRxError(void)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 800a974:	4b07      	ldr	r3, [pc, #28]	; (800a994 <OnRxError+0x24>)
 800a976:	2201      	movs	r2, #1
 800a978:	2100      	movs	r1, #0
 800a97a:	2001      	movs	r0, #1
 800a97c:	f001 f928 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = RX_ERROR;
 800a980:	4b05      	ldr	r3, [pc, #20]	; (800a998 <OnRxError+0x28>)
 800a982:	2202      	movs	r2, #2
 800a984:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a986:	2100      	movs	r1, #0
 800a988:	2001      	movs	r0, #1
 800a98a:	f000 fe03 	bl	800b594 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxError */
}
 800a98e:	bf00      	nop
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	0800c354 	.word	0x0800c354
 800a998:	2000033c 	.word	0x2000033c

0800a99c <PingPong_Process>:

/* USER CODE BEGIN PrFD */
static void PingPong_Process(void)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	af00      	add	r7, sp, #0
  Radio.Sleep();
 800a9a0:	4b56      	ldr	r3, [pc, #344]	; (800aafc <PingPong_Process+0x160>)
 800a9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a4:	4798      	blx	r3

  switch (State)
 800a9a6:	4b56      	ldr	r3, [pc, #344]	; (800ab00 <PingPong_Process+0x164>)
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	2b04      	cmp	r3, #4
 800a9ac:	f200 80a0 	bhi.w	800aaf0 <PingPong_Process+0x154>
 800a9b0:	a201      	add	r2, pc, #4	; (adr r2, 800a9b8 <PingPong_Process+0x1c>)
 800a9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b6:	bf00      	nop
 800a9b8:	0800a9cd 	.word	0x0800a9cd
 800a9bc:	0800aa81 	.word	0x0800aa81
 800a9c0:	0800aa81 	.word	0x0800aa81
 800a9c4:	0800aa69 	.word	0x0800aa69
 800a9c8:	0800aad9 	.word	0x0800aad9
  {
    case RX:

      if (isMaster == true)
 800a9cc:	4b4d      	ldr	r3, [pc, #308]	; (800ab04 <PingPong_Process+0x168>)
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f000 808f 	beq.w	800aaf4 <PingPong_Process+0x158>
      {
        if (RxBufferSize > 0)
 800a9d6:	4b4c      	ldr	r3, [pc, #304]	; (800ab08 <PingPong_Process+0x16c>)
 800a9d8:	881b      	ldrh	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f000 808a 	beq.w	800aaf4 <PingPong_Process+0x158>
        {
          if (strncmp((const char *)BufferRx, PONG, sizeof(PONG) - 1) == 0)
 800a9e0:	2204      	movs	r2, #4
 800a9e2:	494a      	ldr	r1, [pc, #296]	; (800ab0c <PingPong_Process+0x170>)
 800a9e4:	484a      	ldr	r0, [pc, #296]	; (800ab10 <PingPong_Process+0x174>)
 800a9e6:	f001 fba5 	bl	800c134 <strncmp>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d12c      	bne.n	800aa4a <PingPong_Process+0xae>
          {
            UTIL_TIMER_Stop(&timerLed);
 800a9f0:	4848      	ldr	r0, [pc, #288]	; (800ab14 <PingPong_Process+0x178>)
 800a9f2:	f000 fef5 	bl	800b7e0 <UTIL_TIMER_Stop>
            /* switch off green led */
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a9fc:	4846      	ldr	r0, [pc, #280]	; (800ab18 <PingPong_Process+0x17c>)
 800a9fe:	f7f7 fe3d 	bl	800267c <HAL_GPIO_WritePin>
            /* master toggles red led */
            HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 800aa02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aa06:	4844      	ldr	r0, [pc, #272]	; (800ab18 <PingPong_Process+0x17c>)
 800aa08:	f7f7 fe4f 	bl	80026aa <HAL_GPIO_TogglePin>
            /* Add delay between RX and TX */
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800aa0c:	4b3b      	ldr	r3, [pc, #236]	; (800aafc <PingPong_Process+0x160>)
 800aa0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa10:	4798      	blx	r3
 800aa12:	4603      	mov	r3, r0
 800aa14:	33c8      	adds	r3, #200	; 0xc8
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7f6 f87a 	bl	8000b10 <HAL_Delay>
            /* master sends PING*/
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800aa1c:	4b3f      	ldr	r3, [pc, #252]	; (800ab1c <PingPong_Process+0x180>)
 800aa1e:	2201      	movs	r2, #1
 800aa20:	2100      	movs	r1, #0
 800aa22:	2001      	movs	r0, #1
 800aa24:	f001 f8d4 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
                    "PING"
                    "\n\r");
            APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800aa28:	4b3d      	ldr	r3, [pc, #244]	; (800ab20 <PingPong_Process+0x184>)
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	2001      	movs	r0, #1
 800aa30:	f001 f8ce 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PING, sizeof(PING) - 1);
 800aa34:	2204      	movs	r2, #4
 800aa36:	493b      	ldr	r1, [pc, #236]	; (800ab24 <PingPong_Process+0x188>)
 800aa38:	483b      	ldr	r0, [pc, #236]	; (800ab28 <PingPong_Process+0x18c>)
 800aa3a:	f001 fb65 	bl	800c108 <memcpy>
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800aa3e:	4b2f      	ldr	r3, [pc, #188]	; (800aafc <PingPong_Process+0x160>)
 800aa40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa42:	2140      	movs	r1, #64	; 0x40
 800aa44:	4838      	ldr	r0, [pc, #224]	; (800ab28 <PingPong_Process+0x18c>)
 800aa46:	4798      	blx	r3
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
            Radio.Rx(RX_TIMEOUT_VALUE);
          }
        }
      }
      break;
 800aa48:	e054      	b.n	800aaf4 <PingPong_Process+0x158>
            isMaster = true;
 800aa4a:	4b2e      	ldr	r3, [pc, #184]	; (800ab04 <PingPong_Process+0x168>)
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800aa50:	4b36      	ldr	r3, [pc, #216]	; (800ab2c <PingPong_Process+0x190>)
 800aa52:	2201      	movs	r2, #1
 800aa54:	2100      	movs	r1, #0
 800aa56:	2001      	movs	r0, #1
 800aa58:	f001 f8ba 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800aa5c:	4b27      	ldr	r3, [pc, #156]	; (800aafc <PingPong_Process+0x160>)
 800aa5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa60:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aa64:	4798      	blx	r3
      break;
 800aa66:	e045      	b.n	800aaf4 <PingPong_Process+0x158>
    case TX:
      APP_LOG(TS_ON, VLEVEL_L, "Rx start\n\r");
 800aa68:	4b31      	ldr	r3, [pc, #196]	; (800ab30 <PingPong_Process+0x194>)
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	2001      	movs	r0, #1
 800aa70:	f001 f8ae 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800aa74:	4b21      	ldr	r3, [pc, #132]	; (800aafc <PingPong_Process+0x160>)
 800aa76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa78:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aa7c:	4798      	blx	r3
      break;
 800aa7e:	e03a      	b.n	800aaf6 <PingPong_Process+0x15a>
    case RX_TIMEOUT:
    case RX_ERROR:
      if (isMaster == true)
 800aa80:	4b20      	ldr	r3, [pc, #128]	; (800ab04 <PingPong_Process+0x168>)
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d01b      	beq.n	800aac0 <PingPong_Process+0x124>
      {
        /* Send the next PING frame */
        /* Add delay between RX and TX*/
        /* add random_delay to force sync between boards after some trials*/
        HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 800aa88:	4b1c      	ldr	r3, [pc, #112]	; (800aafc <PingPong_Process+0x160>)
 800aa8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa8c:	4798      	blx	r3
 800aa8e:	4603      	mov	r3, r0
 800aa90:	4a28      	ldr	r2, [pc, #160]	; (800ab34 <PingPong_Process+0x198>)
 800aa92:	6812      	ldr	r2, [r2, #0]
 800aa94:	4413      	add	r3, r2
 800aa96:	33c8      	adds	r3, #200	; 0xc8
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7f6 f839 	bl	8000b10 <HAL_Delay>
        APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800aa9e:	4b20      	ldr	r3, [pc, #128]	; (800ab20 <PingPong_Process+0x184>)
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	2001      	movs	r0, #1
 800aaa6:	f001 f893 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
        /* master sends PING*/
        memcpy(BufferTx, PING, sizeof(PING) - 1);
 800aaaa:	2204      	movs	r2, #4
 800aaac:	491d      	ldr	r1, [pc, #116]	; (800ab24 <PingPong_Process+0x188>)
 800aaae:	481e      	ldr	r0, [pc, #120]	; (800ab28 <PingPong_Process+0x18c>)
 800aab0:	f001 fb2a 	bl	800c108 <memcpy>
        Radio.Send(BufferTx, PAYLOAD_LEN);
 800aab4:	4b11      	ldr	r3, [pc, #68]	; (800aafc <PingPong_Process+0x160>)
 800aab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab8:	2140      	movs	r1, #64	; 0x40
 800aaba:	481b      	ldr	r0, [pc, #108]	; (800ab28 <PingPong_Process+0x18c>)
 800aabc:	4798      	blx	r3
      else
      {
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
        Radio.Rx(RX_TIMEOUT_VALUE);
      }
      break;
 800aabe:	e01a      	b.n	800aaf6 <PingPong_Process+0x15a>
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800aac0:	4b1d      	ldr	r3, [pc, #116]	; (800ab38 <PingPong_Process+0x19c>)
 800aac2:	2201      	movs	r2, #1
 800aac4:	2100      	movs	r1, #0
 800aac6:	2001      	movs	r0, #1
 800aac8:	f001 f882 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
        Radio.Rx(RX_TIMEOUT_VALUE);
 800aacc:	4b0b      	ldr	r3, [pc, #44]	; (800aafc <PingPong_Process+0x160>)
 800aace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aad4:	4798      	blx	r3
      break;
 800aad6:	e00e      	b.n	800aaf6 <PingPong_Process+0x15a>
    case TX_TIMEOUT:
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800aad8:	4b17      	ldr	r3, [pc, #92]	; (800ab38 <PingPong_Process+0x19c>)
 800aada:	2201      	movs	r2, #1
 800aadc:	2100      	movs	r1, #0
 800aade:	2001      	movs	r0, #1
 800aae0:	f001 f876 	bl	800bbd0 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800aae4:	4b05      	ldr	r3, [pc, #20]	; (800aafc <PingPong_Process+0x160>)
 800aae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aae8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aaec:	4798      	blx	r3
      break;
 800aaee:	e002      	b.n	800aaf6 <PingPong_Process+0x15a>
    default:
      break;
 800aaf0:	bf00      	nop
 800aaf2:	e000      	b.n	800aaf6 <PingPong_Process+0x15a>
      break;
 800aaf4:	bf00      	nop
  }
}
 800aaf6:	bf00      	nop
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	0800c54c 	.word	0x0800c54c
 800ab00:	2000033c 	.word	0x2000033c
 800ab04:	20000009 	.word	0x20000009
 800ab08:	20000540 	.word	0x20000540
 800ab0c:	0800c360 	.word	0x0800c360
 800ab10:	20000340 	.word	0x20000340
 800ab14:	20000544 	.word	0x20000544
 800ab18:	48000400 	.word	0x48000400
 800ab1c:	0800c368 	.word	0x0800c368
 800ab20:	0800c374 	.word	0x0800c374
 800ab24:	0800c388 	.word	0x0800c388
 800ab28:	20000440 	.word	0x20000440
 800ab2c:	0800c390 	.word	0x0800c390
 800ab30:	0800c3a4 	.word	0x0800c3a4
 800ab34:	2000055c 	.word	0x2000055c
 800ab38:	0800c3b0 	.word	0x0800c3b0

0800ab3c <OnledEvent>:

static void OnledEvent(void *context)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); /* LED_GREEN */
 800ab44:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab48:	4807      	ldr	r0, [pc, #28]	; (800ab68 <OnledEvent+0x2c>)
 800ab4a:	f7f7 fdae 	bl	80026aa <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 800ab4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ab52:	4805      	ldr	r0, [pc, #20]	; (800ab68 <OnledEvent+0x2c>)
 800ab54:	f7f7 fda9 	bl	80026aa <HAL_GPIO_TogglePin>
  UTIL_TIMER_Start(&timerLed);
 800ab58:	4804      	ldr	r0, [pc, #16]	; (800ab6c <OnledEvent+0x30>)
 800ab5a:	f000 fdd3 	bl	800b704 <UTIL_TIMER_Start>
}
 800ab5e:	bf00      	nop
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	48000400 	.word	0x48000400
 800ab6c:	20000544 	.word	0x20000544

0800ab70 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800ab74:	f7f6 fcf2 	bl	800155c <BSP_RADIO_Init>
 800ab78:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b082      	sub	sp, #8
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	4603      	mov	r3, r0
 800ab86:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ab88:	79fb      	ldrb	r3, [r7, #7]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7f6 fd24 	bl	80015d8 <BSP_RADIO_ConfigRFSwitch>
 800ab90:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800ab9e:	f7f6 fd77 	bl	8001690 <BSP_RADIO_GetTxConfig>
 800aba2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800abac:	f7f6 fd77 	bl	800169e <BSP_RADIO_IsTCXO>
 800abb0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800abba:	f7f6 fd77 	bl	80016ac <BSP_RADIO_IsDCDC>
 800abbe:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	4603      	mov	r3, r0
 800abcc:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800abce:	79fb      	ldrb	r3, [r7, #7]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7f6 fd72 	bl	80016ba <BSP_RADIO_GetRFOMaxPowerConfig>
 800abd6:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3708      	adds	r7, #8
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800abe0:	b480      	push	{r7}
 800abe2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800abe4:	4b04      	ldr	r3, [pc, #16]	; (800abf8 <UTIL_LPM_Init+0x18>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800abea:	4b04      	ldr	r3, [pc, #16]	; (800abfc <UTIL_LPM_Init+0x1c>)
 800abec:	2200      	movs	r2, #0
 800abee:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800abf0:	bf00      	nop
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bc80      	pop	{r7}
 800abf6:	4770      	bx	lr
 800abf8:	20000560 	.word	0x20000560
 800abfc:	20000564 	.word	0x20000564

0800ac00 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	460b      	mov	r3, r1
 800ac0a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac0c:	f3ef 8310 	mrs	r3, PRIMASK
 800ac10:	613b      	str	r3, [r7, #16]
  return(result);
 800ac12:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ac14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac16:	b672      	cpsid	i
}
 800ac18:	bf00      	nop
  
  switch( state )
 800ac1a:	78fb      	ldrb	r3, [r7, #3]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d008      	beq.n	800ac32 <UTIL_LPM_SetStopMode+0x32>
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d10e      	bne.n	800ac42 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800ac24:	4b0d      	ldr	r3, [pc, #52]	; (800ac5c <UTIL_LPM_SetStopMode+0x5c>)
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	4a0b      	ldr	r2, [pc, #44]	; (800ac5c <UTIL_LPM_SetStopMode+0x5c>)
 800ac2e:	6013      	str	r3, [r2, #0]
      break;
 800ac30:	e008      	b.n	800ac44 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	43da      	mvns	r2, r3
 800ac36:	4b09      	ldr	r3, [pc, #36]	; (800ac5c <UTIL_LPM_SetStopMode+0x5c>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	4a07      	ldr	r2, [pc, #28]	; (800ac5c <UTIL_LPM_SetStopMode+0x5c>)
 800ac3e:	6013      	str	r3, [r2, #0]
      break;
 800ac40:	e000      	b.n	800ac44 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800ac42:	bf00      	nop
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f383 8810 	msr	PRIMASK, r3
}
 800ac4e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ac50:	bf00      	nop
 800ac52:	371c      	adds	r7, #28
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bc80      	pop	{r7}
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	20000560 	.word	0x20000560

0800ac60 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ac60:	b480      	push	{r7}
 800ac62:	b087      	sub	sp, #28
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	460b      	mov	r3, r1
 800ac6a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ac70:	613b      	str	r3, [r7, #16]
  return(result);
 800ac72:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ac74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac76:	b672      	cpsid	i
}
 800ac78:	bf00      	nop
  
  switch(state)
 800ac7a:	78fb      	ldrb	r3, [r7, #3]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d008      	beq.n	800ac92 <UTIL_LPM_SetOffMode+0x32>
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d10e      	bne.n	800aca2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ac84:	4b0d      	ldr	r3, [pc, #52]	; (800acbc <UTIL_LPM_SetOffMode+0x5c>)
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	4a0b      	ldr	r2, [pc, #44]	; (800acbc <UTIL_LPM_SetOffMode+0x5c>)
 800ac8e:	6013      	str	r3, [r2, #0]
      break;
 800ac90:	e008      	b.n	800aca4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	43da      	mvns	r2, r3
 800ac96:	4b09      	ldr	r3, [pc, #36]	; (800acbc <UTIL_LPM_SetOffMode+0x5c>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	4a07      	ldr	r2, [pc, #28]	; (800acbc <UTIL_LPM_SetOffMode+0x5c>)
 800ac9e:	6013      	str	r3, [r2, #0]
      break;
 800aca0:	e000      	b.n	800aca4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800aca2:	bf00      	nop
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f383 8810 	msr	PRIMASK, r3
}
 800acae:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800acb0:	bf00      	nop
 800acb2:	371c      	adds	r7, #28
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bc80      	pop	{r7}
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	20000564 	.word	0x20000564

0800acc0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acc6:	f3ef 8310 	mrs	r3, PRIMASK
 800acca:	60bb      	str	r3, [r7, #8]
  return(result);
 800accc:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800acce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800acd0:	b672      	cpsid	i
}
 800acd2:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800acd4:	4b12      	ldr	r3, [pc, #72]	; (800ad20 <UTIL_LPM_EnterLowPower+0x60>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d006      	beq.n	800acea <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800acdc:	4b11      	ldr	r3, [pc, #68]	; (800ad24 <UTIL_LPM_EnterLowPower+0x64>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800ace2:	4b10      	ldr	r3, [pc, #64]	; (800ad24 <UTIL_LPM_EnterLowPower+0x64>)
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	4798      	blx	r3
 800ace8:	e010      	b.n	800ad0c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800acea:	4b0f      	ldr	r3, [pc, #60]	; (800ad28 <UTIL_LPM_EnterLowPower+0x68>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d006      	beq.n	800ad00 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800acf2:	4b0c      	ldr	r3, [pc, #48]	; (800ad24 <UTIL_LPM_EnterLowPower+0x64>)
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800acf8:	4b0a      	ldr	r3, [pc, #40]	; (800ad24 <UTIL_LPM_EnterLowPower+0x64>)
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	4798      	blx	r3
 800acfe:	e005      	b.n	800ad0c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800ad00:	4b08      	ldr	r3, [pc, #32]	; (800ad24 <UTIL_LPM_EnterLowPower+0x64>)
 800ad02:	691b      	ldr	r3, [r3, #16]
 800ad04:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800ad06:	4b07      	ldr	r3, [pc, #28]	; (800ad24 <UTIL_LPM_EnterLowPower+0x64>)
 800ad08:	695b      	ldr	r3, [r3, #20]
 800ad0a:	4798      	blx	r3
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f383 8810 	msr	PRIMASK, r3
}
 800ad16:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800ad18:	bf00      	nop
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}
 800ad20:	20000560 	.word	0x20000560
 800ad24:	0800c41c 	.word	0x0800c41c
 800ad28:	20000564 	.word	0x20000564

0800ad2c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b087      	sub	sp, #28
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	4613      	mov	r3, r2
 800ad38:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	613b      	str	r3, [r7, #16]

  while( size-- )
 800ad42:	e007      	b.n	800ad54 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800ad44:	693a      	ldr	r2, [r7, #16]
 800ad46:	1c53      	adds	r3, r2, #1
 800ad48:	613b      	str	r3, [r7, #16]
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	1c59      	adds	r1, r3, #1
 800ad4e:	6179      	str	r1, [r7, #20]
 800ad50:	7812      	ldrb	r2, [r2, #0]
 800ad52:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800ad54:	88fb      	ldrh	r3, [r7, #6]
 800ad56:	1e5a      	subs	r2, r3, #1
 800ad58:	80fa      	strh	r2, [r7, #6]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d1f2      	bne.n	800ad44 <UTIL_MEM_cpy_8+0x18>
    }
}
 800ad5e:	bf00      	nop
 800ad60:	bf00      	nop
 800ad62:	371c      	adds	r7, #28
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bc80      	pop	{r7}
 800ad68:	4770      	bx	lr

0800ad6a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b085      	sub	sp, #20
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	460b      	mov	r3, r1
 800ad74:	70fb      	strb	r3, [r7, #3]
 800ad76:	4613      	mov	r3, r2
 800ad78:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800ad7e:	e004      	b.n	800ad8a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	1c5a      	adds	r2, r3, #1
 800ad84:	60fa      	str	r2, [r7, #12]
 800ad86:	78fa      	ldrb	r2, [r7, #3]
 800ad88:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800ad8a:	883b      	ldrh	r3, [r7, #0]
 800ad8c:	1e5a      	subs	r2, r3, #1
 800ad8e:	803a      	strh	r2, [r7, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1f5      	bne.n	800ad80 <UTIL_MEM_set_8+0x16>
  }
}
 800ad94:	bf00      	nop
 800ad96:	bf00      	nop
 800ad98:	3714      	adds	r7, #20
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bc80      	pop	{r7}
 800ad9e:	4770      	bx	lr

0800ada0 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800ada0:	b082      	sub	sp, #8
 800ada2:	b480      	push	{r7}
 800ada4:	b087      	sub	sp, #28
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	60f8      	str	r0, [r7, #12]
 800adaa:	1d38      	adds	r0, r7, #4
 800adac:	e880 0006 	stmia.w	r0, {r1, r2}
 800adb0:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800adb2:	2300      	movs	r3, #0
 800adb4:	613b      	str	r3, [r7, #16]
 800adb6:	2300      	movs	r3, #0
 800adb8:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbe:	4413      	add	r3, r2
 800adc0:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800adc2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800adc6:	b29a      	uxth	r2, r3
 800adc8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800adcc:	b29b      	uxth	r3, r3
 800adce:	4413      	add	r3, r2
 800add0:	b29b      	uxth	r3, r3
 800add2:	b21b      	sxth	r3, r3
 800add4:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800add6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800adda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800adde:	db0a      	blt.n	800adf6 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	3301      	adds	r3, #1
 800ade4:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800ade6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800adea:	b29b      	uxth	r3, r3
 800adec:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	b21b      	sxth	r3, r3
 800adf4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	461a      	mov	r2, r3
 800adfa:	f107 0310 	add.w	r3, r7, #16
 800adfe:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ae02:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	371c      	adds	r7, #28
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bc80      	pop	{r7}
 800ae0e:	b002      	add	sp, #8
 800ae10:	4770      	bx	lr
	...

0800ae14 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b08a      	sub	sp, #40	; 0x28
 800ae18:	af02      	add	r7, sp, #8
 800ae1a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	61bb      	str	r3, [r7, #24]
 800ae20:	2300      	movs	r3, #0
 800ae22:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800ae24:	2300      	movs	r3, #0
 800ae26:	613b      	str	r3, [r7, #16]
 800ae28:	2300      	movs	r3, #0
 800ae2a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800ae2c:	4b14      	ldr	r3, [pc, #80]	; (800ae80 <SysTimeGet+0x6c>)
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	f107 0218 	add.w	r2, r7, #24
 800ae34:	3204      	adds	r2, #4
 800ae36:	4610      	mov	r0, r2
 800ae38:	4798      	blx	r3
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800ae3e:	4b10      	ldr	r3, [pc, #64]	; (800ae80 <SysTimeGet+0x6c>)
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	4798      	blx	r3
 800ae44:	4603      	mov	r3, r0
 800ae46:	b21b      	sxth	r3, r3
 800ae48:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800ae4a:	4b0d      	ldr	r3, [pc, #52]	; (800ae80 <SysTimeGet+0x6c>)
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	4798      	blx	r3
 800ae50:	4603      	mov	r3, r0
 800ae52:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800ae54:	f107 0010 	add.w	r0, r7, #16
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	9300      	str	r3, [sp, #0]
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	f107 0208 	add.w	r2, r7, #8
 800ae62:	ca06      	ldmia	r2, {r1, r2}
 800ae64:	f7ff ff9c 	bl	800ada0 <SysTimeAdd>

  return sysTime;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	f107 0310 	add.w	r3, r7, #16
 800ae70:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ae74:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	3720      	adds	r7, #32
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	0800c500 	.word	0x0800c500

0800ae84 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b085      	sub	sp, #20
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  int i = 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800ae90:	e00e      	b.n	800aeb0 <ee_skip_atoi+0x2c>
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	4613      	mov	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4413      	add	r3, r2
 800ae9a:	005b      	lsls	r3, r3, #1
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	1c59      	adds	r1, r3, #1
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	6011      	str	r1, [r2, #0]
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	4403      	add	r3, r0
 800aeac:	3b30      	subs	r3, #48	; 0x30
 800aeae:	60fb      	str	r3, [r7, #12]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	2b2f      	cmp	r3, #47	; 0x2f
 800aeb8:	d904      	bls.n	800aec4 <ee_skip_atoi+0x40>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	2b39      	cmp	r3, #57	; 0x39
 800aec2:	d9e6      	bls.n	800ae92 <ee_skip_atoi+0xe>
  return i;
 800aec4:	68fb      	ldr	r3, [r7, #12]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3714      	adds	r7, #20
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bc80      	pop	{r7}
 800aece:	4770      	bx	lr

0800aed0 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b099      	sub	sp, #100	; 0x64
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
 800aedc:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800aede:	4b71      	ldr	r3, [pc, #452]	; (800b0a4 <ee_number+0x1d4>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800aee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d002      	beq.n	800aef4 <ee_number+0x24>
 800aeee:	4b6e      	ldr	r3, [pc, #440]	; (800b0a8 <ee_number+0x1d8>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	dd02      	ble.n	800af00 <ee_number+0x30>
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	2b24      	cmp	r3, #36	; 0x24
 800aefe:	dd01      	ble.n	800af04 <ee_number+0x34>
 800af00:	2300      	movs	r3, #0
 800af02:	e0ca      	b.n	800b09a <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800af04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <ee_number+0x42>
 800af0e:	2330      	movs	r3, #48	; 0x30
 800af10:	e000      	b.n	800af14 <ee_number+0x44>
 800af12:	2320      	movs	r3, #32
 800af14:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 800af18:	2300      	movs	r3, #0
 800af1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 800af1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af20:	f003 0302 	and.w	r3, r3, #2
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00b      	beq.n	800af40 <ee_number+0x70>
  {
    if (num < 0)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	da08      	bge.n	800af40 <ee_number+0x70>
    {
      sign = '-';
 800af2e:	232d      	movs	r3, #45	; 0x2d
 800af30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	425b      	negs	r3, r3
 800af38:	607b      	str	r3, [r7, #4]
      size--;
 800af3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af3c:	3b01      	subs	r3, #1
 800af3e:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800af40:	2300      	movs	r3, #0
 800af42:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d11e      	bne.n	800af88 <ee_number+0xb8>
    tmp[i++] = '0';
 800af4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af4c:	1c5a      	adds	r2, r3, #1
 800af4e:	657a      	str	r2, [r7, #84]	; 0x54
 800af50:	3360      	adds	r3, #96	; 0x60
 800af52:	443b      	add	r3, r7
 800af54:	2230      	movs	r2, #48	; 0x30
 800af56:	f803 2c50 	strb.w	r2, [r3, #-80]
 800af5a:	e018      	b.n	800af8e <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	fbb3 f1f2 	udiv	r1, r3, r2
 800af64:	fb01 f202 	mul.w	r2, r1, r2
 800af68:	1a9b      	subs	r3, r3, r2
 800af6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af6c:	441a      	add	r2, r3
 800af6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af70:	1c59      	adds	r1, r3, #1
 800af72:	6579      	str	r1, [r7, #84]	; 0x54
 800af74:	7812      	ldrb	r2, [r2, #0]
 800af76:	3360      	adds	r3, #96	; 0x60
 800af78:	443b      	add	r3, r7
 800af7a:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	fbb2 f3f3 	udiv	r3, r2, r3
 800af86:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1e6      	bne.n	800af5c <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800af8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af92:	429a      	cmp	r2, r3
 800af94:	dd01      	ble.n	800af9a <ee_number+0xca>
 800af96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af98:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 800af9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af9e:	1ad3      	subs	r3, r2, r3
 800afa0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800afa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800afa4:	f003 0301 	and.w	r3, r3, #1
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d112      	bne.n	800afd2 <ee_number+0x102>
 800afac:	e00c      	b.n	800afc8 <ee_number+0xf8>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	1c5a      	adds	r2, r3, #1
 800afb2:	60fa      	str	r2, [r7, #12]
 800afb4:	2220      	movs	r2, #32
 800afb6:	701a      	strb	r2, [r3, #0]
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	3b01      	subs	r3, #1
 800afbc:	60bb      	str	r3, [r7, #8]
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d101      	bne.n	800afc8 <ee_number+0xf8>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	e068      	b.n	800b09a <ee_number+0x1ca>
 800afc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afca:	1e5a      	subs	r2, r3, #1
 800afcc:	66ba      	str	r2, [r7, #104]	; 0x68
 800afce:	2b00      	cmp	r3, #0
 800afd0:	dced      	bgt.n	800afae <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800afd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d01b      	beq.n	800b012 <ee_number+0x142>
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	1c5a      	adds	r2, r3, #1
 800afde:	60fa      	str	r2, [r7, #12]
 800afe0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800afe4:	701a      	strb	r2, [r3, #0]
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	3b01      	subs	r3, #1
 800afea:	60bb      	str	r3, [r7, #8]
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10f      	bne.n	800b012 <ee_number+0x142>
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	e051      	b.n	800b09a <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	1c5a      	adds	r2, r3, #1
 800affa:	60fa      	str	r2, [r7, #12]
 800affc:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800b000:	701a      	strb	r2, [r3, #0]
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	3b01      	subs	r3, #1
 800b006:	60bb      	str	r3, [r7, #8]
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d101      	bne.n	800b012 <ee_number+0x142>
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	e043      	b.n	800b09a <ee_number+0x1ca>
 800b012:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b014:	1e5a      	subs	r2, r3, #1
 800b016:	66ba      	str	r2, [r7, #104]	; 0x68
 800b018:	2b00      	cmp	r3, #0
 800b01a:	dcec      	bgt.n	800aff6 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800b01c:	e00c      	b.n	800b038 <ee_number+0x168>
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	1c5a      	adds	r2, r3, #1
 800b022:	60fa      	str	r2, [r7, #12]
 800b024:	2230      	movs	r2, #48	; 0x30
 800b026:	701a      	strb	r2, [r3, #0]
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	3b01      	subs	r3, #1
 800b02c:	60bb      	str	r3, [r7, #8]
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d101      	bne.n	800b038 <ee_number+0x168>
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	e030      	b.n	800b09a <ee_number+0x1ca>
 800b038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b03a:	1e5a      	subs	r2, r3, #1
 800b03c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b03e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b040:	429a      	cmp	r2, r3
 800b042:	dbec      	blt.n	800b01e <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800b044:	e010      	b.n	800b068 <ee_number+0x198>
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	1c5a      	adds	r2, r3, #1
 800b04a:	60fa      	str	r2, [r7, #12]
 800b04c:	f107 0110 	add.w	r1, r7, #16
 800b050:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b052:	440a      	add	r2, r1
 800b054:	7812      	ldrb	r2, [r2, #0]
 800b056:	701a      	strb	r2, [r3, #0]
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	60bb      	str	r3, [r7, #8]
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <ee_number+0x198>
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	e018      	b.n	800b09a <ee_number+0x1ca>
 800b068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b06a:	1e5a      	subs	r2, r3, #1
 800b06c:	657a      	str	r2, [r7, #84]	; 0x54
 800b06e:	2b00      	cmp	r3, #0
 800b070:	dce9      	bgt.n	800b046 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800b072:	e00c      	b.n	800b08e <ee_number+0x1be>
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	1c5a      	adds	r2, r3, #1
 800b078:	60fa      	str	r2, [r7, #12]
 800b07a:	2220      	movs	r2, #32
 800b07c:	701a      	strb	r2, [r3, #0]
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	3b01      	subs	r3, #1
 800b082:	60bb      	str	r3, [r7, #8]
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d101      	bne.n	800b08e <ee_number+0x1be>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	e005      	b.n	800b09a <ee_number+0x1ca>
 800b08e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b090:	1e5a      	subs	r2, r3, #1
 800b092:	66ba      	str	r2, [r7, #104]	; 0x68
 800b094:	2b00      	cmp	r3, #0
 800b096:	dced      	bgt.n	800b074 <ee_number+0x1a4>

  return str;
 800b098:	68fb      	ldr	r3, [r7, #12]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3764      	adds	r7, #100	; 0x64
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bc80      	pop	{r7}
 800b0a2:	4770      	bx	lr
 800b0a4:	2000000c 	.word	0x2000000c
 800b0a8:	20000010 	.word	0x20000010

0800b0ac <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b092      	sub	sp, #72	; 0x48
 800b0b0:	af04      	add	r7, sp, #16
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
 800b0b8:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	dc01      	bgt.n	800b0c4 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	e142      	b.n	800b34a <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0c8:	e12a      	b.n	800b320 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 800b0ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	1ad2      	subs	r2, r2, r3
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	f280 8131 	bge.w	800b33c <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	2b25      	cmp	r3, #37	; 0x25
 800b0e0:	d006      	beq.n	800b0f0 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e6:	1c59      	adds	r1, r3, #1
 800b0e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b0ea:	7812      	ldrb	r2, [r2, #0]
 800b0ec:	701a      	strb	r2, [r3, #0]
      continue;
 800b0ee:	e114      	b.n	800b31a <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	2b30      	cmp	r3, #48	; 0x30
 800b100:	d103      	bne.n	800b10a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800b102:	6a3b      	ldr	r3, [r7, #32]
 800b104:	f043 0301 	orr.w	r3, r3, #1
 800b108:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800b10a:	f04f 33ff 	mov.w	r3, #4294967295
 800b10e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	2b2f      	cmp	r3, #47	; 0x2f
 800b116:	d908      	bls.n	800b12a <tiny_vsnprintf_like+0x7e>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	2b39      	cmp	r3, #57	; 0x39
 800b11e:	d804      	bhi.n	800b12a <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800b120:	1d3b      	adds	r3, r7, #4
 800b122:	4618      	mov	r0, r3
 800b124:	f7ff feae 	bl	800ae84 <ee_skip_atoi>
 800b128:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800b12a:	f04f 33ff 	mov.w	r3, #4294967295
 800b12e:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800b130:	f04f 33ff 	mov.w	r3, #4294967295
 800b134:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800b136:	230a      	movs	r3, #10
 800b138:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	3b58      	subs	r3, #88	; 0x58
 800b140:	2b20      	cmp	r3, #32
 800b142:	f200 8094 	bhi.w	800b26e <tiny_vsnprintf_like+0x1c2>
 800b146:	a201      	add	r2, pc, #4	; (adr r2, 800b14c <tiny_vsnprintf_like+0xa0>)
 800b148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14c:	0800b257 	.word	0x0800b257
 800b150:	0800b26f 	.word	0x0800b26f
 800b154:	0800b26f 	.word	0x0800b26f
 800b158:	0800b26f 	.word	0x0800b26f
 800b15c:	0800b26f 	.word	0x0800b26f
 800b160:	0800b26f 	.word	0x0800b26f
 800b164:	0800b26f 	.word	0x0800b26f
 800b168:	0800b26f 	.word	0x0800b26f
 800b16c:	0800b26f 	.word	0x0800b26f
 800b170:	0800b26f 	.word	0x0800b26f
 800b174:	0800b26f 	.word	0x0800b26f
 800b178:	0800b1db 	.word	0x0800b1db
 800b17c:	0800b265 	.word	0x0800b265
 800b180:	0800b26f 	.word	0x0800b26f
 800b184:	0800b26f 	.word	0x0800b26f
 800b188:	0800b26f 	.word	0x0800b26f
 800b18c:	0800b26f 	.word	0x0800b26f
 800b190:	0800b265 	.word	0x0800b265
 800b194:	0800b26f 	.word	0x0800b26f
 800b198:	0800b26f 	.word	0x0800b26f
 800b19c:	0800b26f 	.word	0x0800b26f
 800b1a0:	0800b26f 	.word	0x0800b26f
 800b1a4:	0800b26f 	.word	0x0800b26f
 800b1a8:	0800b26f 	.word	0x0800b26f
 800b1ac:	0800b26f 	.word	0x0800b26f
 800b1b0:	0800b26f 	.word	0x0800b26f
 800b1b4:	0800b26f 	.word	0x0800b26f
 800b1b8:	0800b1fb 	.word	0x0800b1fb
 800b1bc:	0800b26f 	.word	0x0800b26f
 800b1c0:	0800b2bb 	.word	0x0800b2bb
 800b1c4:	0800b26f 	.word	0x0800b26f
 800b1c8:	0800b26f 	.word	0x0800b26f
 800b1cc:	0800b25f 	.word	0x0800b25f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800b1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d2:	1c5a      	adds	r2, r3, #1
 800b1d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1d6:	2220      	movs	r2, #32
 800b1d8:	701a      	strb	r2, [r3, #0]
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	61fb      	str	r3, [r7, #28]
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	dcf4      	bgt.n	800b1d0 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	1d1a      	adds	r2, r3, #4
 800b1ea:	603a      	str	r2, [r7, #0]
 800b1ec:	6819      	ldr	r1, [r3, #0]
 800b1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f0:	1c5a      	adds	r2, r3, #1
 800b1f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1f4:	b2ca      	uxtb	r2, r1
 800b1f6:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800b1f8:	e08f      	b.n	800b31a <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	1d1a      	adds	r2, r3, #4
 800b1fe:	603a      	str	r2, [r7, #0]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 800b204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b206:	2b00      	cmp	r3, #0
 800b208:	d101      	bne.n	800b20e <tiny_vsnprintf_like+0x162>
 800b20a:	4b52      	ldr	r3, [pc, #328]	; (800b354 <tiny_vsnprintf_like+0x2a8>)
 800b20c:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800b20e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b210:	f7f4 ffb2 	bl	8000178 <strlen>
 800b214:	4603      	mov	r3, r0
 800b216:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800b218:	e004      	b.n	800b224 <tiny_vsnprintf_like+0x178>
 800b21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b21c:	1c5a      	adds	r2, r3, #1
 800b21e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b220:	2220      	movs	r2, #32
 800b222:	701a      	strb	r2, [r3, #0]
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	1e5a      	subs	r2, r3, #1
 800b228:	61fa      	str	r2, [r7, #28]
 800b22a:	693a      	ldr	r2, [r7, #16]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	dbf4      	blt.n	800b21a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800b230:	2300      	movs	r3, #0
 800b232:	62bb      	str	r3, [r7, #40]	; 0x28
 800b234:	e00a      	b.n	800b24c <tiny_vsnprintf_like+0x1a0>
 800b236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b238:	1c53      	adds	r3, r2, #1
 800b23a:	627b      	str	r3, [r7, #36]	; 0x24
 800b23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b23e:	1c59      	adds	r1, r3, #1
 800b240:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b242:	7812      	ldrb	r2, [r2, #0]
 800b244:	701a      	strb	r2, [r3, #0]
 800b246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b248:	3301      	adds	r3, #1
 800b24a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b24c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	429a      	cmp	r2, r3
 800b252:	dbf0      	blt.n	800b236 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800b254:	e061      	b.n	800b31a <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800b256:	6a3b      	ldr	r3, [r7, #32]
 800b258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b25c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800b25e:	2310      	movs	r3, #16
 800b260:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800b262:	e02d      	b.n	800b2c0 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 800b264:	6a3b      	ldr	r3, [r7, #32]
 800b266:	f043 0302 	orr.w	r3, r3, #2
 800b26a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800b26c:	e025      	b.n	800b2ba <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	2b25      	cmp	r3, #37	; 0x25
 800b274:	d004      	beq.n	800b280 <tiny_vsnprintf_like+0x1d4>
 800b276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b278:	1c5a      	adds	r2, r3, #1
 800b27a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b27c:	2225      	movs	r2, #37	; 0x25
 800b27e:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800b280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	1ad2      	subs	r2, r2, r3
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	3b01      	subs	r3, #1
 800b28a:	429a      	cmp	r2, r3
 800b28c:	da17      	bge.n	800b2be <tiny_vsnprintf_like+0x212>
        if (*fmt)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d006      	beq.n	800b2a4 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29a:	1c59      	adds	r1, r3, #1
 800b29c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b29e:	7812      	ldrb	r2, [r2, #0]
 800b2a0:	701a      	strb	r2, [r3, #0]
 800b2a2:	e002      	b.n	800b2aa <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800b2aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	1ad2      	subs	r2, r2, r3
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	db2f      	blt.n	800b318 <tiny_vsnprintf_like+0x26c>
 800b2b8:	e002      	b.n	800b2c0 <tiny_vsnprintf_like+0x214>
        break;
 800b2ba:	bf00      	nop
 800b2bc:	e000      	b.n	800b2c0 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 800b2be:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	2b6c      	cmp	r3, #108	; 0x6c
 800b2c4:	d105      	bne.n	800b2d2 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	1d1a      	adds	r2, r3, #4
 800b2ca:	603a      	str	r2, [r7, #0]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	637b      	str	r3, [r7, #52]	; 0x34
 800b2d0:	e00f      	b.n	800b2f2 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 800b2d2:	6a3b      	ldr	r3, [r7, #32]
 800b2d4:	f003 0302 	and.w	r3, r3, #2
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d005      	beq.n	800b2e8 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	1d1a      	adds	r2, r3, #4
 800b2e0:	603a      	str	r2, [r7, #0]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b2e6:	e004      	b.n	800b2f2 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	1d1a      	adds	r2, r3, #4
 800b2ec:	603a      	str	r2, [r7, #0]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	1e5a      	subs	r2, r3, #1
 800b2f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	1acb      	subs	r3, r1, r3
 800b2fc:	1ad1      	subs	r1, r2, r3
 800b2fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b300:	6a3b      	ldr	r3, [r7, #32]
 800b302:	9302      	str	r3, [sp, #8]
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	9301      	str	r3, [sp, #4]
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b310:	f7ff fdde 	bl	800aed0 <ee_number>
 800b314:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b316:	e000      	b.n	800b31a <tiny_vsnprintf_like+0x26e>
        continue;
 800b318:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	3301      	adds	r3, #1
 800b31e:	607b      	str	r3, [r7, #4]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	f47f aed0 	bne.w	800b0ca <tiny_vsnprintf_like+0x1e>
 800b32a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	1ad2      	subs	r2, r2, r3
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	3b01      	subs	r3, #1
 800b334:	429a      	cmp	r2, r3
 800b336:	f6bf aec8 	bge.w	800b0ca <tiny_vsnprintf_like+0x1e>
 800b33a:	e000      	b.n	800b33e <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 800b33c:	bf00      	nop
  }

  *str = '\0';
 800b33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b340:	2200      	movs	r2, #0
 800b342:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800b344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	1ad3      	subs	r3, r2, r3
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3738      	adds	r7, #56	; 0x38
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	0800c414 	.word	0x0800c414

0800b358 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b090      	sub	sp, #64	; 0x40
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b360:	4b73      	ldr	r3, [pc, #460]	; (800b530 <UTIL_SEQ_Run+0x1d8>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800b366:	4b72      	ldr	r3, [pc, #456]	; (800b530 <UTIL_SEQ_Run+0x1d8>)
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4013      	ands	r3, r2
 800b36e:	4a70      	ldr	r2, [pc, #448]	; (800b530 <UTIL_SEQ_Run+0x1d8>)
 800b370:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b372:	4b70      	ldr	r3, [pc, #448]	; (800b534 <UTIL_SEQ_Run+0x1dc>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b378:	4b6f      	ldr	r3, [pc, #444]	; (800b538 <UTIL_SEQ_Run+0x1e0>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b37e:	4b6f      	ldr	r3, [pc, #444]	; (800b53c <UTIL_SEQ_Run+0x1e4>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800b384:	4b6e      	ldr	r3, [pc, #440]	; (800b540 <UTIL_SEQ_Run+0x1e8>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b38a:	e08d      	b.n	800b4a8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b38c:	2300      	movs	r3, #0
 800b38e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b390:	e002      	b.n	800b398 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b394:	3301      	adds	r3, #1
 800b396:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b398:	4a6a      	ldr	r2, [pc, #424]	; (800b544 <UTIL_SEQ_Run+0x1ec>)
 800b39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b39c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a2:	401a      	ands	r2, r3
 800b3a4:	4b62      	ldr	r3, [pc, #392]	; (800b530 <UTIL_SEQ_Run+0x1d8>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d0f1      	beq.n	800b392 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b3ae:	4a65      	ldr	r2, [pc, #404]	; (800b544 <UTIL_SEQ_Run+0x1ec>)
 800b3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3b2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b8:	401a      	ands	r2, r3
 800b3ba:	4b5d      	ldr	r3, [pc, #372]	; (800b530 <UTIL_SEQ_Run+0x1d8>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4013      	ands	r3, r2
 800b3c0:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b3c2:	4a60      	ldr	r2, [pc, #384]	; (800b544 <UTIL_SEQ_Run+0x1ec>)
 800b3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3c6:	00db      	lsls	r3, r3, #3
 800b3c8:	4413      	add	r3, r2
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d106      	bne.n	800b3e2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b3d4:	4a5b      	ldr	r2, [pc, #364]	; (800b544 <UTIL_SEQ_Run+0x1ec>)
 800b3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3d8:	00db      	lsls	r3, r3, #3
 800b3da:	4413      	add	r3, r2
 800b3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b3e0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b3e2:	4a58      	ldr	r2, [pc, #352]	; (800b544 <UTIL_SEQ_Run+0x1ec>)
 800b3e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e6:	00db      	lsls	r3, r3, #3
 800b3e8:	4413      	add	r3, r2
 800b3ea:	685a      	ldr	r2, [r3, #4]
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f000 f907 	bl	800b604 <SEQ_BitPosition>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	4b53      	ldr	r3, [pc, #332]	; (800b548 <UTIL_SEQ_Run+0x1f0>)
 800b3fc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b3fe:	4a51      	ldr	r2, [pc, #324]	; (800b544 <UTIL_SEQ_Run+0x1ec>)
 800b400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b402:	00db      	lsls	r3, r3, #3
 800b404:	4413      	add	r3, r2
 800b406:	685a      	ldr	r2, [r3, #4]
 800b408:	4b4f      	ldr	r3, [pc, #316]	; (800b548 <UTIL_SEQ_Run+0x1f0>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2101      	movs	r1, #1
 800b40e:	fa01 f303 	lsl.w	r3, r1, r3
 800b412:	43db      	mvns	r3, r3
 800b414:	401a      	ands	r2, r3
 800b416:	494b      	ldr	r1, [pc, #300]	; (800b544 <UTIL_SEQ_Run+0x1ec>)
 800b418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b41a:	00db      	lsls	r3, r3, #3
 800b41c:	440b      	add	r3, r1
 800b41e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b420:	f3ef 8310 	mrs	r3, PRIMASK
 800b424:	61bb      	str	r3, [r7, #24]
  return(result);
 800b426:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b428:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b42a:	b672      	cpsid	i
}
 800b42c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b42e:	4b46      	ldr	r3, [pc, #280]	; (800b548 <UTIL_SEQ_Run+0x1f0>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2201      	movs	r2, #1
 800b434:	fa02 f303 	lsl.w	r3, r2, r3
 800b438:	43da      	mvns	r2, r3
 800b43a:	4b3e      	ldr	r3, [pc, #248]	; (800b534 <UTIL_SEQ_Run+0x1dc>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4013      	ands	r3, r2
 800b440:	4a3c      	ldr	r2, [pc, #240]	; (800b534 <UTIL_SEQ_Run+0x1dc>)
 800b442:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b444:	2301      	movs	r3, #1
 800b446:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b448:	e013      	b.n	800b472 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b44a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b44c:	3b01      	subs	r3, #1
 800b44e:	4a3d      	ldr	r2, [pc, #244]	; (800b544 <UTIL_SEQ_Run+0x1ec>)
 800b450:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b454:	4b3c      	ldr	r3, [pc, #240]	; (800b548 <UTIL_SEQ_Run+0x1f0>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2201      	movs	r2, #1
 800b45a:	fa02 f303 	lsl.w	r3, r2, r3
 800b45e:	43da      	mvns	r2, r3
 800b460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b462:	3b01      	subs	r3, #1
 800b464:	400a      	ands	r2, r1
 800b466:	4937      	ldr	r1, [pc, #220]	; (800b544 <UTIL_SEQ_Run+0x1ec>)
 800b468:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b46e:	3b01      	subs	r3, #1
 800b470:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1e8      	bne.n	800b44a <UTIL_SEQ_Run+0xf2>
 800b478:	6a3b      	ldr	r3, [r7, #32]
 800b47a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	f383 8810 	msr	PRIMASK, r3
}
 800b482:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b484:	4b30      	ldr	r3, [pc, #192]	; (800b548 <UTIL_SEQ_Run+0x1f0>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a30      	ldr	r2, [pc, #192]	; (800b54c <UTIL_SEQ_Run+0x1f4>)
 800b48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b48e:	4798      	blx	r3

    local_taskset = TaskSet;
 800b490:	4b28      	ldr	r3, [pc, #160]	; (800b534 <UTIL_SEQ_Run+0x1dc>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800b496:	4b28      	ldr	r3, [pc, #160]	; (800b538 <UTIL_SEQ_Run+0x1e0>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800b49c:	4b27      	ldr	r3, [pc, #156]	; (800b53c <UTIL_SEQ_Run+0x1e4>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800b4a2:	4b27      	ldr	r3, [pc, #156]	; (800b540 <UTIL_SEQ_Run+0x1e8>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b4a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ac:	401a      	ands	r2, r3
 800b4ae:	4b20      	ldr	r3, [pc, #128]	; (800b530 <UTIL_SEQ_Run+0x1d8>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4013      	ands	r3, r2
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d005      	beq.n	800b4c4 <UTIL_SEQ_Run+0x16c>
 800b4b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4bc:	4013      	ands	r3, r2
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f43f af64 	beq.w	800b38c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b4c4:	4b20      	ldr	r3, [pc, #128]	; (800b548 <UTIL_SEQ_Run+0x1f0>)
 800b4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ca:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b4cc:	f000 f88e 	bl	800b5ec <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4d0:	f3ef 8310 	mrs	r3, PRIMASK
 800b4d4:	613b      	str	r3, [r7, #16]
  return(result);
 800b4d6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b4d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b4da:	b672      	cpsid	i
}
 800b4dc:	bf00      	nop
  local_taskset = TaskSet;
 800b4de:	4b15      	ldr	r3, [pc, #84]	; (800b534 <UTIL_SEQ_Run+0x1dc>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b4e4:	4b14      	ldr	r3, [pc, #80]	; (800b538 <UTIL_SEQ_Run+0x1e0>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b4ea:	4b14      	ldr	r3, [pc, #80]	; (800b53c <UTIL_SEQ_Run+0x1e4>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b4f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f4:	401a      	ands	r2, r3
 800b4f6:	4b0e      	ldr	r3, [pc, #56]	; (800b530 <UTIL_SEQ_Run+0x1d8>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4013      	ands	r3, r2
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d107      	bne.n	800b510 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b500:	4b0f      	ldr	r3, [pc, #60]	; (800b540 <UTIL_SEQ_Run+0x1e8>)
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b506:	4013      	ands	r3, r2
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d101      	bne.n	800b510 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b50c:	f7f5 fa96 	bl	8000a3c <UTIL_SEQ_Idle>
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f383 8810 	msr	PRIMASK, r3
}
 800b51a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b51c:	f000 f86c 	bl	800b5f8 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b520:	4a03      	ldr	r2, [pc, #12]	; (800b530 <UTIL_SEQ_Run+0x1d8>)
 800b522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b524:	6013      	str	r3, [r2, #0]

  return;
 800b526:	bf00      	nop
}
 800b528:	3740      	adds	r7, #64	; 0x40
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	20000018 	.word	0x20000018
 800b534:	20000568 	.word	0x20000568
 800b538:	2000056c 	.word	0x2000056c
 800b53c:	20000014 	.word	0x20000014
 800b540:	20000570 	.word	0x20000570
 800b544:	2000057c 	.word	0x2000057c
 800b548:	20000574 	.word	0x20000574
 800b54c:	20000578 	.word	0x20000578

0800b550 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b088      	sub	sp, #32
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b55c:	f3ef 8310 	mrs	r3, PRIMASK
 800b560:	617b      	str	r3, [r7, #20]
  return(result);
 800b562:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b564:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b566:	b672      	cpsid	i
}
 800b568:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f000 f84a 	bl	800b604 <SEQ_BitPosition>
 800b570:	4603      	mov	r3, r0
 800b572:	4619      	mov	r1, r3
 800b574:	4a06      	ldr	r2, [pc, #24]	; (800b590 <UTIL_SEQ_RegTask+0x40>)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b57c:	69fb      	ldr	r3, [r7, #28]
 800b57e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	f383 8810 	msr	PRIMASK, r3
}
 800b586:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b588:	bf00      	nop
}
 800b58a:	3720      	adds	r7, #32
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	20000578 	.word	0x20000578

0800b594 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b594:	b480      	push	{r7}
 800b596:	b087      	sub	sp, #28
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b59e:	f3ef 8310 	mrs	r3, PRIMASK
 800b5a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b5a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5a8:	b672      	cpsid	i
}
 800b5aa:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b5ac:	4b0d      	ldr	r3, [pc, #52]	; (800b5e4 <UTIL_SEQ_SetTask+0x50>)
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	4a0b      	ldr	r2, [pc, #44]	; (800b5e4 <UTIL_SEQ_SetTask+0x50>)
 800b5b6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b5b8:	4a0b      	ldr	r2, [pc, #44]	; (800b5e8 <UTIL_SEQ_SetTask+0x54>)
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	431a      	orrs	r2, r3
 800b5c4:	4908      	ldr	r1, [pc, #32]	; (800b5e8 <UTIL_SEQ_SetTask+0x54>)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	f383 8810 	msr	PRIMASK, r3
}
 800b5d6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b5d8:	bf00      	nop
}
 800b5da:	371c      	adds	r7, #28
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bc80      	pop	{r7}
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	20000568 	.word	0x20000568
 800b5e8:	2000057c 	.word	0x2000057c

0800b5ec <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b5f0:	bf00      	nop
}
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bc80      	pop	{r7}
 800b5f6:	4770      	bx	lr

0800b5f8 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b5fc:	bf00      	nop
}
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bc80      	pop	{r7}
 800b602:	4770      	bx	lr

0800b604 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b60c:	2300      	movs	r3, #0
 800b60e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	0c1b      	lsrs	r3, r3, #16
 800b618:	041b      	lsls	r3, r3, #16
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d104      	bne.n	800b628 <SEQ_BitPosition+0x24>
 800b61e:	2310      	movs	r3, #16
 800b620:	73fb      	strb	r3, [r7, #15]
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	041b      	lsls	r3, r3, #16
 800b626:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d105      	bne.n	800b63e <SEQ_BitPosition+0x3a>
 800b632:	7bfb      	ldrb	r3, [r7, #15]
 800b634:	3308      	adds	r3, #8
 800b636:	73fb      	strb	r3, [r7, #15]
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	021b      	lsls	r3, r3, #8
 800b63c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d105      	bne.n	800b654 <SEQ_BitPosition+0x50>
 800b648:	7bfb      	ldrb	r3, [r7, #15]
 800b64a:	3304      	adds	r3, #4
 800b64c:	73fb      	strb	r3, [r7, #15]
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	011b      	lsls	r3, r3, #4
 800b652:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	0f1b      	lsrs	r3, r3, #28
 800b658:	4a06      	ldr	r2, [pc, #24]	; (800b674 <SEQ_BitPosition+0x70>)
 800b65a:	5cd2      	ldrb	r2, [r2, r3]
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
 800b65e:	4413      	add	r3, r2
 800b660:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b662:	7bfb      	ldrb	r3, [r7, #15]
 800b664:	f1c3 031f 	rsb	r3, r3, #31
 800b668:	b2db      	uxtb	r3, r3
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	bc80      	pop	{r7}
 800b672:	4770      	bx	lr
 800b674:	0800c684 	.word	0x0800c684

0800b678 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800b67c:	4b04      	ldr	r3, [pc, #16]	; (800b690 <UTIL_TIMER_Init+0x18>)
 800b67e:	2200      	movs	r2, #0
 800b680:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800b682:	4b04      	ldr	r3, [pc, #16]	; (800b694 <UTIL_TIMER_Init+0x1c>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4798      	blx	r3
 800b688:	4603      	mov	r3, r0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	20000584 	.word	0x20000584
 800b694:	0800c4d4 	.word	0x0800c4d4

0800b698 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	603b      	str	r3, [r7, #0]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d023      	beq.n	800b6f6 <UTIL_TIMER_Create+0x5e>
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d020      	beq.n	800b6f6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b6ba:	4b11      	ldr	r3, [pc, #68]	; (800b700 <UTIL_TIMER_Create+0x68>)
 800b6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6be:	68b8      	ldr	r0, [r7, #8]
 800b6c0:	4798      	blx	r3
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	683a      	ldr	r2, [r7, #0]
 800b6de:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	69ba      	ldr	r2, [r7, #24]
 800b6e4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	79fa      	ldrb	r2, [r7, #7]
 800b6ea:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	e000      	b.n	800b6f8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b6f6:	2301      	movs	r3, #1
  }
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3710      	adds	r7, #16
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	0800c4d4 	.word	0x0800c4d4

0800b704 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b08a      	sub	sp, #40	; 0x28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b70c:	2300      	movs	r3, #0
 800b70e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d056      	beq.n	800b7c6 <UTIL_TIMER_Start+0xc2>
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f9a9 	bl	800ba70 <TimerExists>
 800b71e:	4603      	mov	r3, r0
 800b720:	f083 0301 	eor.w	r3, r3, #1
 800b724:	b2db      	uxtb	r3, r3
 800b726:	2b00      	cmp	r3, #0
 800b728:	d04d      	beq.n	800b7c6 <UTIL_TIMER_Start+0xc2>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	7a5b      	ldrb	r3, [r3, #9]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d149      	bne.n	800b7c6 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b732:	f3ef 8310 	mrs	r3, PRIMASK
 800b736:	613b      	str	r3, [r7, #16]
  return(result);
 800b738:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b73a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b73c:	b672      	cpsid	i
}
 800b73e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b746:	4b24      	ldr	r3, [pc, #144]	; (800b7d8 <UTIL_TIMER_Start+0xd4>)
 800b748:	6a1b      	ldr	r3, [r3, #32]
 800b74a:	4798      	blx	r3
 800b74c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b74e:	6a3a      	ldr	r2, [r7, #32]
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	429a      	cmp	r2, r3
 800b754:	d201      	bcs.n	800b75a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a3a      	ldr	r2, [r7, #32]
 800b75e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b772:	4b1a      	ldr	r3, [pc, #104]	; (800b7dc <UTIL_TIMER_Start+0xd8>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d106      	bne.n	800b788 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b77a:	4b17      	ldr	r3, [pc, #92]	; (800b7d8 <UTIL_TIMER_Start+0xd4>)
 800b77c:	691b      	ldr	r3, [r3, #16]
 800b77e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 f9eb 	bl	800bb5c <TimerInsertNewHeadTimer>
 800b786:	e017      	b.n	800b7b8 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b788:	4b13      	ldr	r3, [pc, #76]	; (800b7d8 <UTIL_TIMER_Start+0xd4>)
 800b78a:	699b      	ldr	r3, [r3, #24]
 800b78c:	4798      	blx	r3
 800b78e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	441a      	add	r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	4b0e      	ldr	r3, [pc, #56]	; (800b7dc <UTIL_TIMER_Start+0xd8>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d203      	bcs.n	800b7b2 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 f9d6 	bl	800bb5c <TimerInsertNewHeadTimer>
 800b7b0:	e002      	b.n	800b7b8 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f9a2 	bl	800bafc <TimerInsertTimer>
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f383 8810 	msr	PRIMASK, r3
}
 800b7c2:	bf00      	nop
  {
 800b7c4:	e002      	b.n	800b7cc <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3728      	adds	r7, #40	; 0x28
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	0800c4d4 	.word	0x0800c4d4
 800b7dc:	20000584 	.word	0x20000584

0800b7e0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b088      	sub	sp, #32
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d05b      	beq.n	800b8aa <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b7f6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b7fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7fc:	b672      	cpsid	i
}
 800b7fe:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b800:	4b2d      	ldr	r3, [pc, #180]	; (800b8b8 <UTIL_TIMER_Stop+0xd8>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b806:	4b2c      	ldr	r3, [pc, #176]	; (800b8b8 <UTIL_TIMER_Stop+0xd8>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b812:	4b29      	ldr	r3, [pc, #164]	; (800b8b8 <UTIL_TIMER_Stop+0xd8>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d041      	beq.n	800b89e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b820:	4b25      	ldr	r3, [pc, #148]	; (800b8b8 <UTIL_TIMER_Stop+0xd8>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	429a      	cmp	r2, r3
 800b828:	d134      	bne.n	800b894 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b82a:	4b23      	ldr	r3, [pc, #140]	; (800b8b8 <UTIL_TIMER_Stop+0xd8>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2200      	movs	r2, #0
 800b830:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b832:	4b21      	ldr	r3, [pc, #132]	; (800b8b8 <UTIL_TIMER_Stop+0xd8>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	695b      	ldr	r3, [r3, #20]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00a      	beq.n	800b852 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b83c:	4b1e      	ldr	r3, [pc, #120]	; (800b8b8 <UTIL_TIMER_Stop+0xd8>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	695b      	ldr	r3, [r3, #20]
 800b842:	4a1d      	ldr	r2, [pc, #116]	; (800b8b8 <UTIL_TIMER_Stop+0xd8>)
 800b844:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b846:	4b1c      	ldr	r3, [pc, #112]	; (800b8b8 <UTIL_TIMER_Stop+0xd8>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 f92c 	bl	800baa8 <TimerSetTimeout>
 800b850:	e023      	b.n	800b89a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b852:	4b1a      	ldr	r3, [pc, #104]	; (800b8bc <UTIL_TIMER_Stop+0xdc>)
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	4798      	blx	r3
            TimerListHead = NULL;
 800b858:	4b17      	ldr	r3, [pc, #92]	; (800b8b8 <UTIL_TIMER_Stop+0xd8>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	601a      	str	r2, [r3, #0]
 800b85e:	e01c      	b.n	800b89a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b860:	697a      	ldr	r2, [r7, #20]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	429a      	cmp	r2, r3
 800b866:	d110      	bne.n	800b88a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	695b      	ldr	r3, [r3, #20]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d006      	beq.n	800b87e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	695b      	ldr	r3, [r3, #20]
 800b874:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	697a      	ldr	r2, [r7, #20]
 800b87a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b87c:	e00d      	b.n	800b89a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b87e:	2300      	movs	r3, #0
 800b880:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	697a      	ldr	r2, [r7, #20]
 800b886:	615a      	str	r2, [r3, #20]
            break;
 800b888:	e007      	b.n	800b89a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	695b      	ldr	r3, [r3, #20]
 800b892:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d1e2      	bne.n	800b860 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b89a:	2300      	movs	r3, #0
 800b89c:	77fb      	strb	r3, [r7, #31]
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	f383 8810 	msr	PRIMASK, r3
}
 800b8a8:	e001      	b.n	800b8ae <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b8ae:	7ffb      	ldrb	r3, [r7, #31]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3720      	adds	r7, #32
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	20000584 	.word	0x20000584
 800b8bc:	0800c4d4 	.word	0x0800c4d4

0800b8c0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d102      	bne.n	800b8da <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	73fb      	strb	r3, [r7, #15]
 800b8d8:	e014      	b.n	800b904 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b8da:	4b0d      	ldr	r3, [pc, #52]	; (800b910 <UTIL_TIMER_SetPeriod+0x50>)
 800b8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8de:	6838      	ldr	r0, [r7, #0]
 800b8e0:	4798      	blx	r3
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 f8c1 	bl	800ba70 <TimerExists>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d007      	beq.n	800b904 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7ff ff73 	bl	800b7e0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f7ff ff02 	bl	800b704 <UTIL_TIMER_Start>
 800b900:	4603      	mov	r3, r0
 800b902:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b904:	7bfb      	ldrb	r3, [r7, #15]
}
 800b906:	4618      	mov	r0, r3
 800b908:	3710      	adds	r7, #16
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	0800c4d4 	.word	0x0800c4d4

0800b914 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800b914:	b590      	push	{r4, r7, lr}
 800b916:	b089      	sub	sp, #36	; 0x24
 800b918:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b91a:	f3ef 8310 	mrs	r3, PRIMASK
 800b91e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b920:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b922:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b924:	b672      	cpsid	i
}
 800b926:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800b928:	4b38      	ldr	r3, [pc, #224]	; (800ba0c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b92a:	695b      	ldr	r3, [r3, #20]
 800b92c:	4798      	blx	r3
 800b92e:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800b930:	4b36      	ldr	r3, [pc, #216]	; (800ba0c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	4798      	blx	r3
 800b936:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800b938:	693a      	ldr	r2, [r7, #16]
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	1ad3      	subs	r3, r2, r3
 800b93e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800b940:	4b33      	ldr	r3, [pc, #204]	; (800ba10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d037      	beq.n	800b9b8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800b948:	4b31      	ldr	r3, [pc, #196]	; (800ba10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	429a      	cmp	r2, r3
 800b956:	d206      	bcs.n	800b966 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	1ad2      	subs	r2, r2, r3
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	601a      	str	r2, [r3, #0]
 800b964:	e002      	b.n	800b96c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	2200      	movs	r2, #0
 800b96a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	695b      	ldr	r3, [r3, #20]
 800b970:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1ea      	bne.n	800b94e <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800b978:	e01e      	b.n	800b9b8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800b97a:	4b25      	ldr	r3, [pc, #148]	; (800ba10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800b980:	4b23      	ldr	r3, [pc, #140]	; (800ba10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	695b      	ldr	r3, [r3, #20]
 800b986:	4a22      	ldr	r2, [pc, #136]	; (800ba10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b988:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	2200      	movs	r2, #0
 800b98e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	2200      	movs	r2, #0
 800b994:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	68db      	ldr	r3, [r3, #12]
 800b99a:	69fa      	ldr	r2, [r7, #28]
 800b99c:	6912      	ldr	r2, [r2, #16]
 800b99e:	4610      	mov	r0, r2
 800b9a0:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800b9a2:	69fb      	ldr	r3, [r7, #28]
 800b9a4:	7adb      	ldrb	r3, [r3, #11]
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d106      	bne.n	800b9b8 <UTIL_TIMER_IRQ_Handler+0xa4>
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	7a9b      	ldrb	r3, [r3, #10]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d102      	bne.n	800b9b8 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800b9b2:	69f8      	ldr	r0, [r7, #28]
 800b9b4:	f7ff fea6 	bl	800b704 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800b9b8:	4b15      	ldr	r3, [pc, #84]	; (800ba10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00d      	beq.n	800b9dc <UTIL_TIMER_IRQ_Handler+0xc8>
 800b9c0:	4b13      	ldr	r3, [pc, #76]	; (800ba10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d0d7      	beq.n	800b97a <UTIL_TIMER_IRQ_Handler+0x66>
 800b9ca:	4b11      	ldr	r3, [pc, #68]	; (800ba10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	681c      	ldr	r4, [r3, #0]
 800b9d0:	4b0e      	ldr	r3, [pc, #56]	; (800ba0c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b9d2:	699b      	ldr	r3, [r3, #24]
 800b9d4:	4798      	blx	r3
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	429c      	cmp	r4, r3
 800b9da:	d3ce      	bcc.n	800b97a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800b9dc:	4b0c      	ldr	r3, [pc, #48]	; (800ba10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d009      	beq.n	800b9f8 <UTIL_TIMER_IRQ_Handler+0xe4>
 800b9e4:	4b0a      	ldr	r3, [pc, #40]	; (800ba10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	7a1b      	ldrb	r3, [r3, #8]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d104      	bne.n	800b9f8 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800b9ee:	4b08      	ldr	r3, [pc, #32]	; (800ba10 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 f858 	bl	800baa8 <TimerSetTimeout>
 800b9f8:	69bb      	ldr	r3, [r7, #24]
 800b9fa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f383 8810 	msr	PRIMASK, r3
}
 800ba02:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800ba04:	bf00      	nop
 800ba06:	3724      	adds	r7, #36	; 0x24
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd90      	pop	{r4, r7, pc}
 800ba0c:	0800c4d4 	.word	0x0800c4d4
 800ba10:	20000584 	.word	0x20000584

0800ba14 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800ba1a:	4b06      	ldr	r3, [pc, #24]	; (800ba34 <UTIL_TIMER_GetCurrentTime+0x20>)
 800ba1c:	69db      	ldr	r3, [r3, #28]
 800ba1e:	4798      	blx	r3
 800ba20:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800ba22:	4b04      	ldr	r3, [pc, #16]	; (800ba34 <UTIL_TIMER_GetCurrentTime+0x20>)
 800ba24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	4798      	blx	r3
 800ba2a:	4603      	mov	r3, r0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3708      	adds	r7, #8
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	0800c4d4 	.word	0x0800c4d4

0800ba38 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800ba40:	4b0a      	ldr	r3, [pc, #40]	; (800ba6c <UTIL_TIMER_GetElapsedTime+0x34>)
 800ba42:	69db      	ldr	r3, [r3, #28]
 800ba44:	4798      	blx	r3
 800ba46:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800ba48:	4b08      	ldr	r3, [pc, #32]	; (800ba6c <UTIL_TIMER_GetElapsedTime+0x34>)
 800ba4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	4798      	blx	r3
 800ba50:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800ba52:	4b06      	ldr	r3, [pc, #24]	; (800ba6c <UTIL_TIMER_GetElapsedTime+0x34>)
 800ba54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba56:	68f9      	ldr	r1, [r7, #12]
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	1a8a      	subs	r2, r1, r2
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	4798      	blx	r3
 800ba60:	4603      	mov	r3, r0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	0800c4d4 	.word	0x0800c4d4

0800ba70 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800ba70:	b480      	push	{r7}
 800ba72:	b085      	sub	sp, #20
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ba78:	4b0a      	ldr	r3, [pc, #40]	; (800baa4 <TimerExists+0x34>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800ba7e:	e008      	b.n	800ba92 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d101      	bne.n	800ba8c <TimerExists+0x1c>
    {
      return true;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e006      	b.n	800ba9a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	695b      	ldr	r3, [r3, #20]
 800ba90:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1f3      	bne.n	800ba80 <TimerExists+0x10>
  }
  return false;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3714      	adds	r7, #20
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bc80      	pop	{r7}
 800baa2:	4770      	bx	lr
 800baa4:	20000584 	.word	0x20000584

0800baa8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800baa8:	b590      	push	{r4, r7, lr}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800bab0:	4b11      	ldr	r3, [pc, #68]	; (800baf8 <TimerSetTimeout+0x50>)
 800bab2:	6a1b      	ldr	r3, [r3, #32]
 800bab4:	4798      	blx	r3
 800bab6:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681c      	ldr	r4, [r3, #0]
 800bac2:	4b0d      	ldr	r3, [pc, #52]	; (800baf8 <TimerSetTimeout+0x50>)
 800bac4:	699b      	ldr	r3, [r3, #24]
 800bac6:	4798      	blx	r3
 800bac8:	4602      	mov	r2, r0
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	4413      	add	r3, r2
 800bace:	429c      	cmp	r4, r3
 800bad0:	d207      	bcs.n	800bae2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800bad2:	4b09      	ldr	r3, [pc, #36]	; (800baf8 <TimerSetTimeout+0x50>)
 800bad4:	699b      	ldr	r3, [r3, #24]
 800bad6:	4798      	blx	r3
 800bad8:	4602      	mov	r2, r0
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	441a      	add	r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800bae2:	4b05      	ldr	r3, [pc, #20]	; (800baf8 <TimerSetTimeout+0x50>)
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	6812      	ldr	r2, [r2, #0]
 800baea:	4610      	mov	r0, r2
 800baec:	4798      	blx	r3
}
 800baee:	bf00      	nop
 800baf0:	3714      	adds	r7, #20
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd90      	pop	{r4, r7, pc}
 800baf6:	bf00      	nop
 800baf8:	0800c4d4 	.word	0x0800c4d4

0800bafc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b085      	sub	sp, #20
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bb04:	4b14      	ldr	r3, [pc, #80]	; (800bb58 <TimerInsertTimer+0x5c>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800bb0a:	4b13      	ldr	r3, [pc, #76]	; (800bb58 <TimerInsertTimer+0x5c>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	695b      	ldr	r3, [r3, #20]
 800bb10:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800bb12:	e012      	b.n	800bb3a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d905      	bls.n	800bb2c <TimerInsertTimer+0x30>
    {
        cur = next;
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	695b      	ldr	r3, [r3, #20]
 800bb28:	60bb      	str	r3, [r7, #8]
 800bb2a:	e006      	b.n	800bb3a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	615a      	str	r2, [r3, #20]
        return;
 800bb38:	e009      	b.n	800bb4e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	695b      	ldr	r3, [r3, #20]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d1e8      	bne.n	800bb14 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	615a      	str	r2, [r3, #20]
}
 800bb4e:	3714      	adds	r7, #20
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bc80      	pop	{r7}
 800bb54:	4770      	bx	lr
 800bb56:	bf00      	nop
 800bb58:	20000584 	.word	0x20000584

0800bb5c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bb64:	4b0b      	ldr	r3, [pc, #44]	; (800bb94 <TimerInsertNewHeadTimer+0x38>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	68fa      	ldr	r2, [r7, #12]
 800bb7a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800bb7c:	4a05      	ldr	r2, [pc, #20]	; (800bb94 <TimerInsertNewHeadTimer+0x38>)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800bb82:	4b04      	ldr	r3, [pc, #16]	; (800bb94 <TimerInsertNewHeadTimer+0x38>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7ff ff8e 	bl	800baa8 <TimerSetTimeout>
}
 800bb8c:	bf00      	nop
 800bb8e:	3710      	adds	r7, #16
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	20000584 	.word	0x20000584

0800bb98 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800bb9c:	2218      	movs	r2, #24
 800bb9e:	2100      	movs	r1, #0
 800bba0:	4807      	ldr	r0, [pc, #28]	; (800bbc0 <UTIL_ADV_TRACE_Init+0x28>)
 800bba2:	f7ff f8e2 	bl	800ad6a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800bba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbaa:	2100      	movs	r1, #0
 800bbac:	4805      	ldr	r0, [pc, #20]	; (800bbc4 <UTIL_ADV_TRACE_Init+0x2c>)
 800bbae:	f7ff f8dc 	bl	800ad6a <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800bbb2:	4b05      	ldr	r3, [pc, #20]	; (800bbc8 <UTIL_ADV_TRACE_Init+0x30>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4805      	ldr	r0, [pc, #20]	; (800bbcc <UTIL_ADV_TRACE_Init+0x34>)
 800bbb8:	4798      	blx	r3
 800bbba:	4603      	mov	r3, r0
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	20000588 	.word	0x20000588
 800bbc4:	200005a0 	.word	0x200005a0
 800bbc8:	0800c514 	.word	0x0800c514
 800bbcc:	0800be15 	.word	0x0800be15

0800bbd0 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800bbd0:	b408      	push	{r3}
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b08d      	sub	sp, #52	; 0x34
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	60f8      	str	r0, [r7, #12]
 800bbda:	60b9      	str	r1, [r7, #8]
 800bbdc:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800bbe6:	4b37      	ldr	r3, [pc, #220]	; (800bcc4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bbe8:	7a1b      	ldrb	r3, [r3, #8]
 800bbea:	461a      	mov	r2, r3
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d902      	bls.n	800bbf8 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800bbf2:	f06f 0304 	mvn.w	r3, #4
 800bbf6:	e05e      	b.n	800bcb6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800bbf8:	4b32      	ldr	r3, [pc, #200]	; (800bcc4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bbfa:	68da      	ldr	r2, [r3, #12]
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	4013      	ands	r3, r2
 800bc00:	68ba      	ldr	r2, [r7, #8]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d002      	beq.n	800bc0c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800bc06:	f06f 0305 	mvn.w	r3, #5
 800bc0a:	e054      	b.n	800bcb6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800bc0c:	4b2d      	ldr	r3, [pc, #180]	; (800bcc4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00a      	beq.n	800bc2a <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d007      	beq.n	800bc2a <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800bc1a:	4b2a      	ldr	r3, [pc, #168]	; (800bcc4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	f107 0116 	add.w	r1, r7, #22
 800bc22:	f107 0218 	add.w	r2, r7, #24
 800bc26:	4610      	mov	r0, r2
 800bc28:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800bc2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bc2e:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800bc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc34:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bc38:	4823      	ldr	r0, [pc, #140]	; (800bcc8 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800bc3a:	f7ff fa37 	bl	800b0ac <tiny_vsnprintf_like>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 800bc42:	f000 f9f1 	bl	800c028 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800bc46:	8afa      	ldrh	r2, [r7, #22]
 800bc48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bc4a:	4413      	add	r3, r2
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	f107 0214 	add.w	r2, r7, #20
 800bc52:	4611      	mov	r1, r2
 800bc54:	4618      	mov	r0, r3
 800bc56:	f000 f969 	bl	800bf2c <TRACE_AllocateBufer>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc60:	d025      	beq.n	800bcae <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800bc62:	2300      	movs	r3, #0
 800bc64:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bc66:	e00e      	b.n	800bc86 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800bc68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc6a:	8aba      	ldrh	r2, [r7, #20]
 800bc6c:	3330      	adds	r3, #48	; 0x30
 800bc6e:	443b      	add	r3, r7
 800bc70:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800bc74:	4b15      	ldr	r3, [pc, #84]	; (800bccc <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800bc76:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800bc78:	8abb      	ldrh	r3, [r7, #20]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800bc80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc82:	3301      	adds	r3, #1
 800bc84:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bc86:	8afb      	ldrh	r3, [r7, #22]
 800bc88:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d3ec      	bcc.n	800bc68 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800bc8e:	8abb      	ldrh	r3, [r7, #20]
 800bc90:	461a      	mov	r2, r3
 800bc92:	4b0e      	ldr	r3, [pc, #56]	; (800bccc <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800bc94:	18d0      	adds	r0, r2, r3
 800bc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bc9e:	f7ff fa05 	bl	800b0ac <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800bca2:	f000 f9df 	bl	800c064 <TRACE_UnLock>

    return TRACE_Send();
 800bca6:	f000 f831 	bl	800bd0c <TRACE_Send>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	e003      	b.n	800bcb6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800bcae:	f000 f9d9 	bl	800c064 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800bcb2:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3734      	adds	r7, #52	; 0x34
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bcc0:	b001      	add	sp, #4
 800bcc2:	4770      	bx	lr
 800bcc4:	20000588 	.word	0x20000588
 800bcc8:	200007a0 	.word	0x200007a0
 800bccc:	200005a0 	.word	0x200005a0

0800bcd0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800bcd8:	4a03      	ldr	r2, [pc, #12]	; (800bce8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6053      	str	r3, [r2, #4]
}
 800bcde:	bf00      	nop
 800bce0:	370c      	adds	r7, #12
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bc80      	pop	{r7}
 800bce6:	4770      	bx	lr
 800bce8:	20000588 	.word	0x20000588

0800bcec <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800bcf6:	4a04      	ldr	r2, [pc, #16]	; (800bd08 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800bcf8:	79fb      	ldrb	r3, [r7, #7]
 800bcfa:	7213      	strb	r3, [r2, #8]
}
 800bcfc:	bf00      	nop
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bc80      	pop	{r7}
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	20000588 	.word	0x20000588

0800bd0c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b088      	sub	sp, #32
 800bd10:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800bd12:	2300      	movs	r3, #0
 800bd14:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800bd16:	2300      	movs	r3, #0
 800bd18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd1a:	f3ef 8310 	mrs	r3, PRIMASK
 800bd1e:	613b      	str	r3, [r7, #16]
  return(result);
 800bd20:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bd22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd24:	b672      	cpsid	i
}
 800bd26:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800bd28:	f000 f9ba 	bl	800c0a0 <TRACE_IsLocked>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d15d      	bne.n	800bdee <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800bd32:	f000 f979 	bl	800c028 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800bd36:	4b34      	ldr	r3, [pc, #208]	; (800be08 <TRACE_Send+0xfc>)
 800bd38:	8a1a      	ldrh	r2, [r3, #16]
 800bd3a:	4b33      	ldr	r3, [pc, #204]	; (800be08 <TRACE_Send+0xfc>)
 800bd3c:	8a5b      	ldrh	r3, [r3, #18]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d04d      	beq.n	800bdde <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800bd42:	4b31      	ldr	r3, [pc, #196]	; (800be08 <TRACE_Send+0xfc>)
 800bd44:	789b      	ldrb	r3, [r3, #2]
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d117      	bne.n	800bd7a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800bd4a:	4b2f      	ldr	r3, [pc, #188]	; (800be08 <TRACE_Send+0xfc>)
 800bd4c:	881a      	ldrh	r2, [r3, #0]
 800bd4e:	4b2e      	ldr	r3, [pc, #184]	; (800be08 <TRACE_Send+0xfc>)
 800bd50:	8a1b      	ldrh	r3, [r3, #16]
 800bd52:	1ad3      	subs	r3, r2, r3
 800bd54:	b29a      	uxth	r2, r3
 800bd56:	4b2c      	ldr	r3, [pc, #176]	; (800be08 <TRACE_Send+0xfc>)
 800bd58:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800bd5a:	4b2b      	ldr	r3, [pc, #172]	; (800be08 <TRACE_Send+0xfc>)
 800bd5c:	2202      	movs	r2, #2
 800bd5e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800bd60:	4b29      	ldr	r3, [pc, #164]	; (800be08 <TRACE_Send+0xfc>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800bd66:	4b28      	ldr	r3, [pc, #160]	; (800be08 <TRACE_Send+0xfc>)
 800bd68:	8a9b      	ldrh	r3, [r3, #20]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d105      	bne.n	800bd7a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800bd6e:	4b26      	ldr	r3, [pc, #152]	; (800be08 <TRACE_Send+0xfc>)
 800bd70:	2200      	movs	r2, #0
 800bd72:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bd74:	4b24      	ldr	r3, [pc, #144]	; (800be08 <TRACE_Send+0xfc>)
 800bd76:	2200      	movs	r2, #0
 800bd78:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800bd7a:	4b23      	ldr	r3, [pc, #140]	; (800be08 <TRACE_Send+0xfc>)
 800bd7c:	789b      	ldrb	r3, [r3, #2]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d115      	bne.n	800bdae <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800bd82:	4b21      	ldr	r3, [pc, #132]	; (800be08 <TRACE_Send+0xfc>)
 800bd84:	8a5a      	ldrh	r2, [r3, #18]
 800bd86:	4b20      	ldr	r3, [pc, #128]	; (800be08 <TRACE_Send+0xfc>)
 800bd88:	8a1b      	ldrh	r3, [r3, #16]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d908      	bls.n	800bda0 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800bd8e:	4b1e      	ldr	r3, [pc, #120]	; (800be08 <TRACE_Send+0xfc>)
 800bd90:	8a5a      	ldrh	r2, [r3, #18]
 800bd92:	4b1d      	ldr	r3, [pc, #116]	; (800be08 <TRACE_Send+0xfc>)
 800bd94:	8a1b      	ldrh	r3, [r3, #16]
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	4b1b      	ldr	r3, [pc, #108]	; (800be08 <TRACE_Send+0xfc>)
 800bd9c:	829a      	strh	r2, [r3, #20]
 800bd9e:	e006      	b.n	800bdae <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800bda0:	4b19      	ldr	r3, [pc, #100]	; (800be08 <TRACE_Send+0xfc>)
 800bda2:	8a1b      	ldrh	r3, [r3, #16]
 800bda4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	4b17      	ldr	r3, [pc, #92]	; (800be08 <TRACE_Send+0xfc>)
 800bdac:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800bdae:	4b16      	ldr	r3, [pc, #88]	; (800be08 <TRACE_Send+0xfc>)
 800bdb0:	8a1b      	ldrh	r3, [r3, #16]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	4b15      	ldr	r3, [pc, #84]	; (800be0c <TRACE_Send+0x100>)
 800bdb6:	4413      	add	r3, r2
 800bdb8:	61bb      	str	r3, [r7, #24]
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f383 8810 	msr	PRIMASK, r3
}
 800bdc4:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800bdc6:	f7f4 fe5f 	bl	8000a88 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800bdca:	4b11      	ldr	r3, [pc, #68]	; (800be10 <TRACE_Send+0x104>)
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	4a0e      	ldr	r2, [pc, #56]	; (800be08 <TRACE_Send+0xfc>)
 800bdd0:	8a92      	ldrh	r2, [r2, #20]
 800bdd2:	4611      	mov	r1, r2
 800bdd4:	69b8      	ldr	r0, [r7, #24]
 800bdd6:	4798      	blx	r3
 800bdd8:	4603      	mov	r3, r0
 800bdda:	77fb      	strb	r3, [r7, #31]
 800bddc:	e00d      	b.n	800bdfa <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800bdde:	f000 f941 	bl	800c064 <TRACE_UnLock>
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	f383 8810 	msr	PRIMASK, r3
}
 800bdec:	e005      	b.n	800bdfa <TRACE_Send+0xee>
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f383 8810 	msr	PRIMASK, r3
}
 800bdf8:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800bdfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3720      	adds	r7, #32
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	20000588 	.word	0x20000588
 800be0c:	200005a0 	.word	0x200005a0
 800be10:	0800c514 	.word	0x0800c514

0800be14 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b088      	sub	sp, #32
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800be1c:	2300      	movs	r3, #0
 800be1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be20:	f3ef 8310 	mrs	r3, PRIMASK
 800be24:	617b      	str	r3, [r7, #20]
  return(result);
 800be26:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800be28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800be2a:	b672      	cpsid	i
}
 800be2c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800be2e:	4b3c      	ldr	r3, [pc, #240]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800be30:	789b      	ldrb	r3, [r3, #2]
 800be32:	2b02      	cmp	r3, #2
 800be34:	d106      	bne.n	800be44 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800be36:	4b3a      	ldr	r3, [pc, #232]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800be38:	2200      	movs	r2, #0
 800be3a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800be3c:	4b38      	ldr	r3, [pc, #224]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800be3e:	2200      	movs	r2, #0
 800be40:	821a      	strh	r2, [r3, #16]
 800be42:	e00a      	b.n	800be5a <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800be44:	4b36      	ldr	r3, [pc, #216]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800be46:	8a1a      	ldrh	r2, [r3, #16]
 800be48:	4b35      	ldr	r3, [pc, #212]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800be4a:	8a9b      	ldrh	r3, [r3, #20]
 800be4c:	4413      	add	r3, r2
 800be4e:	b29b      	uxth	r3, r3
 800be50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be54:	b29a      	uxth	r2, r3
 800be56:	4b32      	ldr	r3, [pc, #200]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800be58:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800be5a:	4b31      	ldr	r3, [pc, #196]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800be5c:	8a1a      	ldrh	r2, [r3, #16]
 800be5e:	4b30      	ldr	r3, [pc, #192]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800be60:	8a5b      	ldrh	r3, [r3, #18]
 800be62:	429a      	cmp	r2, r3
 800be64:	d04d      	beq.n	800bf02 <TRACE_TxCpltCallback+0xee>
 800be66:	4b2e      	ldr	r3, [pc, #184]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800be68:	8adb      	ldrh	r3, [r3, #22]
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d149      	bne.n	800bf02 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800be6e:	4b2c      	ldr	r3, [pc, #176]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800be70:	789b      	ldrb	r3, [r3, #2]
 800be72:	2b01      	cmp	r3, #1
 800be74:	d117      	bne.n	800bea6 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800be76:	4b2a      	ldr	r3, [pc, #168]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800be78:	881a      	ldrh	r2, [r3, #0]
 800be7a:	4b29      	ldr	r3, [pc, #164]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800be7c:	8a1b      	ldrh	r3, [r3, #16]
 800be7e:	1ad3      	subs	r3, r2, r3
 800be80:	b29a      	uxth	r2, r3
 800be82:	4b27      	ldr	r3, [pc, #156]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800be84:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800be86:	4b26      	ldr	r3, [pc, #152]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800be88:	2202      	movs	r2, #2
 800be8a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800be8c:	4b24      	ldr	r3, [pc, #144]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800be8e:	2200      	movs	r2, #0
 800be90:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800be92:	4b23      	ldr	r3, [pc, #140]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800be94:	8a9b      	ldrh	r3, [r3, #20]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d105      	bne.n	800bea6 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800be9a:	4b21      	ldr	r3, [pc, #132]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800be9c:	2200      	movs	r2, #0
 800be9e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bea0:	4b1f      	ldr	r3, [pc, #124]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800bea2:	2200      	movs	r2, #0
 800bea4:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800bea6:	4b1e      	ldr	r3, [pc, #120]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800bea8:	789b      	ldrb	r3, [r3, #2]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d115      	bne.n	800beda <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800beae:	4b1c      	ldr	r3, [pc, #112]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800beb0:	8a5a      	ldrh	r2, [r3, #18]
 800beb2:	4b1b      	ldr	r3, [pc, #108]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800beb4:	8a1b      	ldrh	r3, [r3, #16]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d908      	bls.n	800becc <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800beba:	4b19      	ldr	r3, [pc, #100]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800bebc:	8a5a      	ldrh	r2, [r3, #18]
 800bebe:	4b18      	ldr	r3, [pc, #96]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800bec0:	8a1b      	ldrh	r3, [r3, #16]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	b29a      	uxth	r2, r3
 800bec6:	4b16      	ldr	r3, [pc, #88]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800bec8:	829a      	strh	r2, [r3, #20]
 800beca:	e006      	b.n	800beda <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800becc:	4b14      	ldr	r3, [pc, #80]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800bece:	8a1b      	ldrh	r3, [r3, #16]
 800bed0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	4b12      	ldr	r3, [pc, #72]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800bed8:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800beda:	4b11      	ldr	r3, [pc, #68]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800bedc:	8a1b      	ldrh	r3, [r3, #16]
 800bede:	461a      	mov	r2, r3
 800bee0:	4b10      	ldr	r3, [pc, #64]	; (800bf24 <TRACE_TxCpltCallback+0x110>)
 800bee2:	4413      	add	r3, r2
 800bee4:	61fb      	str	r3, [r7, #28]
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	f383 8810 	msr	PRIMASK, r3
}
 800bef0:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800bef2:	4b0d      	ldr	r3, [pc, #52]	; (800bf28 <TRACE_TxCpltCallback+0x114>)
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	4a0a      	ldr	r2, [pc, #40]	; (800bf20 <TRACE_TxCpltCallback+0x10c>)
 800bef8:	8a92      	ldrh	r2, [r2, #20]
 800befa:	4611      	mov	r1, r2
 800befc:	69f8      	ldr	r0, [r7, #28]
 800befe:	4798      	blx	r3
 800bf00:	e00a      	b.n	800bf18 <TRACE_TxCpltCallback+0x104>
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f383 8810 	msr	PRIMASK, r3
}
 800bf0c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800bf0e:	f7f4 fdc3 	bl	8000a98 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800bf12:	f000 f8a7 	bl	800c064 <TRACE_UnLock>
  }
}
 800bf16:	bf00      	nop
 800bf18:	bf00      	nop
 800bf1a:	3720      	adds	r7, #32
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	20000588 	.word	0x20000588
 800bf24:	200005a0 	.word	0x200005a0
 800bf28:	0800c514 	.word	0x0800c514

0800bf2c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b087      	sub	sp, #28
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	4603      	mov	r3, r0
 800bf34:	6039      	str	r1, [r7, #0]
 800bf36:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800bf38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf3c:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf3e:	f3ef 8310 	mrs	r3, PRIMASK
 800bf42:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf44:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bf46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf48:	b672      	cpsid	i
}
 800bf4a:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800bf4c:	4b35      	ldr	r3, [pc, #212]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bf4e:	8a5a      	ldrh	r2, [r3, #18]
 800bf50:	4b34      	ldr	r3, [pc, #208]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bf52:	8a1b      	ldrh	r3, [r3, #16]
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d11b      	bne.n	800bf90 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800bf58:	4b32      	ldr	r3, [pc, #200]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bf5a:	8a5b      	ldrh	r3, [r3, #18]
 800bf5c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bf60:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800bf62:	88fa      	ldrh	r2, [r7, #6]
 800bf64:	8afb      	ldrh	r3, [r7, #22]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d33a      	bcc.n	800bfe0 <TRACE_AllocateBufer+0xb4>
 800bf6a:	4b2e      	ldr	r3, [pc, #184]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bf6c:	8a1b      	ldrh	r3, [r3, #16]
 800bf6e:	88fa      	ldrh	r2, [r7, #6]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d235      	bcs.n	800bfe0 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800bf74:	4b2b      	ldr	r3, [pc, #172]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bf76:	2201      	movs	r2, #1
 800bf78:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800bf7a:	4b2a      	ldr	r3, [pc, #168]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bf7c:	8a5a      	ldrh	r2, [r3, #18]
 800bf7e:	4b29      	ldr	r3, [pc, #164]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bf80:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800bf82:	4b28      	ldr	r3, [pc, #160]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bf84:	8a1b      	ldrh	r3, [r3, #16]
 800bf86:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800bf88:	4b26      	ldr	r3, [pc, #152]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	825a      	strh	r2, [r3, #18]
 800bf8e:	e027      	b.n	800bfe0 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800bf90:	4b24      	ldr	r3, [pc, #144]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bf92:	8a5a      	ldrh	r2, [r3, #18]
 800bf94:	4b23      	ldr	r3, [pc, #140]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bf96:	8a1b      	ldrh	r3, [r3, #16]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d91b      	bls.n	800bfd4 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800bf9c:	4b21      	ldr	r3, [pc, #132]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bf9e:	8a5b      	ldrh	r3, [r3, #18]
 800bfa0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bfa4:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800bfa6:	88fa      	ldrh	r2, [r7, #6]
 800bfa8:	8afb      	ldrh	r3, [r7, #22]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d318      	bcc.n	800bfe0 <TRACE_AllocateBufer+0xb4>
 800bfae:	4b1d      	ldr	r3, [pc, #116]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bfb0:	8a1b      	ldrh	r3, [r3, #16]
 800bfb2:	88fa      	ldrh	r2, [r7, #6]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d213      	bcs.n	800bfe0 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800bfb8:	4b1a      	ldr	r3, [pc, #104]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bfba:	2201      	movs	r2, #1
 800bfbc:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800bfbe:	4b19      	ldr	r3, [pc, #100]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bfc0:	8a5a      	ldrh	r2, [r3, #18]
 800bfc2:	4b18      	ldr	r3, [pc, #96]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bfc4:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800bfc6:	4b17      	ldr	r3, [pc, #92]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bfc8:	8a1b      	ldrh	r3, [r3, #16]
 800bfca:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800bfcc:	4b15      	ldr	r3, [pc, #84]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bfce:	2200      	movs	r2, #0
 800bfd0:	825a      	strh	r2, [r3, #18]
 800bfd2:	e005      	b.n	800bfe0 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800bfd4:	4b13      	ldr	r3, [pc, #76]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bfd6:	8a1a      	ldrh	r2, [r3, #16]
 800bfd8:	4b12      	ldr	r3, [pc, #72]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bfda:	8a5b      	ldrh	r3, [r3, #18]
 800bfdc:	1ad3      	subs	r3, r2, r3
 800bfde:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800bfe0:	8afa      	ldrh	r2, [r7, #22]
 800bfe2:	88fb      	ldrh	r3, [r7, #6]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d90f      	bls.n	800c008 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800bfe8:	4b0e      	ldr	r3, [pc, #56]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bfea:	8a5a      	ldrh	r2, [r3, #18]
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800bff0:	4b0c      	ldr	r3, [pc, #48]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800bff2:	8a5a      	ldrh	r2, [r3, #18]
 800bff4:	88fb      	ldrh	r3, [r7, #6]
 800bff6:	4413      	add	r3, r2
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bffe:	b29a      	uxth	r2, r3
 800c000:	4b08      	ldr	r3, [pc, #32]	; (800c024 <TRACE_AllocateBufer+0xf8>)
 800c002:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800c004:	2300      	movs	r3, #0
 800c006:	82bb      	strh	r3, [r7, #20]
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	f383 8810 	msr	PRIMASK, r3
}
 800c012:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800c014:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	371c      	adds	r7, #28
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bc80      	pop	{r7}
 800c020:	4770      	bx	lr
 800c022:	bf00      	nop
 800c024:	20000588 	.word	0x20000588

0800c028 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800c028:	b480      	push	{r7}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c02e:	f3ef 8310 	mrs	r3, PRIMASK
 800c032:	607b      	str	r3, [r7, #4]
  return(result);
 800c034:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c036:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c038:	b672      	cpsid	i
}
 800c03a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800c03c:	4b08      	ldr	r3, [pc, #32]	; (800c060 <TRACE_Lock+0x38>)
 800c03e:	8adb      	ldrh	r3, [r3, #22]
 800c040:	3301      	adds	r3, #1
 800c042:	b29a      	uxth	r2, r3
 800c044:	4b06      	ldr	r3, [pc, #24]	; (800c060 <TRACE_Lock+0x38>)
 800c046:	82da      	strh	r2, [r3, #22]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	f383 8810 	msr	PRIMASK, r3
}
 800c052:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c054:	bf00      	nop
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	bc80      	pop	{r7}
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop
 800c060:	20000588 	.word	0x20000588

0800c064 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c06a:	f3ef 8310 	mrs	r3, PRIMASK
 800c06e:	607b      	str	r3, [r7, #4]
  return(result);
 800c070:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c072:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c074:	b672      	cpsid	i
}
 800c076:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800c078:	4b08      	ldr	r3, [pc, #32]	; (800c09c <TRACE_UnLock+0x38>)
 800c07a:	8adb      	ldrh	r3, [r3, #22]
 800c07c:	3b01      	subs	r3, #1
 800c07e:	b29a      	uxth	r2, r3
 800c080:	4b06      	ldr	r3, [pc, #24]	; (800c09c <TRACE_UnLock+0x38>)
 800c082:	82da      	strh	r2, [r3, #22]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	f383 8810 	msr	PRIMASK, r3
}
 800c08e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c090:	bf00      	nop
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	bc80      	pop	{r7}
 800c098:	4770      	bx	lr
 800c09a:	bf00      	nop
 800c09c:	20000588 	.word	0x20000588

0800c0a0 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800c0a4:	4b05      	ldr	r3, [pc, #20]	; (800c0bc <TRACE_IsLocked+0x1c>)
 800c0a6:	8adb      	ldrh	r3, [r3, #22]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	bf14      	ite	ne
 800c0ac:	2301      	movne	r3, #1
 800c0ae:	2300      	moveq	r3, #0
 800c0b0:	b2db      	uxtb	r3, r3
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bc80      	pop	{r7}
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	20000588 	.word	0x20000588

0800c0c0 <__libc_init_array>:
 800c0c0:	b570      	push	{r4, r5, r6, lr}
 800c0c2:	4d0d      	ldr	r5, [pc, #52]	; (800c0f8 <__libc_init_array+0x38>)
 800c0c4:	4c0d      	ldr	r4, [pc, #52]	; (800c0fc <__libc_init_array+0x3c>)
 800c0c6:	1b64      	subs	r4, r4, r5
 800c0c8:	10a4      	asrs	r4, r4, #2
 800c0ca:	2600      	movs	r6, #0
 800c0cc:	42a6      	cmp	r6, r4
 800c0ce:	d109      	bne.n	800c0e4 <__libc_init_array+0x24>
 800c0d0:	4d0b      	ldr	r5, [pc, #44]	; (800c100 <__libc_init_array+0x40>)
 800c0d2:	4c0c      	ldr	r4, [pc, #48]	; (800c104 <__libc_init_array+0x44>)
 800c0d4:	f000 f842 	bl	800c15c <_init>
 800c0d8:	1b64      	subs	r4, r4, r5
 800c0da:	10a4      	asrs	r4, r4, #2
 800c0dc:	2600      	movs	r6, #0
 800c0de:	42a6      	cmp	r6, r4
 800c0e0:	d105      	bne.n	800c0ee <__libc_init_array+0x2e>
 800c0e2:	bd70      	pop	{r4, r5, r6, pc}
 800c0e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0e8:	4798      	blx	r3
 800c0ea:	3601      	adds	r6, #1
 800c0ec:	e7ee      	b.n	800c0cc <__libc_init_array+0xc>
 800c0ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0f2:	4798      	blx	r3
 800c0f4:	3601      	adds	r6, #1
 800c0f6:	e7f2      	b.n	800c0de <__libc_init_array+0x1e>
 800c0f8:	0800c69c 	.word	0x0800c69c
 800c0fc:	0800c69c 	.word	0x0800c69c
 800c100:	0800c69c 	.word	0x0800c69c
 800c104:	0800c6a0 	.word	0x0800c6a0

0800c108 <memcpy>:
 800c108:	440a      	add	r2, r1
 800c10a:	4291      	cmp	r1, r2
 800c10c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c110:	d100      	bne.n	800c114 <memcpy+0xc>
 800c112:	4770      	bx	lr
 800c114:	b510      	push	{r4, lr}
 800c116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c11a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c11e:	4291      	cmp	r1, r2
 800c120:	d1f9      	bne.n	800c116 <memcpy+0xe>
 800c122:	bd10      	pop	{r4, pc}

0800c124 <memset>:
 800c124:	4402      	add	r2, r0
 800c126:	4603      	mov	r3, r0
 800c128:	4293      	cmp	r3, r2
 800c12a:	d100      	bne.n	800c12e <memset+0xa>
 800c12c:	4770      	bx	lr
 800c12e:	f803 1b01 	strb.w	r1, [r3], #1
 800c132:	e7f9      	b.n	800c128 <memset+0x4>

0800c134 <strncmp>:
 800c134:	b510      	push	{r4, lr}
 800c136:	4603      	mov	r3, r0
 800c138:	b172      	cbz	r2, 800c158 <strncmp+0x24>
 800c13a:	3901      	subs	r1, #1
 800c13c:	1884      	adds	r4, r0, r2
 800c13e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c142:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c146:	4290      	cmp	r0, r2
 800c148:	d101      	bne.n	800c14e <strncmp+0x1a>
 800c14a:	42a3      	cmp	r3, r4
 800c14c:	d101      	bne.n	800c152 <strncmp+0x1e>
 800c14e:	1a80      	subs	r0, r0, r2
 800c150:	bd10      	pop	{r4, pc}
 800c152:	2800      	cmp	r0, #0
 800c154:	d1f3      	bne.n	800c13e <strncmp+0xa>
 800c156:	e7fa      	b.n	800c14e <strncmp+0x1a>
 800c158:	4610      	mov	r0, r2
 800c15a:	e7f9      	b.n	800c150 <strncmp+0x1c>

0800c15c <_init>:
 800c15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c15e:	bf00      	nop
 800c160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c162:	bc08      	pop	{r3}
 800c164:	469e      	mov	lr, r3
 800c166:	4770      	bx	lr

0800c168 <_fini>:
 800c168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16a:	bf00      	nop
 800c16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c16e:	bc08      	pop	{r3}
 800c170:	469e      	mov	lr, r3
 800c172:	4770      	bx	lr
